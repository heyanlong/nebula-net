/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Graph
{

  public partial class PlanNodeBranchInfo : TBase
  {

    public bool Is_do_branch { get; set; }

    public long Condition_node_id { get; set; }

    public PlanNodeBranchInfo()
    {
    }

    public PlanNodeBranchInfo(bool is_do_branch, long condition_node_id) : this()
    {
      this.Is_do_branch = is_do_branch;
      this.Condition_node_id = condition_node_id;
    }

    public PlanNodeBranchInfo DeepCopy()
    {
      var tmp10 = new PlanNodeBranchInfo();
      tmp10.Is_do_branch = this.Is_do_branch;
      tmp10.Condition_node_id = this.Condition_node_id;
      return tmp10;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_is_do_branch = false;
        bool isset_condition_node_id = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                Is_do_branch = await iprot.ReadBoolAsync(cancellationToken);
                isset_is_do_branch = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Condition_node_id = await iprot.ReadI64Async(cancellationToken);
                isset_condition_node_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_is_do_branch)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_condition_node_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp11 = new TStruct("PlanNodeBranchInfo");
        await oprot.WriteStructBeginAsync(tmp11, cancellationToken);
        var tmp12 = new TField();
        tmp12.Name = "is_do_branch";
        tmp12.Type = TType.Bool;
        tmp12.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
        await oprot.WriteBoolAsync(Is_do_branch, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp12.Name = "condition_node_id";
        tmp12.Type = TType.I64;
        tmp12.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
        await oprot.WriteI64Async(Condition_node_id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is PlanNodeBranchInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Is_do_branch, other.Is_do_branch)
        && System.Object.Equals(Condition_node_id, other.Condition_node_id);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Is_do_branch.GetHashCode();
        hashcode = (hashcode * 397) + Condition_node_id.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp13 = new StringBuilder("PlanNodeBranchInfo(");
      tmp13.Append(", Is_do_branch: ");
      Is_do_branch.ToString(tmp13);
      tmp13.Append(", Condition_node_id: ");
      Condition_node_id.ToString(tmp13);
      tmp13.Append(')');
      return tmp13.ToString();
    }
  }

}
