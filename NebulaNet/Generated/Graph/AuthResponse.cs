/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Graph
{

  public partial class AuthResponse : TBase
  {
    private byte[] _error_msg;
    private long _session_id;
    private int _time_zone_offset_seconds;
    private byte[] _time_zone_name;

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Common.ErrorCode"/>
    /// </summary>
    public global::Nebula.Common.ErrorCode Error_code { get; set; }

    public byte[] Error_msg
    {
      get
      {
        return _error_msg;
      }
      set
      {
        __isset.error_msg = true;
        this._error_msg = value;
      }
    }

    public long Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }

    public int Time_zone_offset_seconds
    {
      get
      {
        return _time_zone_offset_seconds;
      }
      set
      {
        __isset.time_zone_offset_seconds = true;
        this._time_zone_offset_seconds = value;
      }
    }

    public byte[] Time_zone_name
    {
      get
      {
        return _time_zone_name;
      }
      set
      {
        __isset.time_zone_name = true;
        this._time_zone_name = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool error_msg;
      public bool session_id;
      public bool time_zone_offset_seconds;
      public bool time_zone_name;
    }

    public AuthResponse()
    {
    }

    public AuthResponse(global::Nebula.Common.ErrorCode error_code) : this()
    {
      this.Error_code = error_code;
    }

    public AuthResponse DeepCopy()
    {
      var tmp56 = new AuthResponse();
      tmp56.Error_code = this.Error_code;
      if((Error_msg != null) && __isset.error_msg)
      {
        tmp56.Error_msg = this.Error_msg.ToArray();
      }
      tmp56.__isset.error_msg = this.__isset.error_msg;
      if(__isset.session_id)
      {
        tmp56.Session_id = this.Session_id;
      }
      tmp56.__isset.session_id = this.__isset.session_id;
      if(__isset.time_zone_offset_seconds)
      {
        tmp56.Time_zone_offset_seconds = this.Time_zone_offset_seconds;
      }
      tmp56.__isset.time_zone_offset_seconds = this.__isset.time_zone_offset_seconds;
      if((Time_zone_name != null) && __isset.time_zone_name)
      {
        tmp56.Time_zone_name = this.Time_zone_name.ToArray();
      }
      tmp56.__isset.time_zone_name = this.__isset.time_zone_name;
      return tmp56;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_error_code = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Error_code = (global::Nebula.Common.ErrorCode)await iprot.ReadI32Async(cancellationToken);
                isset_error_code = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Error_msg = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Session_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Time_zone_offset_seconds = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Time_zone_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_error_code)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp57 = new TStruct("AuthResponse");
        await oprot.WriteStructBeginAsync(tmp57, cancellationToken);
        var tmp58 = new TField();
        tmp58.Name = "error_code";
        tmp58.Type = TType.I32;
        tmp58.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp58, cancellationToken);
        await oprot.WriteI32Async((int)Error_code, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Error_msg != null) && __isset.error_msg)
        {
          tmp58.Name = "error_msg";
          tmp58.Type = TType.String;
          tmp58.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp58, cancellationToken);
          await oprot.WriteBinaryAsync(Error_msg, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.session_id)
        {
          tmp58.Name = "session_id";
          tmp58.Type = TType.I64;
          tmp58.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp58, cancellationToken);
          await oprot.WriteI64Async(Session_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.time_zone_offset_seconds)
        {
          tmp58.Name = "time_zone_offset_seconds";
          tmp58.Type = TType.I32;
          tmp58.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp58, cancellationToken);
          await oprot.WriteI32Async(Time_zone_offset_seconds, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Time_zone_name != null) && __isset.time_zone_name)
        {
          tmp58.Name = "time_zone_name";
          tmp58.Type = TType.String;
          tmp58.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp58, cancellationToken);
          await oprot.WriteBinaryAsync(Time_zone_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is AuthResponse other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Error_code, other.Error_code)
        && ((__isset.error_msg == other.__isset.error_msg) && ((!__isset.error_msg) || (TCollections.Equals(Error_msg, other.Error_msg))))
        && ((__isset.session_id == other.__isset.session_id) && ((!__isset.session_id) || (System.Object.Equals(Session_id, other.Session_id))))
        && ((__isset.time_zone_offset_seconds == other.__isset.time_zone_offset_seconds) && ((!__isset.time_zone_offset_seconds) || (System.Object.Equals(Time_zone_offset_seconds, other.Time_zone_offset_seconds))))
        && ((__isset.time_zone_name == other.__isset.time_zone_name) && ((!__isset.time_zone_name) || (TCollections.Equals(Time_zone_name, other.Time_zone_name))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Error_code.GetHashCode();
        if((Error_msg != null) && __isset.error_msg)
        {
          hashcode = (hashcode * 397) + Error_msg.GetHashCode();
        }
        if(__isset.session_id)
        {
          hashcode = (hashcode * 397) + Session_id.GetHashCode();
        }
        if(__isset.time_zone_offset_seconds)
        {
          hashcode = (hashcode * 397) + Time_zone_offset_seconds.GetHashCode();
        }
        if((Time_zone_name != null) && __isset.time_zone_name)
        {
          hashcode = (hashcode * 397) + Time_zone_name.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp59 = new StringBuilder("AuthResponse(");
      tmp59.Append(", Error_code: ");
      Error_code.ToString(tmp59);
      if((Error_msg != null) && __isset.error_msg)
      {
        tmp59.Append(", Error_msg: ");
        Error_msg.ToString(tmp59);
      }
      if(__isset.session_id)
      {
        tmp59.Append(", Session_id: ");
        Session_id.ToString(tmp59);
      }
      if(__isset.time_zone_offset_seconds)
      {
        tmp59.Append(", Time_zone_offset_seconds: ");
        Time_zone_offset_seconds.ToString(tmp59);
      }
      if((Time_zone_name != null) && __isset.time_zone_name)
      {
        tmp59.Append(", Time_zone_name: ");
        Time_zone_name.ToString(tmp59);
      }
      tmp59.Append(')');
      return tmp59.ToString();
    }
  }

}
