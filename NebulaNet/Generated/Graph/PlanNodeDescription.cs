/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Graph
{

  public partial class PlanNodeDescription : TBase
  {
    private List<global::Nebula.Graph.Pair> _description;
    private List<global::Nebula.Graph.ProfilingStats> _profiles;
    private global::Nebula.Graph.PlanNodeBranchInfo _branch_info;
    private List<long> _dependencies;

    public byte[] Name { get; set; }

    public long Id { get; set; }

    public byte[] Output_var { get; set; }

    public List<global::Nebula.Graph.Pair> Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public List<global::Nebula.Graph.ProfilingStats> Profiles
    {
      get
      {
        return _profiles;
      }
      set
      {
        __isset.profiles = true;
        this._profiles = value;
      }
    }

    public global::Nebula.Graph.PlanNodeBranchInfo Branch_info
    {
      get
      {
        return _branch_info;
      }
      set
      {
        __isset.branch_info = true;
        this._branch_info = value;
      }
    }

    public List<long> Dependencies
    {
      get
      {
        return _dependencies;
      }
      set
      {
        __isset.dependencies = true;
        this._dependencies = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool description;
      public bool profiles;
      public bool branch_info;
      public bool dependencies;
    }

    public PlanNodeDescription()
    {
    }

    public PlanNodeDescription(byte[] name, long id, byte[] output_var) : this()
    {
      this.Name = name;
      this.Id = id;
      this.Output_var = output_var;
    }

    public PlanNodeDescription DeepCopy()
    {
      var tmp20 = new PlanNodeDescription();
      if((Name != null))
      {
        tmp20.Name = this.Name.ToArray();
      }
      tmp20.Id = this.Id;
      if((Output_var != null))
      {
        tmp20.Output_var = this.Output_var.ToArray();
      }
      if((Description != null) && __isset.description)
      {
        tmp20.Description = this.Description.DeepCopy();
      }
      tmp20.__isset.description = this.__isset.description;
      if((Profiles != null) && __isset.profiles)
      {
        tmp20.Profiles = this.Profiles.DeepCopy();
      }
      tmp20.__isset.profiles = this.__isset.profiles;
      if((Branch_info != null) && __isset.branch_info)
      {
        tmp20.Branch_info = (global::Nebula.Graph.PlanNodeBranchInfo)this.Branch_info.DeepCopy();
      }
      tmp20.__isset.branch_info = this.__isset.branch_info;
      if((Dependencies != null) && __isset.dependencies)
      {
        tmp20.Dependencies = this.Dependencies.DeepCopy();
      }
      tmp20.__isset.dependencies = this.__isset.dependencies;
      return tmp20;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_name = false;
        bool isset_id = false;
        bool isset_output_var = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadBinaryAsync(cancellationToken);
                isset_name = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Id = await iprot.ReadI64Async(cancellationToken);
                isset_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Output_var = await iprot.ReadBinaryAsync(cancellationToken);
                isset_output_var = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list21 = await iprot.ReadListBeginAsync(cancellationToken);
                  Description = new List<global::Nebula.Graph.Pair>(_list21.Count);
                  for(int _i22 = 0; _i22 < _list21.Count; ++_i22)
                  {
                    global::Nebula.Graph.Pair _elem23;
                    _elem23 = new global::Nebula.Graph.Pair();
                    await _elem23.ReadAsync(iprot, cancellationToken);
                    Description.Add(_elem23);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list24 = await iprot.ReadListBeginAsync(cancellationToken);
                  Profiles = new List<global::Nebula.Graph.ProfilingStats>(_list24.Count);
                  for(int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    global::Nebula.Graph.ProfilingStats _elem26;
                    _elem26 = new global::Nebula.Graph.ProfilingStats();
                    await _elem26.ReadAsync(iprot, cancellationToken);
                    Profiles.Add(_elem26);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Branch_info = new global::Nebula.Graph.PlanNodeBranchInfo();
                await Branch_info.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  TList _list27 = await iprot.ReadListBeginAsync(cancellationToken);
                  Dependencies = new List<long>(_list27.Count);
                  for(int _i28 = 0; _i28 < _list27.Count; ++_i28)
                  {
                    long _elem29;
                    _elem29 = await iprot.ReadI64Async(cancellationToken);
                    Dependencies.Add(_elem29);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_name)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_output_var)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp30 = new TStruct("PlanNodeDescription");
        await oprot.WriteStructBeginAsync(tmp30, cancellationToken);
        var tmp31 = new TField();
        if((Name != null))
        {
          tmp31.Name = "name";
          tmp31.Type = TType.String;
          tmp31.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteBinaryAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp31.Name = "id";
        tmp31.Type = TType.I64;
        tmp31.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
        await oprot.WriteI64Async(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Output_var != null))
        {
          tmp31.Name = "output_var";
          tmp31.Type = TType.String;
          tmp31.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteBinaryAsync(Output_var, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Description != null) && __isset.description)
        {
          tmp31.Name = "description";
          tmp31.Type = TType.List;
          tmp31.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Description.Count), cancellationToken);
            foreach (global::Nebula.Graph.Pair _iter32 in Description)
            {
              await _iter32.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Profiles != null) && __isset.profiles)
        {
          tmp31.Name = "profiles";
          tmp31.Type = TType.List;
          tmp31.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Profiles.Count), cancellationToken);
            foreach (global::Nebula.Graph.ProfilingStats _iter33 in Profiles)
            {
              await _iter33.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Branch_info != null) && __isset.branch_info)
        {
          tmp31.Name = "branch_info";
          tmp31.Type = TType.Struct;
          tmp31.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await Branch_info.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Dependencies != null) && __isset.dependencies)
        {
          tmp31.Name = "dependencies";
          tmp31.Type = TType.List;
          tmp31.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I64, Dependencies.Count), cancellationToken);
            foreach (long _iter34 in Dependencies)
            {
              await oprot.WriteI64Async(_iter34, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is PlanNodeDescription other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Name, other.Name)
        && System.Object.Equals(Id, other.Id)
        && TCollections.Equals(Output_var, other.Output_var)
        && ((__isset.description == other.__isset.description) && ((!__isset.description) || (TCollections.Equals(Description, other.Description))))
        && ((__isset.profiles == other.__isset.profiles) && ((!__isset.profiles) || (TCollections.Equals(Profiles, other.Profiles))))
        && ((__isset.branch_info == other.__isset.branch_info) && ((!__isset.branch_info) || (System.Object.Equals(Branch_info, other.Branch_info))))
        && ((__isset.dependencies == other.__isset.dependencies) && ((!__isset.dependencies) || (TCollections.Equals(Dependencies, other.Dependencies))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Name != null))
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        hashcode = (hashcode * 397) + Id.GetHashCode();
        if((Output_var != null))
        {
          hashcode = (hashcode * 397) + Output_var.GetHashCode();
        }
        if((Description != null) && __isset.description)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Description);
        }
        if((Profiles != null) && __isset.profiles)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Profiles);
        }
        if((Branch_info != null) && __isset.branch_info)
        {
          hashcode = (hashcode * 397) + Branch_info.GetHashCode();
        }
        if((Dependencies != null) && __isset.dependencies)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Dependencies);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp35 = new StringBuilder("PlanNodeDescription(");
      if((Name != null))
      {
        tmp35.Append(", Name: ");
        Name.ToString(tmp35);
      }
      tmp35.Append(", Id: ");
      Id.ToString(tmp35);
      if((Output_var != null))
      {
        tmp35.Append(", Output_var: ");
        Output_var.ToString(tmp35);
      }
      if((Description != null) && __isset.description)
      {
        tmp35.Append(", Description: ");
        Description.ToString(tmp35);
      }
      if((Profiles != null) && __isset.profiles)
      {
        tmp35.Append(", Profiles: ");
        Profiles.ToString(tmp35);
      }
      if((Branch_info != null) && __isset.branch_info)
      {
        tmp35.Append(", Branch_info: ");
        Branch_info.ToString(tmp35);
      }
      if((Dependencies != null) && __isset.dependencies)
      {
        tmp35.Append(", Dependencies: ");
        Dependencies.ToString(tmp35);
      }
      tmp35.Append(')');
      return tmp35.ToString();
    }
  }

}
