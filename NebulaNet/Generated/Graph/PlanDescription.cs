/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Graph
{

  public partial class PlanDescription : TBase
  {

    public List<global::Nebula.Graph.PlanNodeDescription> Plan_node_descs { get; set; }

    public Dictionary<long, long> Node_index_map { get; set; }

    public byte[] Format { get; set; }

    public int Optimize_time_in_us { get; set; }

    public PlanDescription()
    {
    }

    public PlanDescription(List<global::Nebula.Graph.PlanNodeDescription> plan_node_descs, Dictionary<long, long> node_index_map, byte[] format, int optimize_time_in_us) : this()
    {
      this.Plan_node_descs = plan_node_descs;
      this.Node_index_map = node_index_map;
      this.Format = format;
      this.Optimize_time_in_us = optimize_time_in_us;
    }

    public PlanDescription DeepCopy()
    {
      var tmp37 = new PlanDescription();
      if((Plan_node_descs != null))
      {
        tmp37.Plan_node_descs = this.Plan_node_descs.DeepCopy();
      }
      if((Node_index_map != null))
      {
        tmp37.Node_index_map = this.Node_index_map.DeepCopy();
      }
      if((Format != null))
      {
        tmp37.Format = this.Format.ToArray();
      }
      tmp37.Optimize_time_in_us = this.Optimize_time_in_us;
      return tmp37;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_plan_node_descs = false;
        bool isset_node_index_map = false;
        bool isset_format = false;
        bool isset_optimize_time_in_us = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list38 = await iprot.ReadListBeginAsync(cancellationToken);
                  Plan_node_descs = new List<global::Nebula.Graph.PlanNodeDescription>(_list38.Count);
                  for(int _i39 = 0; _i39 < _list38.Count; ++_i39)
                  {
                    global::Nebula.Graph.PlanNodeDescription _elem40;
                    _elem40 = new global::Nebula.Graph.PlanNodeDescription();
                    await _elem40.ReadAsync(iprot, cancellationToken);
                    Plan_node_descs.Add(_elem40);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_plan_node_descs = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map41 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Node_index_map = new Dictionary<long, long>(_map41.Count);
                  for(int _i42 = 0; _i42 < _map41.Count; ++_i42)
                  {
                    long _key43;
                    long _val44;
                    _key43 = await iprot.ReadI64Async(cancellationToken);
                    _val44 = await iprot.ReadI64Async(cancellationToken);
                    Node_index_map[_key43] = _val44;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_node_index_map = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Format = await iprot.ReadBinaryAsync(cancellationToken);
                isset_format = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Optimize_time_in_us = await iprot.ReadI32Async(cancellationToken);
                isset_optimize_time_in_us = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_plan_node_descs)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_node_index_map)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_format)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_optimize_time_in_us)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp45 = new TStruct("PlanDescription");
        await oprot.WriteStructBeginAsync(tmp45, cancellationToken);
        var tmp46 = new TField();
        if((Plan_node_descs != null))
        {
          tmp46.Name = "plan_node_descs";
          tmp46.Type = TType.List;
          tmp46.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Plan_node_descs.Count), cancellationToken);
            foreach (global::Nebula.Graph.PlanNodeDescription _iter47 in Plan_node_descs)
            {
              await _iter47.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Node_index_map != null))
        {
          tmp46.Name = "node_index_map";
          tmp46.Type = TType.Map;
          tmp46.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.I64, Node_index_map.Count), cancellationToken);
            foreach (long _iter48 in Node_index_map.Keys)
            {
              await oprot.WriteI64Async(_iter48, cancellationToken);
              await oprot.WriteI64Async(Node_index_map[_iter48], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Format != null))
        {
          tmp46.Name = "format";
          tmp46.Type = TType.String;
          tmp46.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteBinaryAsync(Format, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp46.Name = "optimize_time_in_us";
        tmp46.Type = TType.I32;
        tmp46.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
        await oprot.WriteI32Async(Optimize_time_in_us, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is PlanDescription other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Plan_node_descs, other.Plan_node_descs)
        && TCollections.Equals(Node_index_map, other.Node_index_map)
        && TCollections.Equals(Format, other.Format)
        && System.Object.Equals(Optimize_time_in_us, other.Optimize_time_in_us);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Plan_node_descs != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Plan_node_descs);
        }
        if((Node_index_map != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Node_index_map);
        }
        if((Format != null))
        {
          hashcode = (hashcode * 397) + Format.GetHashCode();
        }
        hashcode = (hashcode * 397) + Optimize_time_in_us.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp49 = new StringBuilder("PlanDescription(");
      if((Plan_node_descs != null))
      {
        tmp49.Append(", Plan_node_descs: ");
        Plan_node_descs.ToString(tmp49);
      }
      if((Node_index_map != null))
      {
        tmp49.Append(", Node_index_map: ");
        Node_index_map.ToString(tmp49);
      }
      if((Format != null))
      {
        tmp49.Append(", Format: ");
        Format.ToString(tmp49);
      }
      tmp49.Append(", Optimize_time_in_us: ");
      Optimize_time_in_us.ToString(tmp49);
      tmp49.Append(')');
      return tmp49.ToString();
    }
  }

}
