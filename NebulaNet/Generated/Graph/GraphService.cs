/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Graph
{
  public partial class GraphService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Nebula.Graph.AuthResponse> authenticate(byte[] username, byte[] password, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task signout(long sessionId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Graph.ExecutionResponse> execute(long sessionId, byte[] stmt, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> executeJson(long sessionId, byte[] stmt, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Graph.VerifyClientVersionResp> verifyClientVersion(global::Nebula.Graph.VerifyClientVersionReq req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.AuthResponse> authenticate(byte[] username, byte[] password, CancellationToken cancellationToken = default)
      {
        await send_authenticate(username, password, cancellationToken);
        return await recv_authenticate(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_authenticate(byte[] username, byte[] password, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("authenticate", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp71 = new InternalStructs.authenticate_args() {
          Username = username,
          Password = password,
        };
        
        await tmp71.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.AuthResponse> recv_authenticate(CancellationToken cancellationToken = default)
      {
        
        var tmp72 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp72.Type == TMessageType.Exception)
        {
          var tmp73 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp73;
        }

        var tmp74 = new InternalStructs.authenticate_result();
        await tmp74.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp74.__isset.success)
        {
          return tmp74.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticate failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task signout(long sessionId, CancellationToken cancellationToken = default)
      {
        await send_signout(sessionId, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_signout(long sessionId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("signout", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp75 = new InternalStructs.signout_args() {
          SessionId = sessionId,
        };
        
        await tmp75.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.ExecutionResponse> execute(long sessionId, byte[] stmt, CancellationToken cancellationToken = default)
      {
        await send_execute(sessionId, stmt, cancellationToken);
        return await recv_execute(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_execute(long sessionId, byte[] stmt, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("execute", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp76 = new InternalStructs.execute_args() {
          SessionId = sessionId,
          Stmt = stmt,
        };
        
        await tmp76.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.ExecutionResponse> recv_execute(CancellationToken cancellationToken = default)
      {
        
        var tmp77 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp77.Type == TMessageType.Exception)
        {
          var tmp78 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp78;
        }

        var tmp79 = new InternalStructs.execute_result();
        await tmp79.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp79.__isset.success)
        {
          return tmp79.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "execute failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> executeJson(long sessionId, byte[] stmt, CancellationToken cancellationToken = default)
      {
        await send_executeJson(sessionId, stmt, cancellationToken);
        return await recv_executeJson(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_executeJson(long sessionId, byte[] stmt, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeJson", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp80 = new InternalStructs.executeJson_args() {
          SessionId = sessionId,
          Stmt = stmt,
        };
        
        await tmp80.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_executeJson(CancellationToken cancellationToken = default)
      {
        
        var tmp81 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp81.Type == TMessageType.Exception)
        {
          var tmp82 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp82;
        }

        var tmp83 = new InternalStructs.executeJson_result();
        await tmp83.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp83.__isset.success)
        {
          return tmp83.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeJson failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.VerifyClientVersionResp> verifyClientVersion(global::Nebula.Graph.VerifyClientVersionReq req, CancellationToken cancellationToken = default)
      {
        await send_verifyClientVersion(req, cancellationToken);
        return await recv_verifyClientVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_verifyClientVersion(global::Nebula.Graph.VerifyClientVersionReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("verifyClientVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp84 = new InternalStructs.verifyClientVersion_args() {
          Req = req,
        };
        
        await tmp84.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.VerifyClientVersionResp> recv_verifyClientVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp85 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp85.Type == TMessageType.Exception)
        {
          var tmp86 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp86;
        }

        var tmp87 = new InternalStructs.verifyClientVersion_result();
        await tmp87.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp87.__isset.success)
        {
          return tmp87.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyClientVersion failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["authenticate"] = authenticate_ProcessAsync;
        processMap_["signout"] = signout_ProcessAsync;
        processMap_["execute"] = execute_ProcessAsync;
        processMap_["executeJson"] = executeJson_ProcessAsync;
        processMap_["verifyClientVersion"] = verifyClientVersion_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task authenticate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp88 = new InternalStructs.authenticate_args();
        await tmp88.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp89 = new InternalStructs.authenticate_result();
        try
        {
          tmp89.Success = await _iAsync.authenticate(tmp88.Username, tmp88.Password, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("authenticate", TMessageType.Reply, seqid), cancellationToken); 
          await tmp89.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp90)
        {
          var tmp91 = $"Error occurred in {GetType().FullName}: {tmp90.Message}";
          if(_logger != null)
            _logger.LogError(tmp90, tmp91);
          else
            Console.Error.WriteLine(tmp91);
          var tmp92 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("authenticate", TMessageType.Exception, seqid), cancellationToken);
          await tmp92.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task signout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp93 = new InternalStructs.signout_args();
        await tmp93.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.signout(tmp93.SessionId, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp95)
        {
          var tmp96 = $"Error occurred in {GetType().FullName}: {tmp95.Message}";
          if(_logger != null)
            _logger.LogError(tmp95, tmp96);
          else
            Console.Error.WriteLine(tmp96);
        }
      }

      public async global::System.Threading.Tasks.Task execute_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp97 = new InternalStructs.execute_args();
        await tmp97.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp98 = new InternalStructs.execute_result();
        try
        {
          tmp98.Success = await _iAsync.execute(tmp97.SessionId, tmp97.Stmt, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("execute", TMessageType.Reply, seqid), cancellationToken); 
          await tmp98.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp99)
        {
          var tmp100 = $"Error occurred in {GetType().FullName}: {tmp99.Message}";
          if(_logger != null)
            _logger.LogError(tmp99, tmp100);
          else
            Console.Error.WriteLine(tmp100);
          var tmp101 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("execute", TMessageType.Exception, seqid), cancellationToken);
          await tmp101.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task executeJson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp102 = new InternalStructs.executeJson_args();
        await tmp102.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp103 = new InternalStructs.executeJson_result();
        try
        {
          tmp103.Success = await _iAsync.executeJson(tmp102.SessionId, tmp102.Stmt, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("executeJson", TMessageType.Reply, seqid), cancellationToken); 
          await tmp103.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp104)
        {
          var tmp105 = $"Error occurred in {GetType().FullName}: {tmp104.Message}";
          if(_logger != null)
            _logger.LogError(tmp104, tmp105);
          else
            Console.Error.WriteLine(tmp105);
          var tmp106 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("executeJson", TMessageType.Exception, seqid), cancellationToken);
          await tmp106.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task verifyClientVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp107 = new InternalStructs.verifyClientVersion_args();
        await tmp107.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp108 = new InternalStructs.verifyClientVersion_result();
        try
        {
          tmp108.Success = await _iAsync.verifyClientVersion(tmp107.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("verifyClientVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp108.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp109)
        {
          var tmp110 = $"Error occurred in {GetType().FullName}: {tmp109.Message}";
          if(_logger != null)
            _logger.LogError(tmp109, tmp110);
          else
            Console.Error.WriteLine(tmp110);
          var tmp111 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("verifyClientVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp111.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class authenticate_args : TBase
      {
        private byte[] _username;
        private byte[] _password;

        public byte[] Username
        {
          get
          {
            return _username;
          }
          set
          {
            __isset.username = true;
            this._username = value;
          }
        }

        public byte[] Password
        {
          get
          {
            return _password;
          }
          set
          {
            __isset.password = true;
            this._password = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool username;
          public bool password;
        }

        public authenticate_args()
        {
        }

        public authenticate_args DeepCopy()
        {
          var tmp112 = new authenticate_args();
          if((Username != null) && __isset.username)
          {
            tmp112.Username = this.Username.ToArray();
          }
          tmp112.__isset.username = this.__isset.username;
          if((Password != null) && __isset.password)
          {
            tmp112.Password = this.Password.ToArray();
          }
          tmp112.__isset.password = this.__isset.password;
          return tmp112;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Username = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Password = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp113 = new TStruct("authenticate_args");
            await oprot.WriteStructBeginAsync(tmp113, cancellationToken);
            var tmp114 = new TField();
            if((Username != null) && __isset.username)
            {
              tmp114.Name = "username";
              tmp114.Type = TType.String;
              tmp114.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp114, cancellationToken);
              await oprot.WriteBinaryAsync(Username, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Password != null) && __isset.password)
            {
              tmp114.Name = "password";
              tmp114.Type = TType.String;
              tmp114.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp114, cancellationToken);
              await oprot.WriteBinaryAsync(Password, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticate_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.username == other.__isset.username) && ((!__isset.username) || (TCollections.Equals(Username, other.Username))))
            && ((__isset.password == other.__isset.password) && ((!__isset.password) || (TCollections.Equals(Password, other.Password))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Username != null) && __isset.username)
            {
              hashcode = (hashcode * 397) + Username.GetHashCode();
            }
            if((Password != null) && __isset.password)
            {
              hashcode = (hashcode * 397) + Password.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp115 = new StringBuilder("authenticate_args(");
          int tmp116 = 0;
          if((Username != null) && __isset.username)
          {
            if(0 < tmp116++) { tmp115.Append(", "); }
            tmp115.Append("Username: ");
            Username.ToString(tmp115);
          }
          if((Password != null) && __isset.password)
          {
            if(0 < tmp116++) { tmp115.Append(", "); }
            tmp115.Append("Password: ");
            Password.ToString(tmp115);
          }
          tmp115.Append(')');
          return tmp115.ToString();
        }
      }


      public partial class authenticate_result : TBase
      {
        private global::Nebula.Graph.AuthResponse _success;

        public global::Nebula.Graph.AuthResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public authenticate_result()
        {
        }

        public authenticate_result DeepCopy()
        {
          var tmp117 = new authenticate_result();
          if((Success != null) && __isset.success)
          {
            tmp117.Success = (global::Nebula.Graph.AuthResponse)this.Success.DeepCopy();
          }
          tmp117.__isset.success = this.__isset.success;
          return tmp117;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Graph.AuthResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp118 = new TStruct("authenticate_result");
            await oprot.WriteStructBeginAsync(tmp118, cancellationToken);
            var tmp119 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp119.Name = "Success";
                tmp119.Type = TType.Struct;
                tmp119.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp119, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticate_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp120 = new StringBuilder("authenticate_result(");
          int tmp121 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp121++) { tmp120.Append(", "); }
            tmp120.Append("Success: ");
            Success.ToString(tmp120);
          }
          tmp120.Append(')');
          return tmp120.ToString();
        }
      }


      public partial class signout_args : TBase
      {
        private long _sessionId;

        public long SessionId
        {
          get
          {
            return _sessionId;
          }
          set
          {
            __isset.sessionId = true;
            this._sessionId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool sessionId;
        }

        public signout_args()
        {
        }

        public signout_args DeepCopy()
        {
          var tmp122 = new signout_args();
          if(__isset.sessionId)
          {
            tmp122.SessionId = this.SessionId;
          }
          tmp122.__isset.sessionId = this.__isset.sessionId;
          return tmp122;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    SessionId = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp123 = new TStruct("signout_args");
            await oprot.WriteStructBeginAsync(tmp123, cancellationToken);
            var tmp124 = new TField();
            if(__isset.sessionId)
            {
              tmp124.Name = "sessionId";
              tmp124.Type = TType.I64;
              tmp124.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp124, cancellationToken);
              await oprot.WriteI64Async(SessionId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is signout_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.sessionId)
            {
              hashcode = (hashcode * 397) + SessionId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp125 = new StringBuilder("signout_args(");
          int tmp126 = 0;
          if(__isset.sessionId)
          {
            if(0 < tmp126++) { tmp125.Append(", "); }
            tmp125.Append("SessionId: ");
            SessionId.ToString(tmp125);
          }
          tmp125.Append(')');
          return tmp125.ToString();
        }
      }


      public partial class execute_args : TBase
      {
        private long _sessionId;
        private byte[] _stmt;

        public long SessionId
        {
          get
          {
            return _sessionId;
          }
          set
          {
            __isset.sessionId = true;
            this._sessionId = value;
          }
        }

        public byte[] Stmt
        {
          get
          {
            return _stmt;
          }
          set
          {
            __isset.stmt = true;
            this._stmt = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool sessionId;
          public bool stmt;
        }

        public execute_args()
        {
        }

        public execute_args DeepCopy()
        {
          var tmp127 = new execute_args();
          if(__isset.sessionId)
          {
            tmp127.SessionId = this.SessionId;
          }
          tmp127.__isset.sessionId = this.__isset.sessionId;
          if((Stmt != null) && __isset.stmt)
          {
            tmp127.Stmt = this.Stmt.ToArray();
          }
          tmp127.__isset.stmt = this.__isset.stmt;
          return tmp127;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    SessionId = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Stmt = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp128 = new TStruct("execute_args");
            await oprot.WriteStructBeginAsync(tmp128, cancellationToken);
            var tmp129 = new TField();
            if(__isset.sessionId)
            {
              tmp129.Name = "sessionId";
              tmp129.Type = TType.I64;
              tmp129.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp129, cancellationToken);
              await oprot.WriteI64Async(SessionId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Stmt != null) && __isset.stmt)
            {
              tmp129.Name = "stmt";
              tmp129.Type = TType.String;
              tmp129.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp129, cancellationToken);
              await oprot.WriteBinaryAsync(Stmt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is execute_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
            && ((__isset.stmt == other.__isset.stmt) && ((!__isset.stmt) || (TCollections.Equals(Stmt, other.Stmt))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.sessionId)
            {
              hashcode = (hashcode * 397) + SessionId.GetHashCode();
            }
            if((Stmt != null) && __isset.stmt)
            {
              hashcode = (hashcode * 397) + Stmt.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp130 = new StringBuilder("execute_args(");
          int tmp131 = 0;
          if(__isset.sessionId)
          {
            if(0 < tmp131++) { tmp130.Append(", "); }
            tmp130.Append("SessionId: ");
            SessionId.ToString(tmp130);
          }
          if((Stmt != null) && __isset.stmt)
          {
            if(0 < tmp131++) { tmp130.Append(", "); }
            tmp130.Append("Stmt: ");
            Stmt.ToString(tmp130);
          }
          tmp130.Append(')');
          return tmp130.ToString();
        }
      }


      public partial class execute_result : TBase
      {
        private global::Nebula.Graph.ExecutionResponse _success;

        public global::Nebula.Graph.ExecutionResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public execute_result()
        {
        }

        public execute_result DeepCopy()
        {
          var tmp132 = new execute_result();
          if((Success != null) && __isset.success)
          {
            tmp132.Success = (global::Nebula.Graph.ExecutionResponse)this.Success.DeepCopy();
          }
          tmp132.__isset.success = this.__isset.success;
          return tmp132;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Graph.ExecutionResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp133 = new TStruct("execute_result");
            await oprot.WriteStructBeginAsync(tmp133, cancellationToken);
            var tmp134 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp134.Name = "Success";
                tmp134.Type = TType.Struct;
                tmp134.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp134, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is execute_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp135 = new StringBuilder("execute_result(");
          int tmp136 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp136++) { tmp135.Append(", "); }
            tmp135.Append("Success: ");
            Success.ToString(tmp135);
          }
          tmp135.Append(')');
          return tmp135.ToString();
        }
      }


      public partial class executeJson_args : TBase
      {
        private long _sessionId;
        private byte[] _stmt;

        public long SessionId
        {
          get
          {
            return _sessionId;
          }
          set
          {
            __isset.sessionId = true;
            this._sessionId = value;
          }
        }

        public byte[] Stmt
        {
          get
          {
            return _stmt;
          }
          set
          {
            __isset.stmt = true;
            this._stmt = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool sessionId;
          public bool stmt;
        }

        public executeJson_args()
        {
        }

        public executeJson_args DeepCopy()
        {
          var tmp137 = new executeJson_args();
          if(__isset.sessionId)
          {
            tmp137.SessionId = this.SessionId;
          }
          tmp137.__isset.sessionId = this.__isset.sessionId;
          if((Stmt != null) && __isset.stmt)
          {
            tmp137.Stmt = this.Stmt.ToArray();
          }
          tmp137.__isset.stmt = this.__isset.stmt;
          return tmp137;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    SessionId = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Stmt = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp138 = new TStruct("executeJson_args");
            await oprot.WriteStructBeginAsync(tmp138, cancellationToken);
            var tmp139 = new TField();
            if(__isset.sessionId)
            {
              tmp139.Name = "sessionId";
              tmp139.Type = TType.I64;
              tmp139.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
              await oprot.WriteI64Async(SessionId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Stmt != null) && __isset.stmt)
            {
              tmp139.Name = "stmt";
              tmp139.Type = TType.String;
              tmp139.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
              await oprot.WriteBinaryAsync(Stmt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeJson_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
            && ((__isset.stmt == other.__isset.stmt) && ((!__isset.stmt) || (TCollections.Equals(Stmt, other.Stmt))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.sessionId)
            {
              hashcode = (hashcode * 397) + SessionId.GetHashCode();
            }
            if((Stmt != null) && __isset.stmt)
            {
              hashcode = (hashcode * 397) + Stmt.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp140 = new StringBuilder("executeJson_args(");
          int tmp141 = 0;
          if(__isset.sessionId)
          {
            if(0 < tmp141++) { tmp140.Append(", "); }
            tmp140.Append("SessionId: ");
            SessionId.ToString(tmp140);
          }
          if((Stmt != null) && __isset.stmt)
          {
            if(0 < tmp141++) { tmp140.Append(", "); }
            tmp140.Append("Stmt: ");
            Stmt.ToString(tmp140);
          }
          tmp140.Append(')');
          return tmp140.ToString();
        }
      }


      public partial class executeJson_result : TBase
      {
        private byte[] _success;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public executeJson_result()
        {
        }

        public executeJson_result DeepCopy()
        {
          var tmp142 = new executeJson_result();
          if((Success != null) && __isset.success)
          {
            tmp142.Success = this.Success.ToArray();
          }
          tmp142.__isset.success = this.__isset.success;
          return tmp142;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp143 = new TStruct("executeJson_result");
            await oprot.WriteStructBeginAsync(tmp143, cancellationToken);
            var tmp144 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp144.Name = "Success";
                tmp144.Type = TType.String;
                tmp144.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp144, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeJson_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp145 = new StringBuilder("executeJson_result(");
          int tmp146 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp146++) { tmp145.Append(", "); }
            tmp145.Append("Success: ");
            Success.ToString(tmp145);
          }
          tmp145.Append(')');
          return tmp145.ToString();
        }
      }


      public partial class verifyClientVersion_args : TBase
      {
        private global::Nebula.Graph.VerifyClientVersionReq _req;

        public global::Nebula.Graph.VerifyClientVersionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public verifyClientVersion_args()
        {
        }

        public verifyClientVersion_args DeepCopy()
        {
          var tmp147 = new verifyClientVersion_args();
          if((Req != null) && __isset.req)
          {
            tmp147.Req = (global::Nebula.Graph.VerifyClientVersionReq)this.Req.DeepCopy();
          }
          tmp147.__isset.req = this.__isset.req;
          return tmp147;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Graph.VerifyClientVersionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp148 = new TStruct("verifyClientVersion_args");
            await oprot.WriteStructBeginAsync(tmp148, cancellationToken);
            var tmp149 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp149.Name = "req";
              tmp149.Type = TType.Struct;
              tmp149.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp149, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is verifyClientVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp150 = new StringBuilder("verifyClientVersion_args(");
          int tmp151 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp151++) { tmp150.Append(", "); }
            tmp150.Append("Req: ");
            Req.ToString(tmp150);
          }
          tmp150.Append(')');
          return tmp150.ToString();
        }
      }


      public partial class verifyClientVersion_result : TBase
      {
        private global::Nebula.Graph.VerifyClientVersionResp _success;

        public global::Nebula.Graph.VerifyClientVersionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public verifyClientVersion_result()
        {
        }

        public verifyClientVersion_result DeepCopy()
        {
          var tmp152 = new verifyClientVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp152.Success = (global::Nebula.Graph.VerifyClientVersionResp)this.Success.DeepCopy();
          }
          tmp152.__isset.success = this.__isset.success;
          return tmp152;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Graph.VerifyClientVersionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp153 = new TStruct("verifyClientVersion_result");
            await oprot.WriteStructBeginAsync(tmp153, cancellationToken);
            var tmp154 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp154.Name = "Success";
                tmp154.Type = TType.Struct;
                tmp154.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp154, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is verifyClientVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp155 = new StringBuilder("verifyClientVersion_result(");
          int tmp156 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp156++) { tmp155.Append(", "); }
            tmp155.Append("Success: ");
            Success.ToString(tmp155);
          }
          tmp155.Append(')');
          return tmp155.ToString();
        }
      }

    }

  }
}
