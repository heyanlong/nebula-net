/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Raftex
{
  public partial class RaftexService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Nebula.Raftex.AskForVoteResponse> askForVote(global::Nebula.Raftex.AskForVoteRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Raftex.AppendLogResponse> appendLog(global::Nebula.Raftex.AppendLogRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Raftex.SendSnapshotResponse> sendSnapshot(global::Nebula.Raftex.SendSnapshotRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Raftex.HeartbeatResponse> heartbeat(global::Nebula.Raftex.HeartbeatRequest req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.AskForVoteResponse> askForVote(global::Nebula.Raftex.AskForVoteRequest req, CancellationToken cancellationToken = default)
      {
        await send_askForVote(req, cancellationToken);
        return await recv_askForVote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_askForVote(global::Nebula.Raftex.AskForVoteRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("askForVote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp53 = new InternalStructs.askForVote_args() {
          Req = req,
        };
        
        await tmp53.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.AskForVoteResponse> recv_askForVote(CancellationToken cancellationToken = default)
      {
        
        var tmp54 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp54.Type == TMessageType.Exception)
        {
          var tmp55 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp55;
        }

        var tmp56 = new InternalStructs.askForVote_result();
        await tmp56.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp56.__isset.success)
        {
          return tmp56.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "askForVote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.AppendLogResponse> appendLog(global::Nebula.Raftex.AppendLogRequest req, CancellationToken cancellationToken = default)
      {
        await send_appendLog(req, cancellationToken);
        return await recv_appendLog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendLog(global::Nebula.Raftex.AppendLogRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendLog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp57 = new InternalStructs.appendLog_args() {
          Req = req,
        };
        
        await tmp57.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.AppendLogResponse> recv_appendLog(CancellationToken cancellationToken = default)
      {
        
        var tmp58 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp58.Type == TMessageType.Exception)
        {
          var tmp59 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp59;
        }

        var tmp60 = new InternalStructs.appendLog_result();
        await tmp60.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp60.__isset.success)
        {
          return tmp60.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "appendLog failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.SendSnapshotResponse> sendSnapshot(global::Nebula.Raftex.SendSnapshotRequest req, CancellationToken cancellationToken = default)
      {
        await send_sendSnapshot(req, cancellationToken);
        return await recv_sendSnapshot(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_sendSnapshot(global::Nebula.Raftex.SendSnapshotRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendSnapshot", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp61 = new InternalStructs.sendSnapshot_args() {
          Req = req,
        };
        
        await tmp61.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.SendSnapshotResponse> recv_sendSnapshot(CancellationToken cancellationToken = default)
      {
        
        var tmp62 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp62.Type == TMessageType.Exception)
        {
          var tmp63 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp63;
        }

        var tmp64 = new InternalStructs.sendSnapshot_result();
        await tmp64.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp64.__isset.success)
        {
          return tmp64.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendSnapshot failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.HeartbeatResponse> heartbeat(global::Nebula.Raftex.HeartbeatRequest req, CancellationToken cancellationToken = default)
      {
        await send_heartbeat(req, cancellationToken);
        return await recv_heartbeat(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_heartbeat(global::Nebula.Raftex.HeartbeatRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("heartbeat", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp65 = new InternalStructs.heartbeat_args() {
          Req = req,
        };
        
        await tmp65.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.HeartbeatResponse> recv_heartbeat(CancellationToken cancellationToken = default)
      {
        
        var tmp66 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp66.Type == TMessageType.Exception)
        {
          var tmp67 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp67;
        }

        var tmp68 = new InternalStructs.heartbeat_result();
        await tmp68.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp68.__isset.success)
        {
          return tmp68.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "heartbeat failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["askForVote"] = askForVote_ProcessAsync;
        processMap_["appendLog"] = appendLog_ProcessAsync;
        processMap_["sendSnapshot"] = sendSnapshot_ProcessAsync;
        processMap_["heartbeat"] = heartbeat_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task askForVote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp69 = new InternalStructs.askForVote_args();
        await tmp69.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp70 = new InternalStructs.askForVote_result();
        try
        {
          tmp70.Success = await _iAsync.askForVote(tmp69.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("askForVote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp70.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp71)
        {
          var tmp72 = $"Error occurred in {GetType().FullName}: {tmp71.Message}";
          if(_logger != null)
            _logger.LogError(tmp71, tmp72);
          else
            Console.Error.WriteLine(tmp72);
          var tmp73 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("askForVote", TMessageType.Exception, seqid), cancellationToken);
          await tmp73.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendLog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp74 = new InternalStructs.appendLog_args();
        await tmp74.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp75 = new InternalStructs.appendLog_result();
        try
        {
          tmp75.Success = await _iAsync.appendLog(tmp74.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("appendLog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp75.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp76)
        {
          var tmp77 = $"Error occurred in {GetType().FullName}: {tmp76.Message}";
          if(_logger != null)
            _logger.LogError(tmp76, tmp77);
          else
            Console.Error.WriteLine(tmp77);
          var tmp78 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("appendLog", TMessageType.Exception, seqid), cancellationToken);
          await tmp78.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task sendSnapshot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp79 = new InternalStructs.sendSnapshot_args();
        await tmp79.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp80 = new InternalStructs.sendSnapshot_result();
        try
        {
          tmp80.Success = await _iAsync.sendSnapshot(tmp79.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("sendSnapshot", TMessageType.Reply, seqid), cancellationToken); 
          await tmp80.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp81)
        {
          var tmp82 = $"Error occurred in {GetType().FullName}: {tmp81.Message}";
          if(_logger != null)
            _logger.LogError(tmp81, tmp82);
          else
            Console.Error.WriteLine(tmp82);
          var tmp83 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("sendSnapshot", TMessageType.Exception, seqid), cancellationToken);
          await tmp83.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task heartbeat_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp84 = new InternalStructs.heartbeat_args();
        await tmp84.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp85 = new InternalStructs.heartbeat_result();
        try
        {
          tmp85.Success = await _iAsync.heartbeat(tmp84.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("heartbeat", TMessageType.Reply, seqid), cancellationToken); 
          await tmp85.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp86)
        {
          var tmp87 = $"Error occurred in {GetType().FullName}: {tmp86.Message}";
          if(_logger != null)
            _logger.LogError(tmp86, tmp87);
          else
            Console.Error.WriteLine(tmp87);
          var tmp88 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("heartbeat", TMessageType.Exception, seqid), cancellationToken);
          await tmp88.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class askForVote_args : TBase
      {
        private global::Nebula.Raftex.AskForVoteRequest _req;

        public global::Nebula.Raftex.AskForVoteRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public askForVote_args()
        {
        }

        public askForVote_args DeepCopy()
        {
          var tmp89 = new askForVote_args();
          if((Req != null) && __isset.req)
          {
            tmp89.Req = (global::Nebula.Raftex.AskForVoteRequest)this.Req.DeepCopy();
          }
          tmp89.__isset.req = this.__isset.req;
          return tmp89;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Raftex.AskForVoteRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp90 = new TStruct("askForVote_args");
            await oprot.WriteStructBeginAsync(tmp90, cancellationToken);
            var tmp91 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp91.Name = "req";
              tmp91.Type = TType.Struct;
              tmp91.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp91, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is askForVote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp92 = new StringBuilder("askForVote_args(");
          int tmp93 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp93++) { tmp92.Append(", "); }
            tmp92.Append("Req: ");
            Req.ToString(tmp92);
          }
          tmp92.Append(')');
          return tmp92.ToString();
        }
      }


      public partial class askForVote_result : TBase
      {
        private global::Nebula.Raftex.AskForVoteResponse _success;

        public global::Nebula.Raftex.AskForVoteResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public askForVote_result()
        {
        }

        public askForVote_result DeepCopy()
        {
          var tmp94 = new askForVote_result();
          if((Success != null) && __isset.success)
          {
            tmp94.Success = (global::Nebula.Raftex.AskForVoteResponse)this.Success.DeepCopy();
          }
          tmp94.__isset.success = this.__isset.success;
          return tmp94;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Raftex.AskForVoteResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp95 = new TStruct("askForVote_result");
            await oprot.WriteStructBeginAsync(tmp95, cancellationToken);
            var tmp96 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp96.Name = "Success";
                tmp96.Type = TType.Struct;
                tmp96.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp96, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is askForVote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp97 = new StringBuilder("askForVote_result(");
          int tmp98 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp98++) { tmp97.Append(", "); }
            tmp97.Append("Success: ");
            Success.ToString(tmp97);
          }
          tmp97.Append(')');
          return tmp97.ToString();
        }
      }


      public partial class appendLog_args : TBase
      {
        private global::Nebula.Raftex.AppendLogRequest _req;

        public global::Nebula.Raftex.AppendLogRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public appendLog_args()
        {
        }

        public appendLog_args DeepCopy()
        {
          var tmp99 = new appendLog_args();
          if((Req != null) && __isset.req)
          {
            tmp99.Req = (global::Nebula.Raftex.AppendLogRequest)this.Req.DeepCopy();
          }
          tmp99.__isset.req = this.__isset.req;
          return tmp99;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Raftex.AppendLogRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp100 = new TStruct("appendLog_args");
            await oprot.WriteStructBeginAsync(tmp100, cancellationToken);
            var tmp101 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp101.Name = "req";
              tmp101.Type = TType.Struct;
              tmp101.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp101, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendLog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp102 = new StringBuilder("appendLog_args(");
          int tmp103 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp103++) { tmp102.Append(", "); }
            tmp102.Append("Req: ");
            Req.ToString(tmp102);
          }
          tmp102.Append(')');
          return tmp102.ToString();
        }
      }


      public partial class appendLog_result : TBase
      {
        private global::Nebula.Raftex.AppendLogResponse _success;

        public global::Nebula.Raftex.AppendLogResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public appendLog_result()
        {
        }

        public appendLog_result DeepCopy()
        {
          var tmp104 = new appendLog_result();
          if((Success != null) && __isset.success)
          {
            tmp104.Success = (global::Nebula.Raftex.AppendLogResponse)this.Success.DeepCopy();
          }
          tmp104.__isset.success = this.__isset.success;
          return tmp104;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Raftex.AppendLogResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp105 = new TStruct("appendLog_result");
            await oprot.WriteStructBeginAsync(tmp105, cancellationToken);
            var tmp106 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp106.Name = "Success";
                tmp106.Type = TType.Struct;
                tmp106.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp106, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendLog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp107 = new StringBuilder("appendLog_result(");
          int tmp108 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp108++) { tmp107.Append(", "); }
            tmp107.Append("Success: ");
            Success.ToString(tmp107);
          }
          tmp107.Append(')');
          return tmp107.ToString();
        }
      }


      public partial class sendSnapshot_args : TBase
      {
        private global::Nebula.Raftex.SendSnapshotRequest _req;

        public global::Nebula.Raftex.SendSnapshotRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public sendSnapshot_args()
        {
        }

        public sendSnapshot_args DeepCopy()
        {
          var tmp109 = new sendSnapshot_args();
          if((Req != null) && __isset.req)
          {
            tmp109.Req = (global::Nebula.Raftex.SendSnapshotRequest)this.Req.DeepCopy();
          }
          tmp109.__isset.req = this.__isset.req;
          return tmp109;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Raftex.SendSnapshotRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp110 = new TStruct("sendSnapshot_args");
            await oprot.WriteStructBeginAsync(tmp110, cancellationToken);
            var tmp111 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp111.Name = "req";
              tmp111.Type = TType.Struct;
              tmp111.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp111, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is sendSnapshot_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp112 = new StringBuilder("sendSnapshot_args(");
          int tmp113 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp113++) { tmp112.Append(", "); }
            tmp112.Append("Req: ");
            Req.ToString(tmp112);
          }
          tmp112.Append(')');
          return tmp112.ToString();
        }
      }


      public partial class sendSnapshot_result : TBase
      {
        private global::Nebula.Raftex.SendSnapshotResponse _success;

        public global::Nebula.Raftex.SendSnapshotResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public sendSnapshot_result()
        {
        }

        public sendSnapshot_result DeepCopy()
        {
          var tmp114 = new sendSnapshot_result();
          if((Success != null) && __isset.success)
          {
            tmp114.Success = (global::Nebula.Raftex.SendSnapshotResponse)this.Success.DeepCopy();
          }
          tmp114.__isset.success = this.__isset.success;
          return tmp114;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Raftex.SendSnapshotResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp115 = new TStruct("sendSnapshot_result");
            await oprot.WriteStructBeginAsync(tmp115, cancellationToken);
            var tmp116 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp116.Name = "Success";
                tmp116.Type = TType.Struct;
                tmp116.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp116, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is sendSnapshot_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp117 = new StringBuilder("sendSnapshot_result(");
          int tmp118 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp118++) { tmp117.Append(", "); }
            tmp117.Append("Success: ");
            Success.ToString(tmp117);
          }
          tmp117.Append(')');
          return tmp117.ToString();
        }
      }


      public partial class heartbeat_args : TBase
      {
        private global::Nebula.Raftex.HeartbeatRequest _req;

        public global::Nebula.Raftex.HeartbeatRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public heartbeat_args()
        {
        }

        public heartbeat_args DeepCopy()
        {
          var tmp119 = new heartbeat_args();
          if((Req != null) && __isset.req)
          {
            tmp119.Req = (global::Nebula.Raftex.HeartbeatRequest)this.Req.DeepCopy();
          }
          tmp119.__isset.req = this.__isset.req;
          return tmp119;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Raftex.HeartbeatRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp120 = new TStruct("heartbeat_args");
            await oprot.WriteStructBeginAsync(tmp120, cancellationToken);
            var tmp121 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp121.Name = "req";
              tmp121.Type = TType.Struct;
              tmp121.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp121, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is heartbeat_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp122 = new StringBuilder("heartbeat_args(");
          int tmp123 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp123++) { tmp122.Append(", "); }
            tmp122.Append("Req: ");
            Req.ToString(tmp122);
          }
          tmp122.Append(')');
          return tmp122.ToString();
        }
      }


      public partial class heartbeat_result : TBase
      {
        private global::Nebula.Raftex.HeartbeatResponse _success;

        public global::Nebula.Raftex.HeartbeatResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public heartbeat_result()
        {
        }

        public heartbeat_result DeepCopy()
        {
          var tmp124 = new heartbeat_result();
          if((Success != null) && __isset.success)
          {
            tmp124.Success = (global::Nebula.Raftex.HeartbeatResponse)this.Success.DeepCopy();
          }
          tmp124.__isset.success = this.__isset.success;
          return tmp124;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Raftex.HeartbeatResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp125 = new TStruct("heartbeat_result");
            await oprot.WriteStructBeginAsync(tmp125, cancellationToken);
            var tmp126 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp126.Name = "Success";
                tmp126.Type = TType.Struct;
                tmp126.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp126, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is heartbeat_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp127 = new StringBuilder("heartbeat_result(");
          int tmp128 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp128++) { tmp127.Append(", "); }
            tmp127.Append("Success: ");
            Success.ToString(tmp127);
          }
          tmp127.Append(')');
          return tmp127.ToString();
        }
      }

    }

  }
}
