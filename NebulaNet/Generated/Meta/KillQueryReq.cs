/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class KillQueryReq : TBase
  {
    private Dictionary<long, THashSet<long>> _kill_queries;

    public Dictionary<long, THashSet<long>> Kill_queries
    {
      get
      {
        return _kill_queries;
      }
      set
      {
        __isset.kill_queries = true;
        this._kill_queries = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool kill_queries;
    }

    public KillQueryReq()
    {
    }

    public KillQueryReq DeepCopy()
    {
      var tmp1105 = new KillQueryReq();
      if((Kill_queries != null) && __isset.kill_queries)
      {
        tmp1105.Kill_queries = this.Kill_queries.DeepCopy();
      }
      tmp1105.__isset.kill_queries = this.__isset.kill_queries;
      return tmp1105;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map1106 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Kill_queries = new Dictionary<long, THashSet<long>>(_map1106.Count);
                  for(int _i1107 = 0; _i1107 < _map1106.Count; ++_i1107)
                  {
                    long _key1108;
                    THashSet<long> _val1109;
                    _key1108 = await iprot.ReadI64Async(cancellationToken);
                    {
                      TSet _set1110 = await iprot.ReadSetBeginAsync(cancellationToken);
                      _val1109 = new THashSet<long>(_set1110.Count);
                      for(int _i1111 = 0; _i1111 < _set1110.Count; ++_i1111)
                      {
                        long _elem1112;
                        _elem1112 = await iprot.ReadI64Async(cancellationToken);
                        _val1109.Add(_elem1112);
                      }
                      await iprot.ReadSetEndAsync(cancellationToken);
                    }
                    Kill_queries[_key1108] = _val1109;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1113 = new TStruct("KillQueryReq");
        await oprot.WriteStructBeginAsync(tmp1113, cancellationToken);
        var tmp1114 = new TField();
        if((Kill_queries != null) && __isset.kill_queries)
        {
          tmp1114.Name = "kill_queries";
          tmp1114.Type = TType.Map;
          tmp1114.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp1114, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.Set, Kill_queries.Count), cancellationToken);
            foreach (long _iter1115 in Kill_queries.Keys)
            {
              await oprot.WriteI64Async(_iter1115, cancellationToken);
              {
                await oprot.WriteSetBeginAsync(new TSet(TType.I64, Kill_queries[_iter1115].Count), cancellationToken);
                foreach (long _iter1116 in Kill_queries[_iter1115])
                {
                  await oprot.WriteI64Async(_iter1116, cancellationToken);
                }
                await oprot.WriteSetEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is KillQueryReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.kill_queries == other.__isset.kill_queries) && ((!__isset.kill_queries) || (TCollections.Equals(Kill_queries, other.Kill_queries))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Kill_queries != null) && __isset.kill_queries)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Kill_queries);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp1117 = new StringBuilder("KillQueryReq(");
      int tmp1118 = 0;
      if((Kill_queries != null) && __isset.kill_queries)
      {
        if(0 < tmp1118++) { tmp1117.Append(", "); }
        tmp1117.Append("Kill_queries: ");
        Kill_queries.ToString(tmp1117);
      }
      tmp1117.Append(')');
      return tmp1117.ToString();
    }
  }

}
