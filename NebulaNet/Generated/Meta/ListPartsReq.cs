/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class ListPartsReq : TBase
  {
    private int _space_id;
    private List<int> _part_ids;

    public int Space_id
    {
      get
      {
        return _space_id;
      }
      set
      {
        __isset.space_id = true;
        this._space_id = value;
      }
    }

    public List<int> Part_ids
    {
      get
      {
        return _part_ids;
      }
      set
      {
        __isset.part_ids = true;
        this._part_ids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space_id;
      public bool part_ids;
    }

    public ListPartsReq()
    {
    }

    public ListPartsReq DeepCopy()
    {
      var tmp336 = new ListPartsReq();
      if(__isset.space_id)
      {
        tmp336.Space_id = this.Space_id;
      }
      tmp336.__isset.space_id = this.__isset.space_id;
      if((Part_ids != null) && __isset.part_ids)
      {
        tmp336.Part_ids = this.Part_ids.DeepCopy();
      }
      tmp336.__isset.part_ids = this.__isset.part_ids;
      return tmp336;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list337 = await iprot.ReadListBeginAsync(cancellationToken);
                  Part_ids = new List<int>(_list337.Count);
                  for(int _i338 = 0; _i338 < _list337.Count; ++_i338)
                  {
                    int _elem339;
                    _elem339 = await iprot.ReadI32Async(cancellationToken);
                    Part_ids.Add(_elem339);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp340 = new TStruct("ListPartsReq");
        await oprot.WriteStructBeginAsync(tmp340, cancellationToken);
        var tmp341 = new TField();
        if(__isset.space_id)
        {
          tmp341.Name = "space_id";
          tmp341.Type = TType.I32;
          tmp341.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
          await oprot.WriteI32Async(Space_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Part_ids != null) && __isset.part_ids)
        {
          tmp341.Name = "part_ids";
          tmp341.Type = TType.List;
          tmp341.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, Part_ids.Count), cancellationToken);
            foreach (int _iter342 in Part_ids)
            {
              await oprot.WriteI32Async(_iter342, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ListPartsReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space_id == other.__isset.space_id) && ((!__isset.space_id) || (System.Object.Equals(Space_id, other.Space_id))))
        && ((__isset.part_ids == other.__isset.part_ids) && ((!__isset.part_ids) || (TCollections.Equals(Part_ids, other.Part_ids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.space_id)
        {
          hashcode = (hashcode * 397) + Space_id.GetHashCode();
        }
        if((Part_ids != null) && __isset.part_ids)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Part_ids);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp343 = new StringBuilder("ListPartsReq(");
      int tmp344 = 0;
      if(__isset.space_id)
      {
        if(0 < tmp344++) { tmp343.Append(", "); }
        tmp343.Append("Space_id: ");
        Space_id.ToString(tmp343);
      }
      if((Part_ids != null) && __isset.part_ids)
      {
        if(0 < tmp344++) { tmp343.Append(", "); }
        tmp343.Append("Part_ids: ");
        Part_ids.ToString(tmp343);
      }
      tmp343.Append(')');
      return tmp343.ToString();
    }
  }

}
