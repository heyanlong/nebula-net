/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{
  public static class metaExtensions
  {
    public static bool Equals(this Dictionary<byte[], List<int>> instance, object that)
    {
      if (!(that is Dictionary<byte[], List<int>> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<byte[], List<int>> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<byte[], List<int>> DeepCopy(this Dictionary<byte[], List<int>> source)
    {
      if (source == null)
        return null;

      var tmp2870 = new Dictionary<byte[], List<int>>(source.Count);
      foreach (var pair in source)
        tmp2870.Add((pair.Key != null) ? pair.Key.ToArray() : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2870;
    }


    public static bool Equals(this Dictionary<byte[], byte[]> instance, object that)
    {
      if (!(that is Dictionary<byte[], byte[]> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<byte[], byte[]> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<byte[], byte[]> DeepCopy(this Dictionary<byte[], byte[]> source)
    {
      if (source == null)
        return null;

      var tmp2871 = new Dictionary<byte[], byte[]>(source.Count);
      foreach (var pair in source)
        tmp2871.Add((pair.Key != null) ? pair.Key.ToArray() : null, (pair.Value != null) ? pair.Value.ToArray() : null);
      return tmp2871;
    }


    public static bool Equals(this Dictionary<byte[], global::Nebula.Common.@Value> instance, object that)
    {
      if (!(that is Dictionary<byte[], global::Nebula.Common.@Value> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<byte[], global::Nebula.Common.@Value> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<byte[], global::Nebula.Common.@Value> DeepCopy(this Dictionary<byte[], global::Nebula.Common.@Value> source)
    {
      if (source == null)
        return null;

      var tmp2872 = new Dictionary<byte[], global::Nebula.Common.@Value>(source.Count);
      foreach (var pair in source)
        tmp2872.Add((pair.Key != null) ? pair.Key.ToArray() : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2872;
    }


    public static bool Equals(this Dictionary<byte[], global::Nebula.Meta.FTIndex> instance, object that)
    {
      if (!(that is Dictionary<byte[], global::Nebula.Meta.FTIndex> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<byte[], global::Nebula.Meta.FTIndex> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<byte[], global::Nebula.Meta.FTIndex> DeepCopy(this Dictionary<byte[], global::Nebula.Meta.FTIndex> source)
    {
      if (source == null)
        return null;

      var tmp2873 = new Dictionary<byte[], global::Nebula.Meta.FTIndex>(source.Count);
      foreach (var pair in source)
        tmp2873.Add((pair.Key != null) ? pair.Key.ToArray() : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2873;
    }


    public static bool Equals(this Dictionary<byte[], long> instance, object that)
    {
      if (!(that is Dictionary<byte[], long> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<byte[], long> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<byte[], long> DeepCopy(this Dictionary<byte[], long> source)
    {
      if (source == null)
        return null;

      var tmp2874 = new Dictionary<byte[], long>(source.Count);
      foreach (var pair in source)
        tmp2874.Add((pair.Key != null) ? pair.Key.ToArray() : null, pair.Value);
      return tmp2874;
    }


    public static bool Equals(this Dictionary<int, List<global::Nebula.Common.HostAddr>> instance, object that)
    {
      if (!(that is Dictionary<int, List<global::Nebula.Common.HostAddr>> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<int, List<global::Nebula.Common.HostAddr>> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<int, List<global::Nebula.Common.HostAddr>> DeepCopy(this Dictionary<int, List<global::Nebula.Common.HostAddr>> source)
    {
      if (source == null)
        return null;

      var tmp2875 = new Dictionary<int, List<global::Nebula.Common.HostAddr>>(source.Count);
      foreach (var pair in source)
        tmp2875.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2875;
    }


    public static bool Equals(this Dictionary<int, List<global::Nebula.Meta.Correlativity>> instance, object that)
    {
      if (!(that is Dictionary<int, List<global::Nebula.Meta.Correlativity>> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<int, List<global::Nebula.Meta.Correlativity>> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<int, List<global::Nebula.Meta.Correlativity>> DeepCopy(this Dictionary<int, List<global::Nebula.Meta.Correlativity>> source)
    {
      if (source == null)
        return null;

      var tmp2876 = new Dictionary<int, List<global::Nebula.Meta.Correlativity>>(source.Count);
      foreach (var pair in source)
        tmp2876.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2876;
    }


    public static bool Equals(this Dictionary<int, List<global::Nebula.Meta.LeaderInfo>> instance, object that)
    {
      if (!(that is Dictionary<int, List<global::Nebula.Meta.LeaderInfo>> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<int, List<global::Nebula.Meta.LeaderInfo>> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<int, List<global::Nebula.Meta.LeaderInfo>> DeepCopy(this Dictionary<int, List<global::Nebula.Meta.LeaderInfo>> source)
    {
      if (source == null)
        return null;

      var tmp2877 = new Dictionary<int, List<global::Nebula.Meta.LeaderInfo>>(source.Count);
      foreach (var pair in source)
        tmp2877.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2877;
    }


    public static bool Equals(this Dictionary<int, global::Nebula.Common.LogInfo> instance, object that)
    {
      if (!(that is Dictionary<int, global::Nebula.Common.LogInfo> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<int, global::Nebula.Common.LogInfo> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<int, global::Nebula.Common.LogInfo> DeepCopy(this Dictionary<int, global::Nebula.Common.LogInfo> source)
    {
      if (source == null)
        return null;

      var tmp2878 = new Dictionary<int, global::Nebula.Common.LogInfo>(source.Count);
      foreach (var pair in source)
        tmp2878.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2878;
    }


    public static bool Equals(this Dictionary<int, global::Nebula.Meta.SpaceBackupInfo> instance, object that)
    {
      if (!(that is Dictionary<int, global::Nebula.Meta.SpaceBackupInfo> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<int, global::Nebula.Meta.SpaceBackupInfo> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<int, global::Nebula.Meta.SpaceBackupInfo> DeepCopy(this Dictionary<int, global::Nebula.Meta.SpaceBackupInfo> source)
    {
      if (source == null)
        return null;

      var tmp2879 = new Dictionary<int, global::Nebula.Meta.SpaceBackupInfo>(source.Count);
      foreach (var pair in source)
        tmp2879.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2879;
    }


    public static bool Equals(this Dictionary<int, long> instance, object that)
    {
      if (!(that is Dictionary<int, long> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<int, long> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<int, long> DeepCopy(this Dictionary<int, long> source)
    {
      if (source == null)
        return null;

      var tmp2880 = new Dictionary<int, long>(source.Count);
      foreach (var pair in source)
        tmp2880.Add(pair.Key, pair.Value);
      return tmp2880;
    }


    public static bool Equals(this Dictionary<long, Dictionary<long, global::Nebula.Meta.QueryDesc>> instance, object that)
    {
      if (!(that is Dictionary<long, Dictionary<long, global::Nebula.Meta.QueryDesc>> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<long, Dictionary<long, global::Nebula.Meta.QueryDesc>> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<long, Dictionary<long, global::Nebula.Meta.QueryDesc>> DeepCopy(this Dictionary<long, Dictionary<long, global::Nebula.Meta.QueryDesc>> source)
    {
      if (source == null)
        return null;

      var tmp2881 = new Dictionary<long, Dictionary<long, global::Nebula.Meta.QueryDesc>>(source.Count);
      foreach (var pair in source)
        tmp2881.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2881;
    }


    public static bool Equals(this Dictionary<long, THashSet<long>> instance, object that)
    {
      if (!(that is Dictionary<long, THashSet<long>> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<long, THashSet<long>> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<long, THashSet<long>> DeepCopy(this Dictionary<long, THashSet<long>> source)
    {
      if (source == null)
        return null;

      var tmp2882 = new Dictionary<long, THashSet<long>>(source.Count);
      foreach (var pair in source)
        tmp2882.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2882;
    }


    public static bool Equals(this Dictionary<long, global::Nebula.Meta.QueryDesc> instance, object that)
    {
      if (!(that is Dictionary<long, global::Nebula.Meta.QueryDesc> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<long, global::Nebula.Meta.QueryDesc> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<long, global::Nebula.Meta.QueryDesc> DeepCopy(this Dictionary<long, global::Nebula.Meta.QueryDesc> source)
    {
      if (source == null)
        return null;

      var tmp2883 = new Dictionary<long, global::Nebula.Meta.QueryDesc>(source.Count);
      foreach (var pair in source)
        tmp2883.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp2883;
    }


    public static bool Equals(this List<List<global::Nebula.Common.Coordinate>> instance, object that)
    {
      if (!(that is List<List<global::Nebula.Common.Coordinate>> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<List<global::Nebula.Common.Coordinate>> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<List<global::Nebula.Common.Coordinate>> DeepCopy(this List<List<global::Nebula.Common.Coordinate>> source)
    {
      if (source == null)
        return null;

      var tmp2884 = new List<List<global::Nebula.Common.Coordinate>>(source.Count);
      foreach (var elem in source)
        tmp2884.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2884;
    }


    public static bool Equals(this List<byte[]> instance, object that)
    {
      if (!(that is List<byte[]> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<byte[]> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<byte[]> DeepCopy(this List<byte[]> source)
    {
      if (source == null)
        return null;

      var tmp2885 = new List<byte[]>(source.Count);
      foreach (var elem in source)
        tmp2885.Add((elem != null) ? elem.ToArray() : null);
      return tmp2885;
    }


    public static bool Equals(this List<global::Nebula.Common.@Value> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.@Value> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.@Value> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.@Value> DeepCopy(this List<global::Nebula.Common.@Value> source)
    {
      if (source == null)
        return null;

      var tmp2886 = new List<global::Nebula.Common.@Value>(source.Count);
      foreach (var elem in source)
        tmp2886.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2886;
    }


    public static bool Equals(this List<global::Nebula.Common.CheckpointInfo> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.CheckpointInfo> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.CheckpointInfo> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.CheckpointInfo> DeepCopy(this List<global::Nebula.Common.CheckpointInfo> source)
    {
      if (source == null)
        return null;

      var tmp2887 = new List<global::Nebula.Common.CheckpointInfo>(source.Count);
      foreach (var elem in source)
        tmp2887.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2887;
    }


    public static bool Equals(this List<global::Nebula.Common.Coordinate> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.Coordinate> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.Coordinate> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.Coordinate> DeepCopy(this List<global::Nebula.Common.Coordinate> source)
    {
      if (source == null)
        return null;

      var tmp2888 = new List<global::Nebula.Common.Coordinate>(source.Count);
      foreach (var elem in source)
        tmp2888.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2888;
    }


    public static bool Equals(this List<global::Nebula.Common.HostAddr> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.HostAddr> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.HostAddr> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.HostAddr> DeepCopy(this List<global::Nebula.Common.HostAddr> source)
    {
      if (source == null)
        return null;

      var tmp2889 = new List<global::Nebula.Common.HostAddr>(source.Count);
      foreach (var elem in source)
        tmp2889.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2889;
    }


    public static bool Equals(this List<global::Nebula.Common.KeyValue> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.KeyValue> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.KeyValue> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.KeyValue> DeepCopy(this List<global::Nebula.Common.KeyValue> source)
    {
      if (source == null)
        return null;

      var tmp2890 = new List<global::Nebula.Common.KeyValue>(source.Count);
      foreach (var elem in source)
        tmp2890.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2890;
    }


    public static bool Equals(this List<global::Nebula.Common.NodeInfo> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.NodeInfo> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.NodeInfo> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.NodeInfo> DeepCopy(this List<global::Nebula.Common.NodeInfo> source)
    {
      if (source == null)
        return null;

      var tmp2891 = new List<global::Nebula.Common.NodeInfo>(source.Count);
      foreach (var elem in source)
        tmp2891.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2891;
    }


    public static bool Equals(this List<global::Nebula.Common.Row> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.Row> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.Row> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.Row> DeepCopy(this List<global::Nebula.Common.Row> source)
    {
      if (source == null)
        return null;

      var tmp2892 = new List<global::Nebula.Common.Row>(source.Count);
      foreach (var elem in source)
        tmp2892.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2892;
    }


    public static bool Equals(this List<global::Nebula.Common.Step> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.Step> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.Step> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.Step> DeepCopy(this List<global::Nebula.Common.Step> source)
    {
      if (source == null)
        return null;

      var tmp2893 = new List<global::Nebula.Common.Step>(source.Count);
      foreach (var elem in source)
        tmp2893.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2893;
    }


    public static bool Equals(this List<global::Nebula.Common.Tag> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.Tag> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.Tag> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.Tag> DeepCopy(this List<global::Nebula.Common.Tag> source)
    {
      if (source == null)
        return null;

      var tmp2894 = new List<global::Nebula.Common.Tag>(source.Count);
      foreach (var elem in source)
        tmp2894.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2894;
    }


    public static bool Equals(this List<global::Nebula.Meta.@Group> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.@Group> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.@Group> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.@Group> DeepCopy(this List<global::Nebula.Meta.@Group> source)
    {
      if (source == null)
        return null;

      var tmp2895 = new List<global::Nebula.Meta.@Group>(source.Count);
      foreach (var elem in source)
        tmp2895.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2895;
    }


    public static bool Equals(this List<global::Nebula.Meta.AlterSchemaItem> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.AlterSchemaItem> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.AlterSchemaItem> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.AlterSchemaItem> DeepCopy(this List<global::Nebula.Meta.AlterSchemaItem> source)
    {
      if (source == null)
        return null;

      var tmp2896 = new List<global::Nebula.Meta.AlterSchemaItem>(source.Count);
      foreach (var elem in source)
        tmp2896.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2896;
    }


    public static bool Equals(this List<global::Nebula.Meta.BackupInfo> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.BackupInfo> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.BackupInfo> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.BackupInfo> DeepCopy(this List<global::Nebula.Meta.BackupInfo> source)
    {
      if (source == null)
        return null;

      var tmp2897 = new List<global::Nebula.Meta.BackupInfo>(source.Count);
      foreach (var elem in source)
        tmp2897.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2897;
    }


    public static bool Equals(this List<global::Nebula.Meta.BalanceTask> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.BalanceTask> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.BalanceTask> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.BalanceTask> DeepCopy(this List<global::Nebula.Meta.BalanceTask> source)
    {
      if (source == null)
        return null;

      var tmp2898 = new List<global::Nebula.Meta.BalanceTask>(source.Count);
      foreach (var elem in source)
        tmp2898.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2898;
    }


    public static bool Equals(this List<global::Nebula.Meta.ColumnDef> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.ColumnDef> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.ColumnDef> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.ColumnDef> DeepCopy(this List<global::Nebula.Meta.ColumnDef> source)
    {
      if (source == null)
        return null;

      var tmp2899 = new List<global::Nebula.Meta.ColumnDef>(source.Count);
      foreach (var elem in source)
        tmp2899.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2899;
    }


    public static bool Equals(this List<global::Nebula.Meta.ConfigItem> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.ConfigItem> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.ConfigItem> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.ConfigItem> DeepCopy(this List<global::Nebula.Meta.ConfigItem> source)
    {
      if (source == null)
        return null;

      var tmp2900 = new List<global::Nebula.Meta.ConfigItem>(source.Count);
      foreach (var elem in source)
        tmp2900.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2900;
    }


    public static bool Equals(this List<global::Nebula.Meta.Correlativity> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.Correlativity> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.Correlativity> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.Correlativity> DeepCopy(this List<global::Nebula.Meta.Correlativity> source)
    {
      if (source == null)
        return null;

      var tmp2901 = new List<global::Nebula.Meta.Correlativity>(source.Count);
      foreach (var elem in source)
        tmp2901.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2901;
    }


    public static bool Equals(this List<global::Nebula.Meta.EdgeItem> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.EdgeItem> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.EdgeItem> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.EdgeItem> DeepCopy(this List<global::Nebula.Meta.EdgeItem> source)
    {
      if (source == null)
        return null;

      var tmp2902 = new List<global::Nebula.Meta.EdgeItem>(source.Count);
      foreach (var elem in source)
        tmp2902.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2902;
    }


    public static bool Equals(this List<global::Nebula.Meta.FTClient> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.FTClient> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.FTClient> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.FTClient> DeepCopy(this List<global::Nebula.Meta.FTClient> source)
    {
      if (source == null)
        return null;

      var tmp2903 = new List<global::Nebula.Meta.FTClient>(source.Count);
      foreach (var elem in source)
        tmp2903.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2903;
    }


    public static bool Equals(this List<global::Nebula.Meta.HostItem> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.HostItem> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.HostItem> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.HostItem> DeepCopy(this List<global::Nebula.Meta.HostItem> source)
    {
      if (source == null)
        return null;

      var tmp2904 = new List<global::Nebula.Meta.HostItem>(source.Count);
      foreach (var elem in source)
        tmp2904.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2904;
    }


    public static bool Equals(this List<global::Nebula.Meta.HostPair> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.HostPair> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.HostPair> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.HostPair> DeepCopy(this List<global::Nebula.Meta.HostPair> source)
    {
      if (source == null)
        return null;

      var tmp2905 = new List<global::Nebula.Meta.HostPair>(source.Count);
      foreach (var elem in source)
        tmp2905.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2905;
    }


    public static bool Equals(this List<global::Nebula.Meta.IdName> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.IdName> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.IdName> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.IdName> DeepCopy(this List<global::Nebula.Meta.IdName> source)
    {
      if (source == null)
        return null;

      var tmp2906 = new List<global::Nebula.Meta.IdName>(source.Count);
      foreach (var elem in source)
        tmp2906.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2906;
    }


    public static bool Equals(this List<global::Nebula.Meta.IndexFieldDef> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.IndexFieldDef> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.IndexFieldDef> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.IndexFieldDef> DeepCopy(this List<global::Nebula.Meta.IndexFieldDef> source)
    {
      if (source == null)
        return null;

      var tmp2907 = new List<global::Nebula.Meta.IndexFieldDef>(source.Count);
      foreach (var elem in source)
        tmp2907.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2907;
    }


    public static bool Equals(this List<global::Nebula.Meta.IndexItem> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.IndexItem> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.IndexItem> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.IndexItem> DeepCopy(this List<global::Nebula.Meta.IndexItem> source)
    {
      if (source == null)
        return null;

      var tmp2908 = new List<global::Nebula.Meta.IndexItem>(source.Count);
      foreach (var elem in source)
        tmp2908.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2908;
    }


    public static bool Equals(this List<global::Nebula.Meta.IndexStatus> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.IndexStatus> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.IndexStatus> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.IndexStatus> DeepCopy(this List<global::Nebula.Meta.IndexStatus> source)
    {
      if (source == null)
        return null;

      var tmp2909 = new List<global::Nebula.Meta.IndexStatus>(source.Count);
      foreach (var elem in source)
        tmp2909.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2909;
    }


    public static bool Equals(this List<global::Nebula.Meta.JobDesc> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.JobDesc> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.JobDesc> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.JobDesc> DeepCopy(this List<global::Nebula.Meta.JobDesc> source)
    {
      if (source == null)
        return null;

      var tmp2910 = new List<global::Nebula.Meta.JobDesc>(source.Count);
      foreach (var elem in source)
        tmp2910.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2910;
    }


    public static bool Equals(this List<global::Nebula.Meta.LeaderInfo> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.LeaderInfo> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.LeaderInfo> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.LeaderInfo> DeepCopy(this List<global::Nebula.Meta.LeaderInfo> source)
    {
      if (source == null)
        return null;

      var tmp2911 = new List<global::Nebula.Meta.LeaderInfo>(source.Count);
      foreach (var elem in source)
        tmp2911.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2911;
    }


    public static bool Equals(this List<global::Nebula.Meta.ListenerInfo> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.ListenerInfo> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.ListenerInfo> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.ListenerInfo> DeepCopy(this List<global::Nebula.Meta.ListenerInfo> source)
    {
      if (source == null)
        return null;

      var tmp2912 = new List<global::Nebula.Meta.ListenerInfo>(source.Count);
      foreach (var elem in source)
        tmp2912.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2912;
    }


    public static bool Equals(this List<global::Nebula.Meta.PartItem> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.PartItem> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.PartItem> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.PartItem> DeepCopy(this List<global::Nebula.Meta.PartItem> source)
    {
      if (source == null)
        return null;

      var tmp2913 = new List<global::Nebula.Meta.PartItem>(source.Count);
      foreach (var elem in source)
        tmp2913.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2913;
    }


    public static bool Equals(this List<global::Nebula.Meta.RoleItem> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.RoleItem> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.RoleItem> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.RoleItem> DeepCopy(this List<global::Nebula.Meta.RoleItem> source)
    {
      if (source == null)
        return null;

      var tmp2914 = new List<global::Nebula.Meta.RoleItem>(source.Count);
      foreach (var elem in source)
        tmp2914.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2914;
    }


    public static bool Equals(this List<global::Nebula.Meta.Session> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.Session> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.Session> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.Session> DeepCopy(this List<global::Nebula.Meta.Session> source)
    {
      if (source == null)
        return null;

      var tmp2915 = new List<global::Nebula.Meta.Session>(source.Count);
      foreach (var elem in source)
        tmp2915.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2915;
    }


    public static bool Equals(this List<global::Nebula.Meta.Snapshot> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.Snapshot> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.Snapshot> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.Snapshot> DeepCopy(this List<global::Nebula.Meta.Snapshot> source)
    {
      if (source == null)
        return null;

      var tmp2916 = new List<global::Nebula.Meta.Snapshot>(source.Count);
      foreach (var elem in source)
        tmp2916.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2916;
    }


    public static bool Equals(this List<global::Nebula.Meta.TagItem> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.TagItem> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.TagItem> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.TagItem> DeepCopy(this List<global::Nebula.Meta.TagItem> source)
    {
      if (source == null)
        return null;

      var tmp2917 = new List<global::Nebula.Meta.TagItem>(source.Count);
      foreach (var elem in source)
        tmp2917.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2917;
    }


    public static bool Equals(this List<global::Nebula.Meta.TaskDesc> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.TaskDesc> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.TaskDesc> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.TaskDesc> DeepCopy(this List<global::Nebula.Meta.TaskDesc> source)
    {
      if (source == null)
        return null;

      var tmp2918 = new List<global::Nebula.Meta.TaskDesc>(source.Count);
      foreach (var elem in source)
        tmp2918.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2918;
    }


    public static bool Equals(this List<global::Nebula.Meta.Zone> instance, object that)
    {
      if (!(that is List<global::Nebula.Meta.Zone> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Meta.Zone> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Meta.Zone> DeepCopy(this List<global::Nebula.Meta.Zone> source)
    {
      if (source == null)
        return null;

      var tmp2919 = new List<global::Nebula.Meta.Zone>(source.Count);
      foreach (var elem in source)
        tmp2919.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2919;
    }


    public static bool Equals(this List<int> instance, object that)
    {
      if (!(that is List<int> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<int> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<int> DeepCopy(this List<int> source)
    {
      if (source == null)
        return null;

      var tmp2920 = new List<int>(source.Count);
      foreach (var elem in source)
        tmp2920.Add(elem);
      return tmp2920;
    }


    public static bool Equals(this List<string> instance, object that)
    {
      if (!(that is List<string> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<string> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<string> DeepCopy(this List<string> source)
    {
      if (source == null)
        return null;

      var tmp2921 = new List<string>(source.Count);
      foreach (var elem in source)
        tmp2921.Add((elem != null) ? elem : null);
      return tmp2921;
    }


    public static bool Equals(this THashSet<global::Nebula.Common.@Value> instance, object that)
    {
      if (!(that is THashSet<global::Nebula.Common.@Value> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this THashSet<global::Nebula.Common.@Value> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static THashSet<global::Nebula.Common.@Value> DeepCopy(this THashSet<global::Nebula.Common.@Value> source)
    {
      if (source == null)
        return null;

      var tmp2922 = new THashSet<global::Nebula.Common.@Value>(source.Count);
      foreach (var elem in source)
        tmp2922.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp2922;
    }


    public static bool Equals(this THashSet<long> instance, object that)
    {
      if (!(that is THashSet<long> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this THashSet<long> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static THashSet<long> DeepCopy(this THashSet<long> source)
    {
      if (source == null)
        return null;

      var tmp2923 = new THashSet<long>(source.Count);
      foreach (var elem in source)
        tmp2923.Add(elem);
      return tmp2923;
    }


  }
}
