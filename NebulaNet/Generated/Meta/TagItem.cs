/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class TagItem : TBase
  {
    private int _tag_id;
    private byte[] _tag_name;
    private long _version;
    private global::Nebula.Meta.Schema _schema;

    public int Tag_id
    {
      get
      {
        return _tag_id;
      }
      set
      {
        __isset.tag_id = true;
        this._tag_id = value;
      }
    }

    public byte[] Tag_name
    {
      get
      {
        return _tag_name;
      }
      set
      {
        __isset.tag_name = true;
        this._tag_name = value;
      }
    }

    public long Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public global::Nebula.Meta.Schema Schema
    {
      get
      {
        return _schema;
      }
      set
      {
        __isset.schema = true;
        this._schema = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tag_id;
      public bool tag_name;
      public bool version;
      public bool schema;
    }

    public TagItem()
    {
    }

    public TagItem DeepCopy()
    {
      var tmp44 = new TagItem();
      if(__isset.tag_id)
      {
        tmp44.Tag_id = this.Tag_id;
      }
      tmp44.__isset.tag_id = this.__isset.tag_id;
      if((Tag_name != null) && __isset.tag_name)
      {
        tmp44.Tag_name = this.Tag_name.ToArray();
      }
      tmp44.__isset.tag_name = this.__isset.tag_name;
      if(__isset.version)
      {
        tmp44.Version = this.Version;
      }
      tmp44.__isset.version = this.__isset.version;
      if((Schema != null) && __isset.schema)
      {
        tmp44.Schema = (global::Nebula.Meta.Schema)this.Schema.DeepCopy();
      }
      tmp44.__isset.schema = this.__isset.schema;
      return tmp44;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Tag_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Tag_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Version = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Schema = new global::Nebula.Meta.Schema();
                await Schema.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp45 = new TStruct("TagItem");
        await oprot.WriteStructBeginAsync(tmp45, cancellationToken);
        var tmp46 = new TField();
        if(__isset.tag_id)
        {
          tmp46.Name = "tag_id";
          tmp46.Type = TType.I32;
          tmp46.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI32Async(Tag_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Tag_name != null) && __isset.tag_name)
        {
          tmp46.Name = "tag_name";
          tmp46.Type = TType.String;
          tmp46.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteBinaryAsync(Tag_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.version)
        {
          tmp46.Name = "version";
          tmp46.Type = TType.I64;
          tmp46.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI64Async(Version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Schema != null) && __isset.schema)
        {
          tmp46.Name = "schema";
          tmp46.Type = TType.Struct;
          tmp46.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await Schema.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TagItem other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.tag_id == other.__isset.tag_id) && ((!__isset.tag_id) || (System.Object.Equals(Tag_id, other.Tag_id))))
        && ((__isset.tag_name == other.__isset.tag_name) && ((!__isset.tag_name) || (TCollections.Equals(Tag_name, other.Tag_name))))
        && ((__isset.version == other.__isset.version) && ((!__isset.version) || (System.Object.Equals(Version, other.Version))))
        && ((__isset.schema == other.__isset.schema) && ((!__isset.schema) || (System.Object.Equals(Schema, other.Schema))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.tag_id)
        {
          hashcode = (hashcode * 397) + Tag_id.GetHashCode();
        }
        if((Tag_name != null) && __isset.tag_name)
        {
          hashcode = (hashcode * 397) + Tag_name.GetHashCode();
        }
        if(__isset.version)
        {
          hashcode = (hashcode * 397) + Version.GetHashCode();
        }
        if((Schema != null) && __isset.schema)
        {
          hashcode = (hashcode * 397) + Schema.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp47 = new StringBuilder("TagItem(");
      int tmp48 = 0;
      if(__isset.tag_id)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Tag_id: ");
        Tag_id.ToString(tmp47);
      }
      if((Tag_name != null) && __isset.tag_name)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Tag_name: ");
        Tag_name.ToString(tmp47);
      }
      if(__isset.version)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Version: ");
        Version.ToString(tmp47);
      }
      if((Schema != null) && __isset.schema)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Schema: ");
        Schema.ToString(tmp47);
      }
      tmp47.Append(')');
      return tmp47.ToString();
    }
  }

}
