/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{
  public partial class MetaService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createSpace(global::Nebula.Meta.CreateSpaceReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropSpace(global::Nebula.Meta.DropSpaceReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetSpaceResp> getSpace(global::Nebula.Meta.GetSpaceReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListSpacesResp> listSpaces(global::Nebula.Meta.ListSpacesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createSpaceAs(global::Nebula.Meta.CreateSpaceAsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createTag(global::Nebula.Meta.CreateTagReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> alterTag(global::Nebula.Meta.AlterTagReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropTag(global::Nebula.Meta.DropTagReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetTagResp> getTag(global::Nebula.Meta.GetTagReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListTagsResp> listTags(global::Nebula.Meta.ListTagsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createEdge(global::Nebula.Meta.CreateEdgeReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> alterEdge(global::Nebula.Meta.AlterEdgeReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropEdge(global::Nebula.Meta.DropEdgeReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetEdgeResp> getEdge(global::Nebula.Meta.GetEdgeReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListEdgesResp> listEdges(global::Nebula.Meta.ListEdgesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListHostsResp> listHosts(global::Nebula.Meta.ListHostsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetPartsAllocResp> getPartsAlloc(global::Nebula.Meta.GetPartsAllocReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListPartsResp> listParts(global::Nebula.Meta.ListPartsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> multiPut(global::Nebula.Meta.MultiPutReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetResp> @get(global::Nebula.Meta.GetReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.MultiGetResp> multiGet(global::Nebula.Meta.MultiGetReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> @remove(global::Nebula.Meta.RemoveReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> removeRange(global::Nebula.Meta.RemoveRangeReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ScanResp> scan(global::Nebula.Meta.ScanReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createTagIndex(global::Nebula.Meta.CreateTagIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropTagIndex(global::Nebula.Meta.DropTagIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetTagIndexResp> getTagIndex(global::Nebula.Meta.GetTagIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListTagIndexesResp> listTagIndexes(global::Nebula.Meta.ListTagIndexesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> rebuildTagIndex(global::Nebula.Meta.RebuildIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListIndexStatusResp> listTagIndexStatus(global::Nebula.Meta.ListIndexStatusReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createEdgeIndex(global::Nebula.Meta.CreateEdgeIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropEdgeIndex(global::Nebula.Meta.DropEdgeIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetEdgeIndexResp> getEdgeIndex(global::Nebula.Meta.GetEdgeIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListEdgeIndexesResp> listEdgeIndexes(global::Nebula.Meta.ListEdgeIndexesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> rebuildEdgeIndex(global::Nebula.Meta.RebuildIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListIndexStatusResp> listEdgeIndexStatus(global::Nebula.Meta.ListIndexStatusReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createUser(global::Nebula.Meta.CreateUserReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropUser(global::Nebula.Meta.DropUserReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> alterUser(global::Nebula.Meta.AlterUserReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> grantRole(global::Nebula.Meta.GrantRoleReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> revokeRole(global::Nebula.Meta.RevokeRoleReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListUsersResp> listUsers(global::Nebula.Meta.ListUsersReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListRolesResp> listRoles(global::Nebula.Meta.ListRolesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListRolesResp> getUserRoles(global::Nebula.Meta.GetUserRolesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> changePassword(global::Nebula.Meta.ChangePasswordReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.HBResp> heartBeat(global::Nebula.Meta.HBReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.BalanceResp> balance(global::Nebula.Meta.BalanceReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> leaderBalance(global::Nebula.Meta.LeaderBalanceReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> regConfig(global::Nebula.Meta.RegConfigReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetConfigResp> getConfig(global::Nebula.Meta.GetConfigReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> setConfig(global::Nebula.Meta.SetConfigReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListConfigsResp> listConfigs(global::Nebula.Meta.ListConfigsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createSnapshot(global::Nebula.Meta.CreateSnapshotReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropSnapshot(global::Nebula.Meta.DropSnapshotReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListSnapshotsResp> listSnapshots(global::Nebula.Meta.ListSnapshotsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.AdminJobResp> runAdminJob(global::Nebula.Meta.AdminJobReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addZone(global::Nebula.Meta.AddZoneReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropZone(global::Nebula.Meta.DropZoneReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addHostIntoZone(global::Nebula.Meta.AddHostIntoZoneReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropHostFromZone(global::Nebula.Meta.DropHostFromZoneReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetZoneResp> getZone(global::Nebula.Meta.GetZoneReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListZonesResp> listZones(global::Nebula.Meta.ListZonesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addGroup(global::Nebula.Meta.AddGroupReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropGroup(global::Nebula.Meta.DropGroupReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addZoneIntoGroup(global::Nebula.Meta.AddZoneIntoGroupReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropZoneFromGroup(global::Nebula.Meta.DropZoneFromGroupReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetGroupResp> getGroup(global::Nebula.Meta.GetGroupReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListGroupsResp> listGroups(global::Nebula.Meta.ListGroupsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.CreateBackupResp> createBackup(global::Nebula.Meta.CreateBackupReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> restoreMeta(global::Nebula.Meta.RestoreMetaReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addListener(global::Nebula.Meta.AddListenerReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> removeListener(global::Nebula.Meta.RemoveListenerReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListListenerResp> listListener(global::Nebula.Meta.ListListenerReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetStatsResp> getStats(global::Nebula.Meta.GetStatsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> signInFTService(global::Nebula.Meta.SignInFTServiceReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> signOutFTService(global::Nebula.Meta.SignOutFTServiceReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListFTClientsResp> listFTClients(global::Nebula.Meta.ListFTClientsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createFTIndex(global::Nebula.Meta.CreateFTIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropFTIndex(global::Nebula.Meta.DropFTIndexReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListFTIndexesResp> listFTIndexes(global::Nebula.Meta.ListFTIndexesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.CreateSessionResp> createSession(global::Nebula.Meta.CreateSessionReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.UpdateSessionsResp> updateSessions(global::Nebula.Meta.UpdateSessionsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListSessionsResp> listSessions(global::Nebula.Meta.ListSessionsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetSessionResp> getSession(global::Nebula.Meta.GetSessionReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> removeSession(global::Nebula.Meta.RemoveSessionReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> killQuery(global::Nebula.Meta.KillQueryReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> reportTaskFinish(global::Nebula.Meta.ReportTaskReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.ListClusterInfoResp> listCluster(global::Nebula.Meta.ListClusterInfoReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.GetMetaDirInfoResp> getMetaDirInfo(global::Nebula.Meta.GetMetaDirInfoReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Meta.VerifyClientVersionResp> verifyClientVersion(global::Nebula.Meta.VerifyClientVersionReq req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createSpace(global::Nebula.Meta.CreateSpaceReq req, CancellationToken cancellationToken = default)
      {
        await send_createSpace(req, cancellationToken);
        return await recv_createSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createSpace(global::Nebula.Meta.CreateSpaceReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1160 = new InternalStructs.createSpace_args() {
          Req = req,
        };
        
        await tmp1160.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_createSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp1161 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1161.Type == TMessageType.Exception)
        {
          var tmp1162 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1162;
        }

        var tmp1163 = new InternalStructs.createSpace_result();
        await tmp1163.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1163.__isset.success)
        {
          return tmp1163.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropSpace(global::Nebula.Meta.DropSpaceReq req, CancellationToken cancellationToken = default)
      {
        await send_dropSpace(req, cancellationToken);
        return await recv_dropSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropSpace(global::Nebula.Meta.DropSpaceReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1164 = new InternalStructs.dropSpace_args() {
          Req = req,
        };
        
        await tmp1164.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp1165 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1165.Type == TMessageType.Exception)
        {
          var tmp1166 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1166;
        }

        var tmp1167 = new InternalStructs.dropSpace_result();
        await tmp1167.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1167.__isset.success)
        {
          return tmp1167.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetSpaceResp> getSpace(global::Nebula.Meta.GetSpaceReq req, CancellationToken cancellationToken = default)
      {
        await send_getSpace(req, cancellationToken);
        return await recv_getSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getSpace(global::Nebula.Meta.GetSpaceReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1168 = new InternalStructs.getSpace_args() {
          Req = req,
        };
        
        await tmp1168.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetSpaceResp> recv_getSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp1169 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1169.Type == TMessageType.Exception)
        {
          var tmp1170 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1170;
        }

        var tmp1171 = new InternalStructs.getSpace_result();
        await tmp1171.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1171.__isset.success)
        {
          return tmp1171.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListSpacesResp> listSpaces(global::Nebula.Meta.ListSpacesReq req, CancellationToken cancellationToken = default)
      {
        await send_listSpaces(req, cancellationToken);
        return await recv_listSpaces(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listSpaces(global::Nebula.Meta.ListSpacesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listSpaces", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1172 = new InternalStructs.listSpaces_args() {
          Req = req,
        };
        
        await tmp1172.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListSpacesResp> recv_listSpaces(CancellationToken cancellationToken = default)
      {
        
        var tmp1173 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1173.Type == TMessageType.Exception)
        {
          var tmp1174 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1174;
        }

        var tmp1175 = new InternalStructs.listSpaces_result();
        await tmp1175.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1175.__isset.success)
        {
          return tmp1175.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listSpaces failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createSpaceAs(global::Nebula.Meta.CreateSpaceAsReq req, CancellationToken cancellationToken = default)
      {
        await send_createSpaceAs(req, cancellationToken);
        return await recv_createSpaceAs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createSpaceAs(global::Nebula.Meta.CreateSpaceAsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createSpaceAs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1176 = new InternalStructs.createSpaceAs_args() {
          Req = req,
        };
        
        await tmp1176.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_createSpaceAs(CancellationToken cancellationToken = default)
      {
        
        var tmp1177 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1177.Type == TMessageType.Exception)
        {
          var tmp1178 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1178;
        }

        var tmp1179 = new InternalStructs.createSpaceAs_result();
        await tmp1179.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1179.__isset.success)
        {
          return tmp1179.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSpaceAs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createTag(global::Nebula.Meta.CreateTagReq req, CancellationToken cancellationToken = default)
      {
        await send_createTag(req, cancellationToken);
        return await recv_createTag(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createTag(global::Nebula.Meta.CreateTagReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createTag", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1180 = new InternalStructs.createTag_args() {
          Req = req,
        };
        
        await tmp1180.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_createTag(CancellationToken cancellationToken = default)
      {
        
        var tmp1181 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1181.Type == TMessageType.Exception)
        {
          var tmp1182 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1182;
        }

        var tmp1183 = new InternalStructs.createTag_result();
        await tmp1183.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1183.__isset.success)
        {
          return tmp1183.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTag failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> alterTag(global::Nebula.Meta.AlterTagReq req, CancellationToken cancellationToken = default)
      {
        await send_alterTag(req, cancellationToken);
        return await recv_alterTag(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_alterTag(global::Nebula.Meta.AlterTagReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("alterTag", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1184 = new InternalStructs.alterTag_args() {
          Req = req,
        };
        
        await tmp1184.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_alterTag(CancellationToken cancellationToken = default)
      {
        
        var tmp1185 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1185.Type == TMessageType.Exception)
        {
          var tmp1186 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1186;
        }

        var tmp1187 = new InternalStructs.alterTag_result();
        await tmp1187.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1187.__isset.success)
        {
          return tmp1187.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "alterTag failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropTag(global::Nebula.Meta.DropTagReq req, CancellationToken cancellationToken = default)
      {
        await send_dropTag(req, cancellationToken);
        return await recv_dropTag(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropTag(global::Nebula.Meta.DropTagReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropTag", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1188 = new InternalStructs.dropTag_args() {
          Req = req,
        };
        
        await tmp1188.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropTag(CancellationToken cancellationToken = default)
      {
        
        var tmp1189 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1189.Type == TMessageType.Exception)
        {
          var tmp1190 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1190;
        }

        var tmp1191 = new InternalStructs.dropTag_result();
        await tmp1191.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1191.__isset.success)
        {
          return tmp1191.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropTag failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetTagResp> getTag(global::Nebula.Meta.GetTagReq req, CancellationToken cancellationToken = default)
      {
        await send_getTag(req, cancellationToken);
        return await recv_getTag(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getTag(global::Nebula.Meta.GetTagReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTag", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1192 = new InternalStructs.getTag_args() {
          Req = req,
        };
        
        await tmp1192.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetTagResp> recv_getTag(CancellationToken cancellationToken = default)
      {
        
        var tmp1193 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1193.Type == TMessageType.Exception)
        {
          var tmp1194 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1194;
        }

        var tmp1195 = new InternalStructs.getTag_result();
        await tmp1195.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1195.__isset.success)
        {
          return tmp1195.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTag failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListTagsResp> listTags(global::Nebula.Meta.ListTagsReq req, CancellationToken cancellationToken = default)
      {
        await send_listTags(req, cancellationToken);
        return await recv_listTags(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listTags(global::Nebula.Meta.ListTagsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listTags", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1196 = new InternalStructs.listTags_args() {
          Req = req,
        };
        
        await tmp1196.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListTagsResp> recv_listTags(CancellationToken cancellationToken = default)
      {
        
        var tmp1197 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1197.Type == TMessageType.Exception)
        {
          var tmp1198 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1198;
        }

        var tmp1199 = new InternalStructs.listTags_result();
        await tmp1199.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1199.__isset.success)
        {
          return tmp1199.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTags failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createEdge(global::Nebula.Meta.CreateEdgeReq req, CancellationToken cancellationToken = default)
      {
        await send_createEdge(req, cancellationToken);
        return await recv_createEdge(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createEdge(global::Nebula.Meta.CreateEdgeReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createEdge", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1200 = new InternalStructs.createEdge_args() {
          Req = req,
        };
        
        await tmp1200.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_createEdge(CancellationToken cancellationToken = default)
      {
        
        var tmp1201 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1201.Type == TMessageType.Exception)
        {
          var tmp1202 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1202;
        }

        var tmp1203 = new InternalStructs.createEdge_result();
        await tmp1203.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1203.__isset.success)
        {
          return tmp1203.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createEdge failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> alterEdge(global::Nebula.Meta.AlterEdgeReq req, CancellationToken cancellationToken = default)
      {
        await send_alterEdge(req, cancellationToken);
        return await recv_alterEdge(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_alterEdge(global::Nebula.Meta.AlterEdgeReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("alterEdge", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1204 = new InternalStructs.alterEdge_args() {
          Req = req,
        };
        
        await tmp1204.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_alterEdge(CancellationToken cancellationToken = default)
      {
        
        var tmp1205 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1205.Type == TMessageType.Exception)
        {
          var tmp1206 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1206;
        }

        var tmp1207 = new InternalStructs.alterEdge_result();
        await tmp1207.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1207.__isset.success)
        {
          return tmp1207.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "alterEdge failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropEdge(global::Nebula.Meta.DropEdgeReq req, CancellationToken cancellationToken = default)
      {
        await send_dropEdge(req, cancellationToken);
        return await recv_dropEdge(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropEdge(global::Nebula.Meta.DropEdgeReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropEdge", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1208 = new InternalStructs.dropEdge_args() {
          Req = req,
        };
        
        await tmp1208.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropEdge(CancellationToken cancellationToken = default)
      {
        
        var tmp1209 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1209.Type == TMessageType.Exception)
        {
          var tmp1210 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1210;
        }

        var tmp1211 = new InternalStructs.dropEdge_result();
        await tmp1211.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1211.__isset.success)
        {
          return tmp1211.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropEdge failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetEdgeResp> getEdge(global::Nebula.Meta.GetEdgeReq req, CancellationToken cancellationToken = default)
      {
        await send_getEdge(req, cancellationToken);
        return await recv_getEdge(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getEdge(global::Nebula.Meta.GetEdgeReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getEdge", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1212 = new InternalStructs.getEdge_args() {
          Req = req,
        };
        
        await tmp1212.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetEdgeResp> recv_getEdge(CancellationToken cancellationToken = default)
      {
        
        var tmp1213 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1213.Type == TMessageType.Exception)
        {
          var tmp1214 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1214;
        }

        var tmp1215 = new InternalStructs.getEdge_result();
        await tmp1215.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1215.__isset.success)
        {
          return tmp1215.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEdge failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListEdgesResp> listEdges(global::Nebula.Meta.ListEdgesReq req, CancellationToken cancellationToken = default)
      {
        await send_listEdges(req, cancellationToken);
        return await recv_listEdges(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listEdges(global::Nebula.Meta.ListEdgesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listEdges", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1216 = new InternalStructs.listEdges_args() {
          Req = req,
        };
        
        await tmp1216.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListEdgesResp> recv_listEdges(CancellationToken cancellationToken = default)
      {
        
        var tmp1217 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1217.Type == TMessageType.Exception)
        {
          var tmp1218 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1218;
        }

        var tmp1219 = new InternalStructs.listEdges_result();
        await tmp1219.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1219.__isset.success)
        {
          return tmp1219.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listEdges failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListHostsResp> listHosts(global::Nebula.Meta.ListHostsReq req, CancellationToken cancellationToken = default)
      {
        await send_listHosts(req, cancellationToken);
        return await recv_listHosts(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listHosts(global::Nebula.Meta.ListHostsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listHosts", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1220 = new InternalStructs.listHosts_args() {
          Req = req,
        };
        
        await tmp1220.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListHostsResp> recv_listHosts(CancellationToken cancellationToken = default)
      {
        
        var tmp1221 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1221.Type == TMessageType.Exception)
        {
          var tmp1222 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1222;
        }

        var tmp1223 = new InternalStructs.listHosts_result();
        await tmp1223.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1223.__isset.success)
        {
          return tmp1223.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listHosts failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetPartsAllocResp> getPartsAlloc(global::Nebula.Meta.GetPartsAllocReq req, CancellationToken cancellationToken = default)
      {
        await send_getPartsAlloc(req, cancellationToken);
        return await recv_getPartsAlloc(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getPartsAlloc(global::Nebula.Meta.GetPartsAllocReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getPartsAlloc", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1224 = new InternalStructs.getPartsAlloc_args() {
          Req = req,
        };
        
        await tmp1224.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetPartsAllocResp> recv_getPartsAlloc(CancellationToken cancellationToken = default)
      {
        
        var tmp1225 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1225.Type == TMessageType.Exception)
        {
          var tmp1226 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1226;
        }

        var tmp1227 = new InternalStructs.getPartsAlloc_result();
        await tmp1227.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1227.__isset.success)
        {
          return tmp1227.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPartsAlloc failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListPartsResp> listParts(global::Nebula.Meta.ListPartsReq req, CancellationToken cancellationToken = default)
      {
        await send_listParts(req, cancellationToken);
        return await recv_listParts(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listParts(global::Nebula.Meta.ListPartsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listParts", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1228 = new InternalStructs.listParts_args() {
          Req = req,
        };
        
        await tmp1228.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListPartsResp> recv_listParts(CancellationToken cancellationToken = default)
      {
        
        var tmp1229 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1229.Type == TMessageType.Exception)
        {
          var tmp1230 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1230;
        }

        var tmp1231 = new InternalStructs.listParts_result();
        await tmp1231.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1231.__isset.success)
        {
          return tmp1231.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listParts failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> multiPut(global::Nebula.Meta.MultiPutReq req, CancellationToken cancellationToken = default)
      {
        await send_multiPut(req, cancellationToken);
        return await recv_multiPut(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_multiPut(global::Nebula.Meta.MultiPutReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("multiPut", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1232 = new InternalStructs.multiPut_args() {
          Req = req,
        };
        
        await tmp1232.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_multiPut(CancellationToken cancellationToken = default)
      {
        
        var tmp1233 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1233.Type == TMessageType.Exception)
        {
          var tmp1234 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1234;
        }

        var tmp1235 = new InternalStructs.multiPut_result();
        await tmp1235.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1235.__isset.success)
        {
          return tmp1235.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "multiPut failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetResp> @get(global::Nebula.Meta.GetReq req, CancellationToken cancellationToken = default)
      {
        await send_get(req, cancellationToken);
        return await recv_get(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_get(global::Nebula.Meta.GetReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("get", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1236 = new InternalStructs.get_args() {
          Req = req,
        };
        
        await tmp1236.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetResp> recv_get(CancellationToken cancellationToken = default)
      {
        
        var tmp1237 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1237.Type == TMessageType.Exception)
        {
          var tmp1238 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1238;
        }

        var tmp1239 = new InternalStructs.get_result();
        await tmp1239.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1239.__isset.success)
        {
          return tmp1239.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.MultiGetResp> multiGet(global::Nebula.Meta.MultiGetReq req, CancellationToken cancellationToken = default)
      {
        await send_multiGet(req, cancellationToken);
        return await recv_multiGet(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_multiGet(global::Nebula.Meta.MultiGetReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("multiGet", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1240 = new InternalStructs.multiGet_args() {
          Req = req,
        };
        
        await tmp1240.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.MultiGetResp> recv_multiGet(CancellationToken cancellationToken = default)
      {
        
        var tmp1241 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1241.Type == TMessageType.Exception)
        {
          var tmp1242 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1242;
        }

        var tmp1243 = new InternalStructs.multiGet_result();
        await tmp1243.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1243.__isset.success)
        {
          return tmp1243.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "multiGet failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> @remove(global::Nebula.Meta.RemoveReq req, CancellationToken cancellationToken = default)
      {
        await send_remove(req, cancellationToken);
        return await recv_remove(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_remove(global::Nebula.Meta.RemoveReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("remove", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1244 = new InternalStructs.remove_args() {
          Req = req,
        };
        
        await tmp1244.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_remove(CancellationToken cancellationToken = default)
      {
        
        var tmp1245 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1245.Type == TMessageType.Exception)
        {
          var tmp1246 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1246;
        }

        var tmp1247 = new InternalStructs.remove_result();
        await tmp1247.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1247.__isset.success)
        {
          return tmp1247.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "remove failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> removeRange(global::Nebula.Meta.RemoveRangeReq req, CancellationToken cancellationToken = default)
      {
        await send_removeRange(req, cancellationToken);
        return await recv_removeRange(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeRange(global::Nebula.Meta.RemoveRangeReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeRange", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1248 = new InternalStructs.removeRange_args() {
          Req = req,
        };
        
        await tmp1248.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_removeRange(CancellationToken cancellationToken = default)
      {
        
        var tmp1249 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1249.Type == TMessageType.Exception)
        {
          var tmp1250 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1250;
        }

        var tmp1251 = new InternalStructs.removeRange_result();
        await tmp1251.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1251.__isset.success)
        {
          return tmp1251.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeRange failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ScanResp> scan(global::Nebula.Meta.ScanReq req, CancellationToken cancellationToken = default)
      {
        await send_scan(req, cancellationToken);
        return await recv_scan(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_scan(global::Nebula.Meta.ScanReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1252 = new InternalStructs.scan_args() {
          Req = req,
        };
        
        await tmp1252.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ScanResp> recv_scan(CancellationToken cancellationToken = default)
      {
        
        var tmp1253 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1253.Type == TMessageType.Exception)
        {
          var tmp1254 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1254;
        }

        var tmp1255 = new InternalStructs.scan_result();
        await tmp1255.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1255.__isset.success)
        {
          return tmp1255.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createTagIndex(global::Nebula.Meta.CreateTagIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_createTagIndex(req, cancellationToken);
        return await recv_createTagIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createTagIndex(global::Nebula.Meta.CreateTagIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createTagIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1256 = new InternalStructs.createTagIndex_args() {
          Req = req,
        };
        
        await tmp1256.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_createTagIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1257 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1257.Type == TMessageType.Exception)
        {
          var tmp1258 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1258;
        }

        var tmp1259 = new InternalStructs.createTagIndex_result();
        await tmp1259.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1259.__isset.success)
        {
          return tmp1259.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTagIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropTagIndex(global::Nebula.Meta.DropTagIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_dropTagIndex(req, cancellationToken);
        return await recv_dropTagIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropTagIndex(global::Nebula.Meta.DropTagIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropTagIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1260 = new InternalStructs.dropTagIndex_args() {
          Req = req,
        };
        
        await tmp1260.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropTagIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1261 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1261.Type == TMessageType.Exception)
        {
          var tmp1262 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1262;
        }

        var tmp1263 = new InternalStructs.dropTagIndex_result();
        await tmp1263.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1263.__isset.success)
        {
          return tmp1263.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropTagIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetTagIndexResp> getTagIndex(global::Nebula.Meta.GetTagIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_getTagIndex(req, cancellationToken);
        return await recv_getTagIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getTagIndex(global::Nebula.Meta.GetTagIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTagIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1264 = new InternalStructs.getTagIndex_args() {
          Req = req,
        };
        
        await tmp1264.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetTagIndexResp> recv_getTagIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1265 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1265.Type == TMessageType.Exception)
        {
          var tmp1266 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1266;
        }

        var tmp1267 = new InternalStructs.getTagIndex_result();
        await tmp1267.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1267.__isset.success)
        {
          return tmp1267.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTagIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListTagIndexesResp> listTagIndexes(global::Nebula.Meta.ListTagIndexesReq req, CancellationToken cancellationToken = default)
      {
        await send_listTagIndexes(req, cancellationToken);
        return await recv_listTagIndexes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listTagIndexes(global::Nebula.Meta.ListTagIndexesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listTagIndexes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1268 = new InternalStructs.listTagIndexes_args() {
          Req = req,
        };
        
        await tmp1268.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListTagIndexesResp> recv_listTagIndexes(CancellationToken cancellationToken = default)
      {
        
        var tmp1269 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1269.Type == TMessageType.Exception)
        {
          var tmp1270 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1270;
        }

        var tmp1271 = new InternalStructs.listTagIndexes_result();
        await tmp1271.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1271.__isset.success)
        {
          return tmp1271.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTagIndexes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> rebuildTagIndex(global::Nebula.Meta.RebuildIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_rebuildTagIndex(req, cancellationToken);
        return await recv_rebuildTagIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_rebuildTagIndex(global::Nebula.Meta.RebuildIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("rebuildTagIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1272 = new InternalStructs.rebuildTagIndex_args() {
          Req = req,
        };
        
        await tmp1272.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_rebuildTagIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1273 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1273.Type == TMessageType.Exception)
        {
          var tmp1274 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1274;
        }

        var tmp1275 = new InternalStructs.rebuildTagIndex_result();
        await tmp1275.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1275.__isset.success)
        {
          return tmp1275.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rebuildTagIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListIndexStatusResp> listTagIndexStatus(global::Nebula.Meta.ListIndexStatusReq req, CancellationToken cancellationToken = default)
      {
        await send_listTagIndexStatus(req, cancellationToken);
        return await recv_listTagIndexStatus(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listTagIndexStatus(global::Nebula.Meta.ListIndexStatusReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listTagIndexStatus", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1276 = new InternalStructs.listTagIndexStatus_args() {
          Req = req,
        };
        
        await tmp1276.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListIndexStatusResp> recv_listTagIndexStatus(CancellationToken cancellationToken = default)
      {
        
        var tmp1277 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1277.Type == TMessageType.Exception)
        {
          var tmp1278 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1278;
        }

        var tmp1279 = new InternalStructs.listTagIndexStatus_result();
        await tmp1279.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1279.__isset.success)
        {
          return tmp1279.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listTagIndexStatus failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createEdgeIndex(global::Nebula.Meta.CreateEdgeIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_createEdgeIndex(req, cancellationToken);
        return await recv_createEdgeIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createEdgeIndex(global::Nebula.Meta.CreateEdgeIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createEdgeIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1280 = new InternalStructs.createEdgeIndex_args() {
          Req = req,
        };
        
        await tmp1280.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_createEdgeIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1281 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1281.Type == TMessageType.Exception)
        {
          var tmp1282 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1282;
        }

        var tmp1283 = new InternalStructs.createEdgeIndex_result();
        await tmp1283.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1283.__isset.success)
        {
          return tmp1283.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createEdgeIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropEdgeIndex(global::Nebula.Meta.DropEdgeIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_dropEdgeIndex(req, cancellationToken);
        return await recv_dropEdgeIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropEdgeIndex(global::Nebula.Meta.DropEdgeIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropEdgeIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1284 = new InternalStructs.dropEdgeIndex_args() {
          Req = req,
        };
        
        await tmp1284.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropEdgeIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1285 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1285.Type == TMessageType.Exception)
        {
          var tmp1286 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1286;
        }

        var tmp1287 = new InternalStructs.dropEdgeIndex_result();
        await tmp1287.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1287.__isset.success)
        {
          return tmp1287.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropEdgeIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetEdgeIndexResp> getEdgeIndex(global::Nebula.Meta.GetEdgeIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_getEdgeIndex(req, cancellationToken);
        return await recv_getEdgeIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getEdgeIndex(global::Nebula.Meta.GetEdgeIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getEdgeIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1288 = new InternalStructs.getEdgeIndex_args() {
          Req = req,
        };
        
        await tmp1288.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetEdgeIndexResp> recv_getEdgeIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1289 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1289.Type == TMessageType.Exception)
        {
          var tmp1290 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1290;
        }

        var tmp1291 = new InternalStructs.getEdgeIndex_result();
        await tmp1291.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1291.__isset.success)
        {
          return tmp1291.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEdgeIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListEdgeIndexesResp> listEdgeIndexes(global::Nebula.Meta.ListEdgeIndexesReq req, CancellationToken cancellationToken = default)
      {
        await send_listEdgeIndexes(req, cancellationToken);
        return await recv_listEdgeIndexes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listEdgeIndexes(global::Nebula.Meta.ListEdgeIndexesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listEdgeIndexes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1292 = new InternalStructs.listEdgeIndexes_args() {
          Req = req,
        };
        
        await tmp1292.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListEdgeIndexesResp> recv_listEdgeIndexes(CancellationToken cancellationToken = default)
      {
        
        var tmp1293 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1293.Type == TMessageType.Exception)
        {
          var tmp1294 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1294;
        }

        var tmp1295 = new InternalStructs.listEdgeIndexes_result();
        await tmp1295.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1295.__isset.success)
        {
          return tmp1295.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listEdgeIndexes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> rebuildEdgeIndex(global::Nebula.Meta.RebuildIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_rebuildEdgeIndex(req, cancellationToken);
        return await recv_rebuildEdgeIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_rebuildEdgeIndex(global::Nebula.Meta.RebuildIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("rebuildEdgeIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1296 = new InternalStructs.rebuildEdgeIndex_args() {
          Req = req,
        };
        
        await tmp1296.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_rebuildEdgeIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1297 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1297.Type == TMessageType.Exception)
        {
          var tmp1298 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1298;
        }

        var tmp1299 = new InternalStructs.rebuildEdgeIndex_result();
        await tmp1299.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1299.__isset.success)
        {
          return tmp1299.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rebuildEdgeIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListIndexStatusResp> listEdgeIndexStatus(global::Nebula.Meta.ListIndexStatusReq req, CancellationToken cancellationToken = default)
      {
        await send_listEdgeIndexStatus(req, cancellationToken);
        return await recv_listEdgeIndexStatus(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listEdgeIndexStatus(global::Nebula.Meta.ListIndexStatusReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listEdgeIndexStatus", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1300 = new InternalStructs.listEdgeIndexStatus_args() {
          Req = req,
        };
        
        await tmp1300.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListIndexStatusResp> recv_listEdgeIndexStatus(CancellationToken cancellationToken = default)
      {
        
        var tmp1301 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1301.Type == TMessageType.Exception)
        {
          var tmp1302 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1302;
        }

        var tmp1303 = new InternalStructs.listEdgeIndexStatus_result();
        await tmp1303.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1303.__isset.success)
        {
          return tmp1303.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listEdgeIndexStatus failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createUser(global::Nebula.Meta.CreateUserReq req, CancellationToken cancellationToken = default)
      {
        await send_createUser(req, cancellationToken);
        return await recv_createUser(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createUser(global::Nebula.Meta.CreateUserReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createUser", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1304 = new InternalStructs.createUser_args() {
          Req = req,
        };
        
        await tmp1304.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_createUser(CancellationToken cancellationToken = default)
      {
        
        var tmp1305 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1305.Type == TMessageType.Exception)
        {
          var tmp1306 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1306;
        }

        var tmp1307 = new InternalStructs.createUser_result();
        await tmp1307.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1307.__isset.success)
        {
          return tmp1307.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createUser failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropUser(global::Nebula.Meta.DropUserReq req, CancellationToken cancellationToken = default)
      {
        await send_dropUser(req, cancellationToken);
        return await recv_dropUser(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropUser(global::Nebula.Meta.DropUserReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropUser", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1308 = new InternalStructs.dropUser_args() {
          Req = req,
        };
        
        await tmp1308.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropUser(CancellationToken cancellationToken = default)
      {
        
        var tmp1309 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1309.Type == TMessageType.Exception)
        {
          var tmp1310 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1310;
        }

        var tmp1311 = new InternalStructs.dropUser_result();
        await tmp1311.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1311.__isset.success)
        {
          return tmp1311.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropUser failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> alterUser(global::Nebula.Meta.AlterUserReq req, CancellationToken cancellationToken = default)
      {
        await send_alterUser(req, cancellationToken);
        return await recv_alterUser(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_alterUser(global::Nebula.Meta.AlterUserReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("alterUser", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1312 = new InternalStructs.alterUser_args() {
          Req = req,
        };
        
        await tmp1312.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_alterUser(CancellationToken cancellationToken = default)
      {
        
        var tmp1313 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1313.Type == TMessageType.Exception)
        {
          var tmp1314 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1314;
        }

        var tmp1315 = new InternalStructs.alterUser_result();
        await tmp1315.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1315.__isset.success)
        {
          return tmp1315.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "alterUser failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> grantRole(global::Nebula.Meta.GrantRoleReq req, CancellationToken cancellationToken = default)
      {
        await send_grantRole(req, cancellationToken);
        return await recv_grantRole(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_grantRole(global::Nebula.Meta.GrantRoleReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("grantRole", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1316 = new InternalStructs.grantRole_args() {
          Req = req,
        };
        
        await tmp1316.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_grantRole(CancellationToken cancellationToken = default)
      {
        
        var tmp1317 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1317.Type == TMessageType.Exception)
        {
          var tmp1318 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1318;
        }

        var tmp1319 = new InternalStructs.grantRole_result();
        await tmp1319.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1319.__isset.success)
        {
          return tmp1319.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "grantRole failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> revokeRole(global::Nebula.Meta.RevokeRoleReq req, CancellationToken cancellationToken = default)
      {
        await send_revokeRole(req, cancellationToken);
        return await recv_revokeRole(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_revokeRole(global::Nebula.Meta.RevokeRoleReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("revokeRole", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1320 = new InternalStructs.revokeRole_args() {
          Req = req,
        };
        
        await tmp1320.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_revokeRole(CancellationToken cancellationToken = default)
      {
        
        var tmp1321 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1321.Type == TMessageType.Exception)
        {
          var tmp1322 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1322;
        }

        var tmp1323 = new InternalStructs.revokeRole_result();
        await tmp1323.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1323.__isset.success)
        {
          return tmp1323.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "revokeRole failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListUsersResp> listUsers(global::Nebula.Meta.ListUsersReq req, CancellationToken cancellationToken = default)
      {
        await send_listUsers(req, cancellationToken);
        return await recv_listUsers(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listUsers(global::Nebula.Meta.ListUsersReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listUsers", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1324 = new InternalStructs.listUsers_args() {
          Req = req,
        };
        
        await tmp1324.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListUsersResp> recv_listUsers(CancellationToken cancellationToken = default)
      {
        
        var tmp1325 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1325.Type == TMessageType.Exception)
        {
          var tmp1326 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1326;
        }

        var tmp1327 = new InternalStructs.listUsers_result();
        await tmp1327.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1327.__isset.success)
        {
          return tmp1327.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listUsers failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListRolesResp> listRoles(global::Nebula.Meta.ListRolesReq req, CancellationToken cancellationToken = default)
      {
        await send_listRoles(req, cancellationToken);
        return await recv_listRoles(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listRoles(global::Nebula.Meta.ListRolesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listRoles", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1328 = new InternalStructs.listRoles_args() {
          Req = req,
        };
        
        await tmp1328.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListRolesResp> recv_listRoles(CancellationToken cancellationToken = default)
      {
        
        var tmp1329 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1329.Type == TMessageType.Exception)
        {
          var tmp1330 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1330;
        }

        var tmp1331 = new InternalStructs.listRoles_result();
        await tmp1331.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1331.__isset.success)
        {
          return tmp1331.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listRoles failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListRolesResp> getUserRoles(global::Nebula.Meta.GetUserRolesReq req, CancellationToken cancellationToken = default)
      {
        await send_getUserRoles(req, cancellationToken);
        return await recv_getUserRoles(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getUserRoles(global::Nebula.Meta.GetUserRolesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getUserRoles", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1332 = new InternalStructs.getUserRoles_args() {
          Req = req,
        };
        
        await tmp1332.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListRolesResp> recv_getUserRoles(CancellationToken cancellationToken = default)
      {
        
        var tmp1333 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1333.Type == TMessageType.Exception)
        {
          var tmp1334 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1334;
        }

        var tmp1335 = new InternalStructs.getUserRoles_result();
        await tmp1335.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1335.__isset.success)
        {
          return tmp1335.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserRoles failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> changePassword(global::Nebula.Meta.ChangePasswordReq req, CancellationToken cancellationToken = default)
      {
        await send_changePassword(req, cancellationToken);
        return await recv_changePassword(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_changePassword(global::Nebula.Meta.ChangePasswordReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("changePassword", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1336 = new InternalStructs.changePassword_args() {
          Req = req,
        };
        
        await tmp1336.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_changePassword(CancellationToken cancellationToken = default)
      {
        
        var tmp1337 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1337.Type == TMessageType.Exception)
        {
          var tmp1338 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1338;
        }

        var tmp1339 = new InternalStructs.changePassword_result();
        await tmp1339.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1339.__isset.success)
        {
          return tmp1339.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changePassword failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.HBResp> heartBeat(global::Nebula.Meta.HBReq req, CancellationToken cancellationToken = default)
      {
        await send_heartBeat(req, cancellationToken);
        return await recv_heartBeat(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_heartBeat(global::Nebula.Meta.HBReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("heartBeat", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1340 = new InternalStructs.heartBeat_args() {
          Req = req,
        };
        
        await tmp1340.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.HBResp> recv_heartBeat(CancellationToken cancellationToken = default)
      {
        
        var tmp1341 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1341.Type == TMessageType.Exception)
        {
          var tmp1342 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1342;
        }

        var tmp1343 = new InternalStructs.heartBeat_result();
        await tmp1343.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1343.__isset.success)
        {
          return tmp1343.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "heartBeat failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.BalanceResp> balance(global::Nebula.Meta.BalanceReq req, CancellationToken cancellationToken = default)
      {
        await send_balance(req, cancellationToken);
        return await recv_balance(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_balance(global::Nebula.Meta.BalanceReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("balance", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1344 = new InternalStructs.balance_args() {
          Req = req,
        };
        
        await tmp1344.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.BalanceResp> recv_balance(CancellationToken cancellationToken = default)
      {
        
        var tmp1345 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1345.Type == TMessageType.Exception)
        {
          var tmp1346 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1346;
        }

        var tmp1347 = new InternalStructs.balance_result();
        await tmp1347.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1347.__isset.success)
        {
          return tmp1347.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "balance failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> leaderBalance(global::Nebula.Meta.LeaderBalanceReq req, CancellationToken cancellationToken = default)
      {
        await send_leaderBalance(req, cancellationToken);
        return await recv_leaderBalance(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_leaderBalance(global::Nebula.Meta.LeaderBalanceReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("leaderBalance", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1348 = new InternalStructs.leaderBalance_args() {
          Req = req,
        };
        
        await tmp1348.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_leaderBalance(CancellationToken cancellationToken = default)
      {
        
        var tmp1349 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1349.Type == TMessageType.Exception)
        {
          var tmp1350 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1350;
        }

        var tmp1351 = new InternalStructs.leaderBalance_result();
        await tmp1351.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1351.__isset.success)
        {
          return tmp1351.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "leaderBalance failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> regConfig(global::Nebula.Meta.RegConfigReq req, CancellationToken cancellationToken = default)
      {
        await send_regConfig(req, cancellationToken);
        return await recv_regConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_regConfig(global::Nebula.Meta.RegConfigReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("regConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1352 = new InternalStructs.regConfig_args() {
          Req = req,
        };
        
        await tmp1352.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_regConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp1353 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1353.Type == TMessageType.Exception)
        {
          var tmp1354 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1354;
        }

        var tmp1355 = new InternalStructs.regConfig_result();
        await tmp1355.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1355.__isset.success)
        {
          return tmp1355.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "regConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetConfigResp> getConfig(global::Nebula.Meta.GetConfigReq req, CancellationToken cancellationToken = default)
      {
        await send_getConfig(req, cancellationToken);
        return await recv_getConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getConfig(global::Nebula.Meta.GetConfigReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1356 = new InternalStructs.getConfig_args() {
          Req = req,
        };
        
        await tmp1356.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetConfigResp> recv_getConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp1357 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1357.Type == TMessageType.Exception)
        {
          var tmp1358 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1358;
        }

        var tmp1359 = new InternalStructs.getConfig_result();
        await tmp1359.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1359.__isset.success)
        {
          return tmp1359.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> setConfig(global::Nebula.Meta.SetConfigReq req, CancellationToken cancellationToken = default)
      {
        await send_setConfig(req, cancellationToken);
        return await recv_setConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setConfig(global::Nebula.Meta.SetConfigReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1360 = new InternalStructs.setConfig_args() {
          Req = req,
        };
        
        await tmp1360.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_setConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp1361 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1361.Type == TMessageType.Exception)
        {
          var tmp1362 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1362;
        }

        var tmp1363 = new InternalStructs.setConfig_result();
        await tmp1363.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1363.__isset.success)
        {
          return tmp1363.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListConfigsResp> listConfigs(global::Nebula.Meta.ListConfigsReq req, CancellationToken cancellationToken = default)
      {
        await send_listConfigs(req, cancellationToken);
        return await recv_listConfigs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listConfigs(global::Nebula.Meta.ListConfigsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listConfigs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1364 = new InternalStructs.listConfigs_args() {
          Req = req,
        };
        
        await tmp1364.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListConfigsResp> recv_listConfigs(CancellationToken cancellationToken = default)
      {
        
        var tmp1365 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1365.Type == TMessageType.Exception)
        {
          var tmp1366 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1366;
        }

        var tmp1367 = new InternalStructs.listConfigs_result();
        await tmp1367.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1367.__isset.success)
        {
          return tmp1367.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listConfigs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createSnapshot(global::Nebula.Meta.CreateSnapshotReq req, CancellationToken cancellationToken = default)
      {
        await send_createSnapshot(req, cancellationToken);
        return await recv_createSnapshot(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createSnapshot(global::Nebula.Meta.CreateSnapshotReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createSnapshot", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1368 = new InternalStructs.createSnapshot_args() {
          Req = req,
        };
        
        await tmp1368.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_createSnapshot(CancellationToken cancellationToken = default)
      {
        
        var tmp1369 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1369.Type == TMessageType.Exception)
        {
          var tmp1370 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1370;
        }

        var tmp1371 = new InternalStructs.createSnapshot_result();
        await tmp1371.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1371.__isset.success)
        {
          return tmp1371.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSnapshot failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropSnapshot(global::Nebula.Meta.DropSnapshotReq req, CancellationToken cancellationToken = default)
      {
        await send_dropSnapshot(req, cancellationToken);
        return await recv_dropSnapshot(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropSnapshot(global::Nebula.Meta.DropSnapshotReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropSnapshot", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1372 = new InternalStructs.dropSnapshot_args() {
          Req = req,
        };
        
        await tmp1372.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropSnapshot(CancellationToken cancellationToken = default)
      {
        
        var tmp1373 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1373.Type == TMessageType.Exception)
        {
          var tmp1374 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1374;
        }

        var tmp1375 = new InternalStructs.dropSnapshot_result();
        await tmp1375.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1375.__isset.success)
        {
          return tmp1375.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropSnapshot failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListSnapshotsResp> listSnapshots(global::Nebula.Meta.ListSnapshotsReq req, CancellationToken cancellationToken = default)
      {
        await send_listSnapshots(req, cancellationToken);
        return await recv_listSnapshots(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listSnapshots(global::Nebula.Meta.ListSnapshotsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listSnapshots", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1376 = new InternalStructs.listSnapshots_args() {
          Req = req,
        };
        
        await tmp1376.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListSnapshotsResp> recv_listSnapshots(CancellationToken cancellationToken = default)
      {
        
        var tmp1377 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1377.Type == TMessageType.Exception)
        {
          var tmp1378 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1378;
        }

        var tmp1379 = new InternalStructs.listSnapshots_result();
        await tmp1379.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1379.__isset.success)
        {
          return tmp1379.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listSnapshots failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.AdminJobResp> runAdminJob(global::Nebula.Meta.AdminJobReq req, CancellationToken cancellationToken = default)
      {
        await send_runAdminJob(req, cancellationToken);
        return await recv_runAdminJob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_runAdminJob(global::Nebula.Meta.AdminJobReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("runAdminJob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1380 = new InternalStructs.runAdminJob_args() {
          Req = req,
        };
        
        await tmp1380.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.AdminJobResp> recv_runAdminJob(CancellationToken cancellationToken = default)
      {
        
        var tmp1381 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1381.Type == TMessageType.Exception)
        {
          var tmp1382 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1382;
        }

        var tmp1383 = new InternalStructs.runAdminJob_result();
        await tmp1383.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1383.__isset.success)
        {
          return tmp1383.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "runAdminJob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addZone(global::Nebula.Meta.AddZoneReq req, CancellationToken cancellationToken = default)
      {
        await send_addZone(req, cancellationToken);
        return await recv_addZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addZone(global::Nebula.Meta.AddZoneReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1384 = new InternalStructs.addZone_args() {
          Req = req,
        };
        
        await tmp1384.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_addZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1385 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1385.Type == TMessageType.Exception)
        {
          var tmp1386 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1386;
        }

        var tmp1387 = new InternalStructs.addZone_result();
        await tmp1387.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1387.__isset.success)
        {
          return tmp1387.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropZone(global::Nebula.Meta.DropZoneReq req, CancellationToken cancellationToken = default)
      {
        await send_dropZone(req, cancellationToken);
        return await recv_dropZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropZone(global::Nebula.Meta.DropZoneReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1388 = new InternalStructs.dropZone_args() {
          Req = req,
        };
        
        await tmp1388.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1389 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1389.Type == TMessageType.Exception)
        {
          var tmp1390 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1390;
        }

        var tmp1391 = new InternalStructs.dropZone_result();
        await tmp1391.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1391.__isset.success)
        {
          return tmp1391.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addHostIntoZone(global::Nebula.Meta.AddHostIntoZoneReq req, CancellationToken cancellationToken = default)
      {
        await send_addHostIntoZone(req, cancellationToken);
        return await recv_addHostIntoZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addHostIntoZone(global::Nebula.Meta.AddHostIntoZoneReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addHostIntoZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1392 = new InternalStructs.addHostIntoZone_args() {
          Req = req,
        };
        
        await tmp1392.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_addHostIntoZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1393 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1393.Type == TMessageType.Exception)
        {
          var tmp1394 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1394;
        }

        var tmp1395 = new InternalStructs.addHostIntoZone_result();
        await tmp1395.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1395.__isset.success)
        {
          return tmp1395.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addHostIntoZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropHostFromZone(global::Nebula.Meta.DropHostFromZoneReq req, CancellationToken cancellationToken = default)
      {
        await send_dropHostFromZone(req, cancellationToken);
        return await recv_dropHostFromZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropHostFromZone(global::Nebula.Meta.DropHostFromZoneReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropHostFromZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1396 = new InternalStructs.dropHostFromZone_args() {
          Req = req,
        };
        
        await tmp1396.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropHostFromZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1397 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1397.Type == TMessageType.Exception)
        {
          var tmp1398 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1398;
        }

        var tmp1399 = new InternalStructs.dropHostFromZone_result();
        await tmp1399.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1399.__isset.success)
        {
          return tmp1399.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropHostFromZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetZoneResp> getZone(global::Nebula.Meta.GetZoneReq req, CancellationToken cancellationToken = default)
      {
        await send_getZone(req, cancellationToken);
        return await recv_getZone(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getZone(global::Nebula.Meta.GetZoneReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getZone", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1400 = new InternalStructs.getZone_args() {
          Req = req,
        };
        
        await tmp1400.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetZoneResp> recv_getZone(CancellationToken cancellationToken = default)
      {
        
        var tmp1401 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1401.Type == TMessageType.Exception)
        {
          var tmp1402 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1402;
        }

        var tmp1403 = new InternalStructs.getZone_result();
        await tmp1403.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1403.__isset.success)
        {
          return tmp1403.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getZone failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListZonesResp> listZones(global::Nebula.Meta.ListZonesReq req, CancellationToken cancellationToken = default)
      {
        await send_listZones(req, cancellationToken);
        return await recv_listZones(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listZones(global::Nebula.Meta.ListZonesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listZones", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1404 = new InternalStructs.listZones_args() {
          Req = req,
        };
        
        await tmp1404.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListZonesResp> recv_listZones(CancellationToken cancellationToken = default)
      {
        
        var tmp1405 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1405.Type == TMessageType.Exception)
        {
          var tmp1406 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1406;
        }

        var tmp1407 = new InternalStructs.listZones_result();
        await tmp1407.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1407.__isset.success)
        {
          return tmp1407.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listZones failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addGroup(global::Nebula.Meta.AddGroupReq req, CancellationToken cancellationToken = default)
      {
        await send_addGroup(req, cancellationToken);
        return await recv_addGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addGroup(global::Nebula.Meta.AddGroupReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1408 = new InternalStructs.addGroup_args() {
          Req = req,
        };
        
        await tmp1408.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_addGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1409 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1409.Type == TMessageType.Exception)
        {
          var tmp1410 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1410;
        }

        var tmp1411 = new InternalStructs.addGroup_result();
        await tmp1411.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1411.__isset.success)
        {
          return tmp1411.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropGroup(global::Nebula.Meta.DropGroupReq req, CancellationToken cancellationToken = default)
      {
        await send_dropGroup(req, cancellationToken);
        return await recv_dropGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropGroup(global::Nebula.Meta.DropGroupReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1412 = new InternalStructs.dropGroup_args() {
          Req = req,
        };
        
        await tmp1412.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1413 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1413.Type == TMessageType.Exception)
        {
          var tmp1414 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1414;
        }

        var tmp1415 = new InternalStructs.dropGroup_result();
        await tmp1415.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1415.__isset.success)
        {
          return tmp1415.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addZoneIntoGroup(global::Nebula.Meta.AddZoneIntoGroupReq req, CancellationToken cancellationToken = default)
      {
        await send_addZoneIntoGroup(req, cancellationToken);
        return await recv_addZoneIntoGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addZoneIntoGroup(global::Nebula.Meta.AddZoneIntoGroupReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addZoneIntoGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1416 = new InternalStructs.addZoneIntoGroup_args() {
          Req = req,
        };
        
        await tmp1416.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_addZoneIntoGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1417 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1417.Type == TMessageType.Exception)
        {
          var tmp1418 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1418;
        }

        var tmp1419 = new InternalStructs.addZoneIntoGroup_result();
        await tmp1419.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1419.__isset.success)
        {
          return tmp1419.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addZoneIntoGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropZoneFromGroup(global::Nebula.Meta.DropZoneFromGroupReq req, CancellationToken cancellationToken = default)
      {
        await send_dropZoneFromGroup(req, cancellationToken);
        return await recv_dropZoneFromGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropZoneFromGroup(global::Nebula.Meta.DropZoneFromGroupReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropZoneFromGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1420 = new InternalStructs.dropZoneFromGroup_args() {
          Req = req,
        };
        
        await tmp1420.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropZoneFromGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1421 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1421.Type == TMessageType.Exception)
        {
          var tmp1422 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1422;
        }

        var tmp1423 = new InternalStructs.dropZoneFromGroup_result();
        await tmp1423.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1423.__isset.success)
        {
          return tmp1423.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropZoneFromGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetGroupResp> getGroup(global::Nebula.Meta.GetGroupReq req, CancellationToken cancellationToken = default)
      {
        await send_getGroup(req, cancellationToken);
        return await recv_getGroup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getGroup(global::Nebula.Meta.GetGroupReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getGroup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1424 = new InternalStructs.getGroup_args() {
          Req = req,
        };
        
        await tmp1424.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetGroupResp> recv_getGroup(CancellationToken cancellationToken = default)
      {
        
        var tmp1425 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1425.Type == TMessageType.Exception)
        {
          var tmp1426 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1426;
        }

        var tmp1427 = new InternalStructs.getGroup_result();
        await tmp1427.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1427.__isset.success)
        {
          return tmp1427.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListGroupsResp> listGroups(global::Nebula.Meta.ListGroupsReq req, CancellationToken cancellationToken = default)
      {
        await send_listGroups(req, cancellationToken);
        return await recv_listGroups(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listGroups(global::Nebula.Meta.ListGroupsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listGroups", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1428 = new InternalStructs.listGroups_args() {
          Req = req,
        };
        
        await tmp1428.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListGroupsResp> recv_listGroups(CancellationToken cancellationToken = default)
      {
        
        var tmp1429 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1429.Type == TMessageType.Exception)
        {
          var tmp1430 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1430;
        }

        var tmp1431 = new InternalStructs.listGroups_result();
        await tmp1431.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1431.__isset.success)
        {
          return tmp1431.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listGroups failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.CreateBackupResp> createBackup(global::Nebula.Meta.CreateBackupReq req, CancellationToken cancellationToken = default)
      {
        await send_createBackup(req, cancellationToken);
        return await recv_createBackup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createBackup(global::Nebula.Meta.CreateBackupReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createBackup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1432 = new InternalStructs.createBackup_args() {
          Req = req,
        };
        
        await tmp1432.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.CreateBackupResp> recv_createBackup(CancellationToken cancellationToken = default)
      {
        
        var tmp1433 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1433.Type == TMessageType.Exception)
        {
          var tmp1434 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1434;
        }

        var tmp1435 = new InternalStructs.createBackup_result();
        await tmp1435.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1435.__isset.success)
        {
          return tmp1435.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createBackup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> restoreMeta(global::Nebula.Meta.RestoreMetaReq req, CancellationToken cancellationToken = default)
      {
        await send_restoreMeta(req, cancellationToken);
        return await recv_restoreMeta(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_restoreMeta(global::Nebula.Meta.RestoreMetaReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("restoreMeta", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1436 = new InternalStructs.restoreMeta_args() {
          Req = req,
        };
        
        await tmp1436.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_restoreMeta(CancellationToken cancellationToken = default)
      {
        
        var tmp1437 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1437.Type == TMessageType.Exception)
        {
          var tmp1438 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1438;
        }

        var tmp1439 = new InternalStructs.restoreMeta_result();
        await tmp1439.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1439.__isset.success)
        {
          return tmp1439.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "restoreMeta failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> addListener(global::Nebula.Meta.AddListenerReq req, CancellationToken cancellationToken = default)
      {
        await send_addListener(req, cancellationToken);
        return await recv_addListener(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addListener(global::Nebula.Meta.AddListenerReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addListener", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1440 = new InternalStructs.addListener_args() {
          Req = req,
        };
        
        await tmp1440.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_addListener(CancellationToken cancellationToken = default)
      {
        
        var tmp1441 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1441.Type == TMessageType.Exception)
        {
          var tmp1442 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1442;
        }

        var tmp1443 = new InternalStructs.addListener_result();
        await tmp1443.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1443.__isset.success)
        {
          return tmp1443.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addListener failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> removeListener(global::Nebula.Meta.RemoveListenerReq req, CancellationToken cancellationToken = default)
      {
        await send_removeListener(req, cancellationToken);
        return await recv_removeListener(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeListener(global::Nebula.Meta.RemoveListenerReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeListener", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1444 = new InternalStructs.removeListener_args() {
          Req = req,
        };
        
        await tmp1444.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_removeListener(CancellationToken cancellationToken = default)
      {
        
        var tmp1445 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1445.Type == TMessageType.Exception)
        {
          var tmp1446 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1446;
        }

        var tmp1447 = new InternalStructs.removeListener_result();
        await tmp1447.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1447.__isset.success)
        {
          return tmp1447.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeListener failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListListenerResp> listListener(global::Nebula.Meta.ListListenerReq req, CancellationToken cancellationToken = default)
      {
        await send_listListener(req, cancellationToken);
        return await recv_listListener(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listListener(global::Nebula.Meta.ListListenerReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listListener", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1448 = new InternalStructs.listListener_args() {
          Req = req,
        };
        
        await tmp1448.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListListenerResp> recv_listListener(CancellationToken cancellationToken = default)
      {
        
        var tmp1449 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1449.Type == TMessageType.Exception)
        {
          var tmp1450 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1450;
        }

        var tmp1451 = new InternalStructs.listListener_result();
        await tmp1451.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1451.__isset.success)
        {
          return tmp1451.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listListener failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetStatsResp> getStats(global::Nebula.Meta.GetStatsReq req, CancellationToken cancellationToken = default)
      {
        await send_getStats(req, cancellationToken);
        return await recv_getStats(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getStats(global::Nebula.Meta.GetStatsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getStats", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1452 = new InternalStructs.getStats_args() {
          Req = req,
        };
        
        await tmp1452.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetStatsResp> recv_getStats(CancellationToken cancellationToken = default)
      {
        
        var tmp1453 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1453.Type == TMessageType.Exception)
        {
          var tmp1454 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1454;
        }

        var tmp1455 = new InternalStructs.getStats_result();
        await tmp1455.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1455.__isset.success)
        {
          return tmp1455.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getStats failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> signInFTService(global::Nebula.Meta.SignInFTServiceReq req, CancellationToken cancellationToken = default)
      {
        await send_signInFTService(req, cancellationToken);
        return await recv_signInFTService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_signInFTService(global::Nebula.Meta.SignInFTServiceReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("signInFTService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1456 = new InternalStructs.signInFTService_args() {
          Req = req,
        };
        
        await tmp1456.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_signInFTService(CancellationToken cancellationToken = default)
      {
        
        var tmp1457 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1457.Type == TMessageType.Exception)
        {
          var tmp1458 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1458;
        }

        var tmp1459 = new InternalStructs.signInFTService_result();
        await tmp1459.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1459.__isset.success)
        {
          return tmp1459.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "signInFTService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> signOutFTService(global::Nebula.Meta.SignOutFTServiceReq req, CancellationToken cancellationToken = default)
      {
        await send_signOutFTService(req, cancellationToken);
        return await recv_signOutFTService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_signOutFTService(global::Nebula.Meta.SignOutFTServiceReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("signOutFTService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1460 = new InternalStructs.signOutFTService_args() {
          Req = req,
        };
        
        await tmp1460.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_signOutFTService(CancellationToken cancellationToken = default)
      {
        
        var tmp1461 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1461.Type == TMessageType.Exception)
        {
          var tmp1462 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1462;
        }

        var tmp1463 = new InternalStructs.signOutFTService_result();
        await tmp1463.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1463.__isset.success)
        {
          return tmp1463.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "signOutFTService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListFTClientsResp> listFTClients(global::Nebula.Meta.ListFTClientsReq req, CancellationToken cancellationToken = default)
      {
        await send_listFTClients(req, cancellationToken);
        return await recv_listFTClients(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listFTClients(global::Nebula.Meta.ListFTClientsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listFTClients", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1464 = new InternalStructs.listFTClients_args() {
          Req = req,
        };
        
        await tmp1464.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListFTClientsResp> recv_listFTClients(CancellationToken cancellationToken = default)
      {
        
        var tmp1465 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1465.Type == TMessageType.Exception)
        {
          var tmp1466 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1466;
        }

        var tmp1467 = new InternalStructs.listFTClients_result();
        await tmp1467.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1467.__isset.success)
        {
          return tmp1467.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listFTClients failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> createFTIndex(global::Nebula.Meta.CreateFTIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_createFTIndex(req, cancellationToken);
        return await recv_createFTIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createFTIndex(global::Nebula.Meta.CreateFTIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createFTIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1468 = new InternalStructs.createFTIndex_args() {
          Req = req,
        };
        
        await tmp1468.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_createFTIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1469 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1469.Type == TMessageType.Exception)
        {
          var tmp1470 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1470;
        }

        var tmp1471 = new InternalStructs.createFTIndex_result();
        await tmp1471.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1471.__isset.success)
        {
          return tmp1471.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createFTIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> dropFTIndex(global::Nebula.Meta.DropFTIndexReq req, CancellationToken cancellationToken = default)
      {
        await send_dropFTIndex(req, cancellationToken);
        return await recv_dropFTIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropFTIndex(global::Nebula.Meta.DropFTIndexReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropFTIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1472 = new InternalStructs.dropFTIndex_args() {
          Req = req,
        };
        
        await tmp1472.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_dropFTIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp1473 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1473.Type == TMessageType.Exception)
        {
          var tmp1474 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1474;
        }

        var tmp1475 = new InternalStructs.dropFTIndex_result();
        await tmp1475.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1475.__isset.success)
        {
          return tmp1475.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropFTIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListFTIndexesResp> listFTIndexes(global::Nebula.Meta.ListFTIndexesReq req, CancellationToken cancellationToken = default)
      {
        await send_listFTIndexes(req, cancellationToken);
        return await recv_listFTIndexes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listFTIndexes(global::Nebula.Meta.ListFTIndexesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listFTIndexes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1476 = new InternalStructs.listFTIndexes_args() {
          Req = req,
        };
        
        await tmp1476.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListFTIndexesResp> recv_listFTIndexes(CancellationToken cancellationToken = default)
      {
        
        var tmp1477 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1477.Type == TMessageType.Exception)
        {
          var tmp1478 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1478;
        }

        var tmp1479 = new InternalStructs.listFTIndexes_result();
        await tmp1479.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1479.__isset.success)
        {
          return tmp1479.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listFTIndexes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.CreateSessionResp> createSession(global::Nebula.Meta.CreateSessionReq req, CancellationToken cancellationToken = default)
      {
        await send_createSession(req, cancellationToken);
        return await recv_createSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createSession(global::Nebula.Meta.CreateSessionReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createSession", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1480 = new InternalStructs.createSession_args() {
          Req = req,
        };
        
        await tmp1480.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.CreateSessionResp> recv_createSession(CancellationToken cancellationToken = default)
      {
        
        var tmp1481 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1481.Type == TMessageType.Exception)
        {
          var tmp1482 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1482;
        }

        var tmp1483 = new InternalStructs.createSession_result();
        await tmp1483.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1483.__isset.success)
        {
          return tmp1483.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.UpdateSessionsResp> updateSessions(global::Nebula.Meta.UpdateSessionsReq req, CancellationToken cancellationToken = default)
      {
        await send_updateSessions(req, cancellationToken);
        return await recv_updateSessions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateSessions(global::Nebula.Meta.UpdateSessionsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateSessions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1484 = new InternalStructs.updateSessions_args() {
          Req = req,
        };
        
        await tmp1484.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.UpdateSessionsResp> recv_updateSessions(CancellationToken cancellationToken = default)
      {
        
        var tmp1485 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1485.Type == TMessageType.Exception)
        {
          var tmp1486 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1486;
        }

        var tmp1487 = new InternalStructs.updateSessions_result();
        await tmp1487.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1487.__isset.success)
        {
          return tmp1487.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSessions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListSessionsResp> listSessions(global::Nebula.Meta.ListSessionsReq req, CancellationToken cancellationToken = default)
      {
        await send_listSessions(req, cancellationToken);
        return await recv_listSessions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listSessions(global::Nebula.Meta.ListSessionsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listSessions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1488 = new InternalStructs.listSessions_args() {
          Req = req,
        };
        
        await tmp1488.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListSessionsResp> recv_listSessions(CancellationToken cancellationToken = default)
      {
        
        var tmp1489 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1489.Type == TMessageType.Exception)
        {
          var tmp1490 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1490;
        }

        var tmp1491 = new InternalStructs.listSessions_result();
        await tmp1491.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1491.__isset.success)
        {
          return tmp1491.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listSessions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetSessionResp> getSession(global::Nebula.Meta.GetSessionReq req, CancellationToken cancellationToken = default)
      {
        await send_getSession(req, cancellationToken);
        return await recv_getSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getSession(global::Nebula.Meta.GetSessionReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSession", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1492 = new InternalStructs.getSession_args() {
          Req = req,
        };
        
        await tmp1492.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetSessionResp> recv_getSession(CancellationToken cancellationToken = default)
      {
        
        var tmp1493 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1493.Type == TMessageType.Exception)
        {
          var tmp1494 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1494;
        }

        var tmp1495 = new InternalStructs.getSession_result();
        await tmp1495.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1495.__isset.success)
        {
          return tmp1495.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> removeSession(global::Nebula.Meta.RemoveSessionReq req, CancellationToken cancellationToken = default)
      {
        await send_removeSession(req, cancellationToken);
        return await recv_removeSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removeSession(global::Nebula.Meta.RemoveSessionReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeSession", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1496 = new InternalStructs.removeSession_args() {
          Req = req,
        };
        
        await tmp1496.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_removeSession(CancellationToken cancellationToken = default)
      {
        
        var tmp1497 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1497.Type == TMessageType.Exception)
        {
          var tmp1498 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1498;
        }

        var tmp1499 = new InternalStructs.removeSession_result();
        await tmp1499.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1499.__isset.success)
        {
          return tmp1499.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> killQuery(global::Nebula.Meta.KillQueryReq req, CancellationToken cancellationToken = default)
      {
        await send_killQuery(req, cancellationToken);
        return await recv_killQuery(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_killQuery(global::Nebula.Meta.KillQueryReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("killQuery", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1500 = new InternalStructs.killQuery_args() {
          Req = req,
        };
        
        await tmp1500.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_killQuery(CancellationToken cancellationToken = default)
      {
        
        var tmp1501 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1501.Type == TMessageType.Exception)
        {
          var tmp1502 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1502;
        }

        var tmp1503 = new InternalStructs.killQuery_result();
        await tmp1503.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1503.__isset.success)
        {
          return tmp1503.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "killQuery failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> reportTaskFinish(global::Nebula.Meta.ReportTaskReq req, CancellationToken cancellationToken = default)
      {
        await send_reportTaskFinish(req, cancellationToken);
        return await recv_reportTaskFinish(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_reportTaskFinish(global::Nebula.Meta.ReportTaskReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("reportTaskFinish", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1504 = new InternalStructs.reportTaskFinish_args() {
          Req = req,
        };
        
        await tmp1504.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ExecResp> recv_reportTaskFinish(CancellationToken cancellationToken = default)
      {
        
        var tmp1505 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1505.Type == TMessageType.Exception)
        {
          var tmp1506 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1506;
        }

        var tmp1507 = new InternalStructs.reportTaskFinish_result();
        await tmp1507.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1507.__isset.success)
        {
          return tmp1507.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reportTaskFinish failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListClusterInfoResp> listCluster(global::Nebula.Meta.ListClusterInfoReq req, CancellationToken cancellationToken = default)
      {
        await send_listCluster(req, cancellationToken);
        return await recv_listCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listCluster(global::Nebula.Meta.ListClusterInfoReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1508 = new InternalStructs.listCluster_args() {
          Req = req,
        };
        
        await tmp1508.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.ListClusterInfoResp> recv_listCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp1509 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1509.Type == TMessageType.Exception)
        {
          var tmp1510 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1510;
        }

        var tmp1511 = new InternalStructs.listCluster_result();
        await tmp1511.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1511.__isset.success)
        {
          return tmp1511.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetMetaDirInfoResp> getMetaDirInfo(global::Nebula.Meta.GetMetaDirInfoReq req, CancellationToken cancellationToken = default)
      {
        await send_getMetaDirInfo(req, cancellationToken);
        return await recv_getMetaDirInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getMetaDirInfo(global::Nebula.Meta.GetMetaDirInfoReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getMetaDirInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1512 = new InternalStructs.getMetaDirInfo_args() {
          Req = req,
        };
        
        await tmp1512.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.GetMetaDirInfoResp> recv_getMetaDirInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp1513 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1513.Type == TMessageType.Exception)
        {
          var tmp1514 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1514;
        }

        var tmp1515 = new InternalStructs.getMetaDirInfo_result();
        await tmp1515.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1515.__isset.success)
        {
          return tmp1515.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMetaDirInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.VerifyClientVersionResp> verifyClientVersion(global::Nebula.Meta.VerifyClientVersionReq req, CancellationToken cancellationToken = default)
      {
        await send_verifyClientVersion(req, cancellationToken);
        return await recv_verifyClientVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_verifyClientVersion(global::Nebula.Meta.VerifyClientVersionReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("verifyClientVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1516 = new InternalStructs.verifyClientVersion_args() {
          Req = req,
        };
        
        await tmp1516.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Meta.VerifyClientVersionResp> recv_verifyClientVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp1517 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1517.Type == TMessageType.Exception)
        {
          var tmp1518 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1518;
        }

        var tmp1519 = new InternalStructs.verifyClientVersion_result();
        await tmp1519.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1519.__isset.success)
        {
          return tmp1519.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyClientVersion failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["createSpace"] = createSpace_ProcessAsync;
        processMap_["dropSpace"] = dropSpace_ProcessAsync;
        processMap_["getSpace"] = getSpace_ProcessAsync;
        processMap_["listSpaces"] = listSpaces_ProcessAsync;
        processMap_["createSpaceAs"] = createSpaceAs_ProcessAsync;
        processMap_["createTag"] = createTag_ProcessAsync;
        processMap_["alterTag"] = alterTag_ProcessAsync;
        processMap_["dropTag"] = dropTag_ProcessAsync;
        processMap_["getTag"] = getTag_ProcessAsync;
        processMap_["listTags"] = listTags_ProcessAsync;
        processMap_["createEdge"] = createEdge_ProcessAsync;
        processMap_["alterEdge"] = alterEdge_ProcessAsync;
        processMap_["dropEdge"] = dropEdge_ProcessAsync;
        processMap_["getEdge"] = getEdge_ProcessAsync;
        processMap_["listEdges"] = listEdges_ProcessAsync;
        processMap_["listHosts"] = listHosts_ProcessAsync;
        processMap_["getPartsAlloc"] = getPartsAlloc_ProcessAsync;
        processMap_["listParts"] = listParts_ProcessAsync;
        processMap_["multiPut"] = multiPut_ProcessAsync;
        processMap_["get"] = get_ProcessAsync;
        processMap_["multiGet"] = multiGet_ProcessAsync;
        processMap_["remove"] = remove_ProcessAsync;
        processMap_["removeRange"] = removeRange_ProcessAsync;
        processMap_["scan"] = scan_ProcessAsync;
        processMap_["createTagIndex"] = createTagIndex_ProcessAsync;
        processMap_["dropTagIndex"] = dropTagIndex_ProcessAsync;
        processMap_["getTagIndex"] = getTagIndex_ProcessAsync;
        processMap_["listTagIndexes"] = listTagIndexes_ProcessAsync;
        processMap_["rebuildTagIndex"] = rebuildTagIndex_ProcessAsync;
        processMap_["listTagIndexStatus"] = listTagIndexStatus_ProcessAsync;
        processMap_["createEdgeIndex"] = createEdgeIndex_ProcessAsync;
        processMap_["dropEdgeIndex"] = dropEdgeIndex_ProcessAsync;
        processMap_["getEdgeIndex"] = getEdgeIndex_ProcessAsync;
        processMap_["listEdgeIndexes"] = listEdgeIndexes_ProcessAsync;
        processMap_["rebuildEdgeIndex"] = rebuildEdgeIndex_ProcessAsync;
        processMap_["listEdgeIndexStatus"] = listEdgeIndexStatus_ProcessAsync;
        processMap_["createUser"] = createUser_ProcessAsync;
        processMap_["dropUser"] = dropUser_ProcessAsync;
        processMap_["alterUser"] = alterUser_ProcessAsync;
        processMap_["grantRole"] = grantRole_ProcessAsync;
        processMap_["revokeRole"] = revokeRole_ProcessAsync;
        processMap_["listUsers"] = listUsers_ProcessAsync;
        processMap_["listRoles"] = listRoles_ProcessAsync;
        processMap_["getUserRoles"] = getUserRoles_ProcessAsync;
        processMap_["changePassword"] = changePassword_ProcessAsync;
        processMap_["heartBeat"] = heartBeat_ProcessAsync;
        processMap_["balance"] = balance_ProcessAsync;
        processMap_["leaderBalance"] = leaderBalance_ProcessAsync;
        processMap_["regConfig"] = regConfig_ProcessAsync;
        processMap_["getConfig"] = getConfig_ProcessAsync;
        processMap_["setConfig"] = setConfig_ProcessAsync;
        processMap_["listConfigs"] = listConfigs_ProcessAsync;
        processMap_["createSnapshot"] = createSnapshot_ProcessAsync;
        processMap_["dropSnapshot"] = dropSnapshot_ProcessAsync;
        processMap_["listSnapshots"] = listSnapshots_ProcessAsync;
        processMap_["runAdminJob"] = runAdminJob_ProcessAsync;
        processMap_["addZone"] = addZone_ProcessAsync;
        processMap_["dropZone"] = dropZone_ProcessAsync;
        processMap_["addHostIntoZone"] = addHostIntoZone_ProcessAsync;
        processMap_["dropHostFromZone"] = dropHostFromZone_ProcessAsync;
        processMap_["getZone"] = getZone_ProcessAsync;
        processMap_["listZones"] = listZones_ProcessAsync;
        processMap_["addGroup"] = addGroup_ProcessAsync;
        processMap_["dropGroup"] = dropGroup_ProcessAsync;
        processMap_["addZoneIntoGroup"] = addZoneIntoGroup_ProcessAsync;
        processMap_["dropZoneFromGroup"] = dropZoneFromGroup_ProcessAsync;
        processMap_["getGroup"] = getGroup_ProcessAsync;
        processMap_["listGroups"] = listGroups_ProcessAsync;
        processMap_["createBackup"] = createBackup_ProcessAsync;
        processMap_["restoreMeta"] = restoreMeta_ProcessAsync;
        processMap_["addListener"] = addListener_ProcessAsync;
        processMap_["removeListener"] = removeListener_ProcessAsync;
        processMap_["listListener"] = listListener_ProcessAsync;
        processMap_["getStats"] = getStats_ProcessAsync;
        processMap_["signInFTService"] = signInFTService_ProcessAsync;
        processMap_["signOutFTService"] = signOutFTService_ProcessAsync;
        processMap_["listFTClients"] = listFTClients_ProcessAsync;
        processMap_["createFTIndex"] = createFTIndex_ProcessAsync;
        processMap_["dropFTIndex"] = dropFTIndex_ProcessAsync;
        processMap_["listFTIndexes"] = listFTIndexes_ProcessAsync;
        processMap_["createSession"] = createSession_ProcessAsync;
        processMap_["updateSessions"] = updateSessions_ProcessAsync;
        processMap_["listSessions"] = listSessions_ProcessAsync;
        processMap_["getSession"] = getSession_ProcessAsync;
        processMap_["removeSession"] = removeSession_ProcessAsync;
        processMap_["killQuery"] = killQuery_ProcessAsync;
        processMap_["reportTaskFinish"] = reportTaskFinish_ProcessAsync;
        processMap_["listCluster"] = listCluster_ProcessAsync;
        processMap_["getMetaDirInfo"] = getMetaDirInfo_ProcessAsync;
        processMap_["verifyClientVersion"] = verifyClientVersion_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task createSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1520 = new InternalStructs.createSpace_args();
        await tmp1520.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1521 = new InternalStructs.createSpace_result();
        try
        {
          tmp1521.Success = await _iAsync.createSpace(tmp1520.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1521.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1522)
        {
          var tmp1523 = $"Error occurred in {GetType().FullName}: {tmp1522.Message}";
          if(_logger != null)
            _logger.LogError(tmp1522, tmp1523);
          else
            Console.Error.WriteLine(tmp1523);
          var tmp1524 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp1524.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1525 = new InternalStructs.dropSpace_args();
        await tmp1525.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1526 = new InternalStructs.dropSpace_result();
        try
        {
          tmp1526.Success = await _iAsync.dropSpace(tmp1525.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1526.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1527)
        {
          var tmp1528 = $"Error occurred in {GetType().FullName}: {tmp1527.Message}";
          if(_logger != null)
            _logger.LogError(tmp1527, tmp1528);
          else
            Console.Error.WriteLine(tmp1528);
          var tmp1529 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp1529.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1530 = new InternalStructs.getSpace_args();
        await tmp1530.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1531 = new InternalStructs.getSpace_result();
        try
        {
          tmp1531.Success = await _iAsync.getSpace(tmp1530.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1531.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1532)
        {
          var tmp1533 = $"Error occurred in {GetType().FullName}: {tmp1532.Message}";
          if(_logger != null)
            _logger.LogError(tmp1532, tmp1533);
          else
            Console.Error.WriteLine(tmp1533);
          var tmp1534 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp1534.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listSpaces_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1535 = new InternalStructs.listSpaces_args();
        await tmp1535.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1536 = new InternalStructs.listSpaces_result();
        try
        {
          tmp1536.Success = await _iAsync.listSpaces(tmp1535.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listSpaces", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1536.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1537)
        {
          var tmp1538 = $"Error occurred in {GetType().FullName}: {tmp1537.Message}";
          if(_logger != null)
            _logger.LogError(tmp1537, tmp1538);
          else
            Console.Error.WriteLine(tmp1538);
          var tmp1539 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listSpaces", TMessageType.Exception, seqid), cancellationToken);
          await tmp1539.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createSpaceAs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1540 = new InternalStructs.createSpaceAs_args();
        await tmp1540.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1541 = new InternalStructs.createSpaceAs_result();
        try
        {
          tmp1541.Success = await _iAsync.createSpaceAs(tmp1540.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createSpaceAs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1541.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1542)
        {
          var tmp1543 = $"Error occurred in {GetType().FullName}: {tmp1542.Message}";
          if(_logger != null)
            _logger.LogError(tmp1542, tmp1543);
          else
            Console.Error.WriteLine(tmp1543);
          var tmp1544 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createSpaceAs", TMessageType.Exception, seqid), cancellationToken);
          await tmp1544.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createTag_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1545 = new InternalStructs.createTag_args();
        await tmp1545.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1546 = new InternalStructs.createTag_result();
        try
        {
          tmp1546.Success = await _iAsync.createTag(tmp1545.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createTag", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1546.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1547)
        {
          var tmp1548 = $"Error occurred in {GetType().FullName}: {tmp1547.Message}";
          if(_logger != null)
            _logger.LogError(tmp1547, tmp1548);
          else
            Console.Error.WriteLine(tmp1548);
          var tmp1549 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createTag", TMessageType.Exception, seqid), cancellationToken);
          await tmp1549.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task alterTag_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1550 = new InternalStructs.alterTag_args();
        await tmp1550.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1551 = new InternalStructs.alterTag_result();
        try
        {
          tmp1551.Success = await _iAsync.alterTag(tmp1550.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("alterTag", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1551.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1552)
        {
          var tmp1553 = $"Error occurred in {GetType().FullName}: {tmp1552.Message}";
          if(_logger != null)
            _logger.LogError(tmp1552, tmp1553);
          else
            Console.Error.WriteLine(tmp1553);
          var tmp1554 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("alterTag", TMessageType.Exception, seqid), cancellationToken);
          await tmp1554.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropTag_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1555 = new InternalStructs.dropTag_args();
        await tmp1555.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1556 = new InternalStructs.dropTag_result();
        try
        {
          tmp1556.Success = await _iAsync.dropTag(tmp1555.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropTag", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1556.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1557)
        {
          var tmp1558 = $"Error occurred in {GetType().FullName}: {tmp1557.Message}";
          if(_logger != null)
            _logger.LogError(tmp1557, tmp1558);
          else
            Console.Error.WriteLine(tmp1558);
          var tmp1559 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropTag", TMessageType.Exception, seqid), cancellationToken);
          await tmp1559.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getTag_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1560 = new InternalStructs.getTag_args();
        await tmp1560.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1561 = new InternalStructs.getTag_result();
        try
        {
          tmp1561.Success = await _iAsync.getTag(tmp1560.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getTag", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1561.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1562)
        {
          var tmp1563 = $"Error occurred in {GetType().FullName}: {tmp1562.Message}";
          if(_logger != null)
            _logger.LogError(tmp1562, tmp1563);
          else
            Console.Error.WriteLine(tmp1563);
          var tmp1564 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTag", TMessageType.Exception, seqid), cancellationToken);
          await tmp1564.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listTags_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1565 = new InternalStructs.listTags_args();
        await tmp1565.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1566 = new InternalStructs.listTags_result();
        try
        {
          tmp1566.Success = await _iAsync.listTags(tmp1565.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listTags", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1566.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1567)
        {
          var tmp1568 = $"Error occurred in {GetType().FullName}: {tmp1567.Message}";
          if(_logger != null)
            _logger.LogError(tmp1567, tmp1568);
          else
            Console.Error.WriteLine(tmp1568);
          var tmp1569 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listTags", TMessageType.Exception, seqid), cancellationToken);
          await tmp1569.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createEdge_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1570 = new InternalStructs.createEdge_args();
        await tmp1570.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1571 = new InternalStructs.createEdge_result();
        try
        {
          tmp1571.Success = await _iAsync.createEdge(tmp1570.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createEdge", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1571.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1572)
        {
          var tmp1573 = $"Error occurred in {GetType().FullName}: {tmp1572.Message}";
          if(_logger != null)
            _logger.LogError(tmp1572, tmp1573);
          else
            Console.Error.WriteLine(tmp1573);
          var tmp1574 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createEdge", TMessageType.Exception, seqid), cancellationToken);
          await tmp1574.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task alterEdge_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1575 = new InternalStructs.alterEdge_args();
        await tmp1575.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1576 = new InternalStructs.alterEdge_result();
        try
        {
          tmp1576.Success = await _iAsync.alterEdge(tmp1575.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("alterEdge", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1576.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1577)
        {
          var tmp1578 = $"Error occurred in {GetType().FullName}: {tmp1577.Message}";
          if(_logger != null)
            _logger.LogError(tmp1577, tmp1578);
          else
            Console.Error.WriteLine(tmp1578);
          var tmp1579 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("alterEdge", TMessageType.Exception, seqid), cancellationToken);
          await tmp1579.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropEdge_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1580 = new InternalStructs.dropEdge_args();
        await tmp1580.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1581 = new InternalStructs.dropEdge_result();
        try
        {
          tmp1581.Success = await _iAsync.dropEdge(tmp1580.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropEdge", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1581.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1582)
        {
          var tmp1583 = $"Error occurred in {GetType().FullName}: {tmp1582.Message}";
          if(_logger != null)
            _logger.LogError(tmp1582, tmp1583);
          else
            Console.Error.WriteLine(tmp1583);
          var tmp1584 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropEdge", TMessageType.Exception, seqid), cancellationToken);
          await tmp1584.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getEdge_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1585 = new InternalStructs.getEdge_args();
        await tmp1585.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1586 = new InternalStructs.getEdge_result();
        try
        {
          tmp1586.Success = await _iAsync.getEdge(tmp1585.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getEdge", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1586.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1587)
        {
          var tmp1588 = $"Error occurred in {GetType().FullName}: {tmp1587.Message}";
          if(_logger != null)
            _logger.LogError(tmp1587, tmp1588);
          else
            Console.Error.WriteLine(tmp1588);
          var tmp1589 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getEdge", TMessageType.Exception, seqid), cancellationToken);
          await tmp1589.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listEdges_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1590 = new InternalStructs.listEdges_args();
        await tmp1590.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1591 = new InternalStructs.listEdges_result();
        try
        {
          tmp1591.Success = await _iAsync.listEdges(tmp1590.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listEdges", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1591.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1592)
        {
          var tmp1593 = $"Error occurred in {GetType().FullName}: {tmp1592.Message}";
          if(_logger != null)
            _logger.LogError(tmp1592, tmp1593);
          else
            Console.Error.WriteLine(tmp1593);
          var tmp1594 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listEdges", TMessageType.Exception, seqid), cancellationToken);
          await tmp1594.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listHosts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1595 = new InternalStructs.listHosts_args();
        await tmp1595.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1596 = new InternalStructs.listHosts_result();
        try
        {
          tmp1596.Success = await _iAsync.listHosts(tmp1595.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listHosts", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1596.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1597)
        {
          var tmp1598 = $"Error occurred in {GetType().FullName}: {tmp1597.Message}";
          if(_logger != null)
            _logger.LogError(tmp1597, tmp1598);
          else
            Console.Error.WriteLine(tmp1598);
          var tmp1599 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listHosts", TMessageType.Exception, seqid), cancellationToken);
          await tmp1599.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getPartsAlloc_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1600 = new InternalStructs.getPartsAlloc_args();
        await tmp1600.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1601 = new InternalStructs.getPartsAlloc_result();
        try
        {
          tmp1601.Success = await _iAsync.getPartsAlloc(tmp1600.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getPartsAlloc", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1601.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1602)
        {
          var tmp1603 = $"Error occurred in {GetType().FullName}: {tmp1602.Message}";
          if(_logger != null)
            _logger.LogError(tmp1602, tmp1603);
          else
            Console.Error.WriteLine(tmp1603);
          var tmp1604 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getPartsAlloc", TMessageType.Exception, seqid), cancellationToken);
          await tmp1604.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listParts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1605 = new InternalStructs.listParts_args();
        await tmp1605.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1606 = new InternalStructs.listParts_result();
        try
        {
          tmp1606.Success = await _iAsync.listParts(tmp1605.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listParts", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1606.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1607)
        {
          var tmp1608 = $"Error occurred in {GetType().FullName}: {tmp1607.Message}";
          if(_logger != null)
            _logger.LogError(tmp1607, tmp1608);
          else
            Console.Error.WriteLine(tmp1608);
          var tmp1609 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listParts", TMessageType.Exception, seqid), cancellationToken);
          await tmp1609.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task multiPut_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1610 = new InternalStructs.multiPut_args();
        await tmp1610.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1611 = new InternalStructs.multiPut_result();
        try
        {
          tmp1611.Success = await _iAsync.multiPut(tmp1610.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("multiPut", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1611.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1612)
        {
          var tmp1613 = $"Error occurred in {GetType().FullName}: {tmp1612.Message}";
          if(_logger != null)
            _logger.LogError(tmp1612, tmp1613);
          else
            Console.Error.WriteLine(tmp1613);
          var tmp1614 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("multiPut", TMessageType.Exception, seqid), cancellationToken);
          await tmp1614.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task get_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1615 = new InternalStructs.get_args();
        await tmp1615.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1616 = new InternalStructs.get_result();
        try
        {
          tmp1616.Success = await _iAsync.@get(tmp1615.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("get", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1616.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1617)
        {
          var tmp1618 = $"Error occurred in {GetType().FullName}: {tmp1617.Message}";
          if(_logger != null)
            _logger.LogError(tmp1617, tmp1618);
          else
            Console.Error.WriteLine(tmp1618);
          var tmp1619 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("get", TMessageType.Exception, seqid), cancellationToken);
          await tmp1619.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task multiGet_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1620 = new InternalStructs.multiGet_args();
        await tmp1620.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1621 = new InternalStructs.multiGet_result();
        try
        {
          tmp1621.Success = await _iAsync.multiGet(tmp1620.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("multiGet", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1621.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1622)
        {
          var tmp1623 = $"Error occurred in {GetType().FullName}: {tmp1622.Message}";
          if(_logger != null)
            _logger.LogError(tmp1622, tmp1623);
          else
            Console.Error.WriteLine(tmp1623);
          var tmp1624 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("multiGet", TMessageType.Exception, seqid), cancellationToken);
          await tmp1624.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task remove_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1625 = new InternalStructs.remove_args();
        await tmp1625.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1626 = new InternalStructs.remove_result();
        try
        {
          tmp1626.Success = await _iAsync.@remove(tmp1625.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("remove", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1626.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1627)
        {
          var tmp1628 = $"Error occurred in {GetType().FullName}: {tmp1627.Message}";
          if(_logger != null)
            _logger.LogError(tmp1627, tmp1628);
          else
            Console.Error.WriteLine(tmp1628);
          var tmp1629 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("remove", TMessageType.Exception, seqid), cancellationToken);
          await tmp1629.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeRange_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1630 = new InternalStructs.removeRange_args();
        await tmp1630.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1631 = new InternalStructs.removeRange_result();
        try
        {
          tmp1631.Success = await _iAsync.removeRange(tmp1630.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("removeRange", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1631.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1632)
        {
          var tmp1633 = $"Error occurred in {GetType().FullName}: {tmp1632.Message}";
          if(_logger != null)
            _logger.LogError(tmp1632, tmp1633);
          else
            Console.Error.WriteLine(tmp1633);
          var tmp1634 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeRange", TMessageType.Exception, seqid), cancellationToken);
          await tmp1634.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task scan_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1635 = new InternalStructs.scan_args();
        await tmp1635.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1636 = new InternalStructs.scan_result();
        try
        {
          tmp1636.Success = await _iAsync.scan(tmp1635.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1636.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1637)
        {
          var tmp1638 = $"Error occurred in {GetType().FullName}: {tmp1637.Message}";
          if(_logger != null)
            _logger.LogError(tmp1637, tmp1638);
          else
            Console.Error.WriteLine(tmp1638);
          var tmp1639 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Exception, seqid), cancellationToken);
          await tmp1639.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createTagIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1640 = new InternalStructs.createTagIndex_args();
        await tmp1640.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1641 = new InternalStructs.createTagIndex_result();
        try
        {
          tmp1641.Success = await _iAsync.createTagIndex(tmp1640.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createTagIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1641.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1642)
        {
          var tmp1643 = $"Error occurred in {GetType().FullName}: {tmp1642.Message}";
          if(_logger != null)
            _logger.LogError(tmp1642, tmp1643);
          else
            Console.Error.WriteLine(tmp1643);
          var tmp1644 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createTagIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1644.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropTagIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1645 = new InternalStructs.dropTagIndex_args();
        await tmp1645.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1646 = new InternalStructs.dropTagIndex_result();
        try
        {
          tmp1646.Success = await _iAsync.dropTagIndex(tmp1645.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropTagIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1646.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1647)
        {
          var tmp1648 = $"Error occurred in {GetType().FullName}: {tmp1647.Message}";
          if(_logger != null)
            _logger.LogError(tmp1647, tmp1648);
          else
            Console.Error.WriteLine(tmp1648);
          var tmp1649 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropTagIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1649.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getTagIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1650 = new InternalStructs.getTagIndex_args();
        await tmp1650.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1651 = new InternalStructs.getTagIndex_result();
        try
        {
          tmp1651.Success = await _iAsync.getTagIndex(tmp1650.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getTagIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1651.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1652)
        {
          var tmp1653 = $"Error occurred in {GetType().FullName}: {tmp1652.Message}";
          if(_logger != null)
            _logger.LogError(tmp1652, tmp1653);
          else
            Console.Error.WriteLine(tmp1653);
          var tmp1654 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTagIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1654.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listTagIndexes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1655 = new InternalStructs.listTagIndexes_args();
        await tmp1655.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1656 = new InternalStructs.listTagIndexes_result();
        try
        {
          tmp1656.Success = await _iAsync.listTagIndexes(tmp1655.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listTagIndexes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1656.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1657)
        {
          var tmp1658 = $"Error occurred in {GetType().FullName}: {tmp1657.Message}";
          if(_logger != null)
            _logger.LogError(tmp1657, tmp1658);
          else
            Console.Error.WriteLine(tmp1658);
          var tmp1659 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listTagIndexes", TMessageType.Exception, seqid), cancellationToken);
          await tmp1659.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task rebuildTagIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1660 = new InternalStructs.rebuildTagIndex_args();
        await tmp1660.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1661 = new InternalStructs.rebuildTagIndex_result();
        try
        {
          tmp1661.Success = await _iAsync.rebuildTagIndex(tmp1660.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("rebuildTagIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1661.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1662)
        {
          var tmp1663 = $"Error occurred in {GetType().FullName}: {tmp1662.Message}";
          if(_logger != null)
            _logger.LogError(tmp1662, tmp1663);
          else
            Console.Error.WriteLine(tmp1663);
          var tmp1664 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("rebuildTagIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1664.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listTagIndexStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1665 = new InternalStructs.listTagIndexStatus_args();
        await tmp1665.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1666 = new InternalStructs.listTagIndexStatus_result();
        try
        {
          tmp1666.Success = await _iAsync.listTagIndexStatus(tmp1665.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listTagIndexStatus", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1666.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1667)
        {
          var tmp1668 = $"Error occurred in {GetType().FullName}: {tmp1667.Message}";
          if(_logger != null)
            _logger.LogError(tmp1667, tmp1668);
          else
            Console.Error.WriteLine(tmp1668);
          var tmp1669 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listTagIndexStatus", TMessageType.Exception, seqid), cancellationToken);
          await tmp1669.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createEdgeIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1670 = new InternalStructs.createEdgeIndex_args();
        await tmp1670.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1671 = new InternalStructs.createEdgeIndex_result();
        try
        {
          tmp1671.Success = await _iAsync.createEdgeIndex(tmp1670.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createEdgeIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1671.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1672)
        {
          var tmp1673 = $"Error occurred in {GetType().FullName}: {tmp1672.Message}";
          if(_logger != null)
            _logger.LogError(tmp1672, tmp1673);
          else
            Console.Error.WriteLine(tmp1673);
          var tmp1674 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createEdgeIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1674.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropEdgeIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1675 = new InternalStructs.dropEdgeIndex_args();
        await tmp1675.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1676 = new InternalStructs.dropEdgeIndex_result();
        try
        {
          tmp1676.Success = await _iAsync.dropEdgeIndex(tmp1675.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropEdgeIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1676.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1677)
        {
          var tmp1678 = $"Error occurred in {GetType().FullName}: {tmp1677.Message}";
          if(_logger != null)
            _logger.LogError(tmp1677, tmp1678);
          else
            Console.Error.WriteLine(tmp1678);
          var tmp1679 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropEdgeIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1679.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getEdgeIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1680 = new InternalStructs.getEdgeIndex_args();
        await tmp1680.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1681 = new InternalStructs.getEdgeIndex_result();
        try
        {
          tmp1681.Success = await _iAsync.getEdgeIndex(tmp1680.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getEdgeIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1681.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1682)
        {
          var tmp1683 = $"Error occurred in {GetType().FullName}: {tmp1682.Message}";
          if(_logger != null)
            _logger.LogError(tmp1682, tmp1683);
          else
            Console.Error.WriteLine(tmp1683);
          var tmp1684 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getEdgeIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1684.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listEdgeIndexes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1685 = new InternalStructs.listEdgeIndexes_args();
        await tmp1685.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1686 = new InternalStructs.listEdgeIndexes_result();
        try
        {
          tmp1686.Success = await _iAsync.listEdgeIndexes(tmp1685.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listEdgeIndexes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1686.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1687)
        {
          var tmp1688 = $"Error occurred in {GetType().FullName}: {tmp1687.Message}";
          if(_logger != null)
            _logger.LogError(tmp1687, tmp1688);
          else
            Console.Error.WriteLine(tmp1688);
          var tmp1689 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listEdgeIndexes", TMessageType.Exception, seqid), cancellationToken);
          await tmp1689.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task rebuildEdgeIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1690 = new InternalStructs.rebuildEdgeIndex_args();
        await tmp1690.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1691 = new InternalStructs.rebuildEdgeIndex_result();
        try
        {
          tmp1691.Success = await _iAsync.rebuildEdgeIndex(tmp1690.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("rebuildEdgeIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1691.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1692)
        {
          var tmp1693 = $"Error occurred in {GetType().FullName}: {tmp1692.Message}";
          if(_logger != null)
            _logger.LogError(tmp1692, tmp1693);
          else
            Console.Error.WriteLine(tmp1693);
          var tmp1694 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("rebuildEdgeIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1694.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listEdgeIndexStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1695 = new InternalStructs.listEdgeIndexStatus_args();
        await tmp1695.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1696 = new InternalStructs.listEdgeIndexStatus_result();
        try
        {
          tmp1696.Success = await _iAsync.listEdgeIndexStatus(tmp1695.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listEdgeIndexStatus", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1696.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1697)
        {
          var tmp1698 = $"Error occurred in {GetType().FullName}: {tmp1697.Message}";
          if(_logger != null)
            _logger.LogError(tmp1697, tmp1698);
          else
            Console.Error.WriteLine(tmp1698);
          var tmp1699 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listEdgeIndexStatus", TMessageType.Exception, seqid), cancellationToken);
          await tmp1699.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1700 = new InternalStructs.createUser_args();
        await tmp1700.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1701 = new InternalStructs.createUser_result();
        try
        {
          tmp1701.Success = await _iAsync.createUser(tmp1700.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createUser", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1701.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1702)
        {
          var tmp1703 = $"Error occurred in {GetType().FullName}: {tmp1702.Message}";
          if(_logger != null)
            _logger.LogError(tmp1702, tmp1703);
          else
            Console.Error.WriteLine(tmp1703);
          var tmp1704 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createUser", TMessageType.Exception, seqid), cancellationToken);
          await tmp1704.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1705 = new InternalStructs.dropUser_args();
        await tmp1705.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1706 = new InternalStructs.dropUser_result();
        try
        {
          tmp1706.Success = await _iAsync.dropUser(tmp1705.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropUser", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1706.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1707)
        {
          var tmp1708 = $"Error occurred in {GetType().FullName}: {tmp1707.Message}";
          if(_logger != null)
            _logger.LogError(tmp1707, tmp1708);
          else
            Console.Error.WriteLine(tmp1708);
          var tmp1709 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropUser", TMessageType.Exception, seqid), cancellationToken);
          await tmp1709.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task alterUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1710 = new InternalStructs.alterUser_args();
        await tmp1710.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1711 = new InternalStructs.alterUser_result();
        try
        {
          tmp1711.Success = await _iAsync.alterUser(tmp1710.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("alterUser", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1711.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1712)
        {
          var tmp1713 = $"Error occurred in {GetType().FullName}: {tmp1712.Message}";
          if(_logger != null)
            _logger.LogError(tmp1712, tmp1713);
          else
            Console.Error.WriteLine(tmp1713);
          var tmp1714 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("alterUser", TMessageType.Exception, seqid), cancellationToken);
          await tmp1714.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task grantRole_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1715 = new InternalStructs.grantRole_args();
        await tmp1715.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1716 = new InternalStructs.grantRole_result();
        try
        {
          tmp1716.Success = await _iAsync.grantRole(tmp1715.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("grantRole", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1716.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1717)
        {
          var tmp1718 = $"Error occurred in {GetType().FullName}: {tmp1717.Message}";
          if(_logger != null)
            _logger.LogError(tmp1717, tmp1718);
          else
            Console.Error.WriteLine(tmp1718);
          var tmp1719 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("grantRole", TMessageType.Exception, seqid), cancellationToken);
          await tmp1719.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task revokeRole_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1720 = new InternalStructs.revokeRole_args();
        await tmp1720.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1721 = new InternalStructs.revokeRole_result();
        try
        {
          tmp1721.Success = await _iAsync.revokeRole(tmp1720.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("revokeRole", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1721.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1722)
        {
          var tmp1723 = $"Error occurred in {GetType().FullName}: {tmp1722.Message}";
          if(_logger != null)
            _logger.LogError(tmp1722, tmp1723);
          else
            Console.Error.WriteLine(tmp1723);
          var tmp1724 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("revokeRole", TMessageType.Exception, seqid), cancellationToken);
          await tmp1724.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listUsers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1725 = new InternalStructs.listUsers_args();
        await tmp1725.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1726 = new InternalStructs.listUsers_result();
        try
        {
          tmp1726.Success = await _iAsync.listUsers(tmp1725.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listUsers", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1726.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1727)
        {
          var tmp1728 = $"Error occurred in {GetType().FullName}: {tmp1727.Message}";
          if(_logger != null)
            _logger.LogError(tmp1727, tmp1728);
          else
            Console.Error.WriteLine(tmp1728);
          var tmp1729 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listUsers", TMessageType.Exception, seqid), cancellationToken);
          await tmp1729.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listRoles_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1730 = new InternalStructs.listRoles_args();
        await tmp1730.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1731 = new InternalStructs.listRoles_result();
        try
        {
          tmp1731.Success = await _iAsync.listRoles(tmp1730.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listRoles", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1731.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1732)
        {
          var tmp1733 = $"Error occurred in {GetType().FullName}: {tmp1732.Message}";
          if(_logger != null)
            _logger.LogError(tmp1732, tmp1733);
          else
            Console.Error.WriteLine(tmp1733);
          var tmp1734 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listRoles", TMessageType.Exception, seqid), cancellationToken);
          await tmp1734.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getUserRoles_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1735 = new InternalStructs.getUserRoles_args();
        await tmp1735.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1736 = new InternalStructs.getUserRoles_result();
        try
        {
          tmp1736.Success = await _iAsync.getUserRoles(tmp1735.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getUserRoles", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1736.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1737)
        {
          var tmp1738 = $"Error occurred in {GetType().FullName}: {tmp1737.Message}";
          if(_logger != null)
            _logger.LogError(tmp1737, tmp1738);
          else
            Console.Error.WriteLine(tmp1738);
          var tmp1739 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getUserRoles", TMessageType.Exception, seqid), cancellationToken);
          await tmp1739.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task changePassword_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1740 = new InternalStructs.changePassword_args();
        await tmp1740.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1741 = new InternalStructs.changePassword_result();
        try
        {
          tmp1741.Success = await _iAsync.changePassword(tmp1740.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("changePassword", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1741.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1742)
        {
          var tmp1743 = $"Error occurred in {GetType().FullName}: {tmp1742.Message}";
          if(_logger != null)
            _logger.LogError(tmp1742, tmp1743);
          else
            Console.Error.WriteLine(tmp1743);
          var tmp1744 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("changePassword", TMessageType.Exception, seqid), cancellationToken);
          await tmp1744.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task heartBeat_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1745 = new InternalStructs.heartBeat_args();
        await tmp1745.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1746 = new InternalStructs.heartBeat_result();
        try
        {
          tmp1746.Success = await _iAsync.heartBeat(tmp1745.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("heartBeat", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1746.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1747)
        {
          var tmp1748 = $"Error occurred in {GetType().FullName}: {tmp1747.Message}";
          if(_logger != null)
            _logger.LogError(tmp1747, tmp1748);
          else
            Console.Error.WriteLine(tmp1748);
          var tmp1749 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("heartBeat", TMessageType.Exception, seqid), cancellationToken);
          await tmp1749.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task balance_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1750 = new InternalStructs.balance_args();
        await tmp1750.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1751 = new InternalStructs.balance_result();
        try
        {
          tmp1751.Success = await _iAsync.balance(tmp1750.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("balance", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1751.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1752)
        {
          var tmp1753 = $"Error occurred in {GetType().FullName}: {tmp1752.Message}";
          if(_logger != null)
            _logger.LogError(tmp1752, tmp1753);
          else
            Console.Error.WriteLine(tmp1753);
          var tmp1754 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("balance", TMessageType.Exception, seqid), cancellationToken);
          await tmp1754.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task leaderBalance_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1755 = new InternalStructs.leaderBalance_args();
        await tmp1755.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1756 = new InternalStructs.leaderBalance_result();
        try
        {
          tmp1756.Success = await _iAsync.leaderBalance(tmp1755.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("leaderBalance", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1756.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1757)
        {
          var tmp1758 = $"Error occurred in {GetType().FullName}: {tmp1757.Message}";
          if(_logger != null)
            _logger.LogError(tmp1757, tmp1758);
          else
            Console.Error.WriteLine(tmp1758);
          var tmp1759 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("leaderBalance", TMessageType.Exception, seqid), cancellationToken);
          await tmp1759.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task regConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1760 = new InternalStructs.regConfig_args();
        await tmp1760.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1761 = new InternalStructs.regConfig_result();
        try
        {
          tmp1761.Success = await _iAsync.regConfig(tmp1760.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("regConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1761.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1762)
        {
          var tmp1763 = $"Error occurred in {GetType().FullName}: {tmp1762.Message}";
          if(_logger != null)
            _logger.LogError(tmp1762, tmp1763);
          else
            Console.Error.WriteLine(tmp1763);
          var tmp1764 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("regConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1764.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1765 = new InternalStructs.getConfig_args();
        await tmp1765.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1766 = new InternalStructs.getConfig_result();
        try
        {
          tmp1766.Success = await _iAsync.getConfig(tmp1765.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1766.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1767)
        {
          var tmp1768 = $"Error occurred in {GetType().FullName}: {tmp1767.Message}";
          if(_logger != null)
            _logger.LogError(tmp1767, tmp1768);
          else
            Console.Error.WriteLine(tmp1768);
          var tmp1769 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1769.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1770 = new InternalStructs.setConfig_args();
        await tmp1770.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1771 = new InternalStructs.setConfig_result();
        try
        {
          tmp1771.Success = await _iAsync.setConfig(tmp1770.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1771.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1772)
        {
          var tmp1773 = $"Error occurred in {GetType().FullName}: {tmp1772.Message}";
          if(_logger != null)
            _logger.LogError(tmp1772, tmp1773);
          else
            Console.Error.WriteLine(tmp1773);
          var tmp1774 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp1774.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listConfigs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1775 = new InternalStructs.listConfigs_args();
        await tmp1775.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1776 = new InternalStructs.listConfigs_result();
        try
        {
          tmp1776.Success = await _iAsync.listConfigs(tmp1775.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listConfigs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1776.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1777)
        {
          var tmp1778 = $"Error occurred in {GetType().FullName}: {tmp1777.Message}";
          if(_logger != null)
            _logger.LogError(tmp1777, tmp1778);
          else
            Console.Error.WriteLine(tmp1778);
          var tmp1779 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listConfigs", TMessageType.Exception, seqid), cancellationToken);
          await tmp1779.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createSnapshot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1780 = new InternalStructs.createSnapshot_args();
        await tmp1780.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1781 = new InternalStructs.createSnapshot_result();
        try
        {
          tmp1781.Success = await _iAsync.createSnapshot(tmp1780.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createSnapshot", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1781.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1782)
        {
          var tmp1783 = $"Error occurred in {GetType().FullName}: {tmp1782.Message}";
          if(_logger != null)
            _logger.LogError(tmp1782, tmp1783);
          else
            Console.Error.WriteLine(tmp1783);
          var tmp1784 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createSnapshot", TMessageType.Exception, seqid), cancellationToken);
          await tmp1784.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropSnapshot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1785 = new InternalStructs.dropSnapshot_args();
        await tmp1785.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1786 = new InternalStructs.dropSnapshot_result();
        try
        {
          tmp1786.Success = await _iAsync.dropSnapshot(tmp1785.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropSnapshot", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1786.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1787)
        {
          var tmp1788 = $"Error occurred in {GetType().FullName}: {tmp1787.Message}";
          if(_logger != null)
            _logger.LogError(tmp1787, tmp1788);
          else
            Console.Error.WriteLine(tmp1788);
          var tmp1789 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropSnapshot", TMessageType.Exception, seqid), cancellationToken);
          await tmp1789.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listSnapshots_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1790 = new InternalStructs.listSnapshots_args();
        await tmp1790.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1791 = new InternalStructs.listSnapshots_result();
        try
        {
          tmp1791.Success = await _iAsync.listSnapshots(tmp1790.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listSnapshots", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1791.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1792)
        {
          var tmp1793 = $"Error occurred in {GetType().FullName}: {tmp1792.Message}";
          if(_logger != null)
            _logger.LogError(tmp1792, tmp1793);
          else
            Console.Error.WriteLine(tmp1793);
          var tmp1794 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listSnapshots", TMessageType.Exception, seqid), cancellationToken);
          await tmp1794.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task runAdminJob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1795 = new InternalStructs.runAdminJob_args();
        await tmp1795.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1796 = new InternalStructs.runAdminJob_result();
        try
        {
          tmp1796.Success = await _iAsync.runAdminJob(tmp1795.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("runAdminJob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1796.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1797)
        {
          var tmp1798 = $"Error occurred in {GetType().FullName}: {tmp1797.Message}";
          if(_logger != null)
            _logger.LogError(tmp1797, tmp1798);
          else
            Console.Error.WriteLine(tmp1798);
          var tmp1799 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("runAdminJob", TMessageType.Exception, seqid), cancellationToken);
          await tmp1799.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1800 = new InternalStructs.addZone_args();
        await tmp1800.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1801 = new InternalStructs.addZone_result();
        try
        {
          tmp1801.Success = await _iAsync.addZone(tmp1800.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1801.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1802)
        {
          var tmp1803 = $"Error occurred in {GetType().FullName}: {tmp1802.Message}";
          if(_logger != null)
            _logger.LogError(tmp1802, tmp1803);
          else
            Console.Error.WriteLine(tmp1803);
          var tmp1804 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp1804.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1805 = new InternalStructs.dropZone_args();
        await tmp1805.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1806 = new InternalStructs.dropZone_result();
        try
        {
          tmp1806.Success = await _iAsync.dropZone(tmp1805.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1806.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1807)
        {
          var tmp1808 = $"Error occurred in {GetType().FullName}: {tmp1807.Message}";
          if(_logger != null)
            _logger.LogError(tmp1807, tmp1808);
          else
            Console.Error.WriteLine(tmp1808);
          var tmp1809 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp1809.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addHostIntoZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1810 = new InternalStructs.addHostIntoZone_args();
        await tmp1810.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1811 = new InternalStructs.addHostIntoZone_result();
        try
        {
          tmp1811.Success = await _iAsync.addHostIntoZone(tmp1810.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addHostIntoZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1811.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1812)
        {
          var tmp1813 = $"Error occurred in {GetType().FullName}: {tmp1812.Message}";
          if(_logger != null)
            _logger.LogError(tmp1812, tmp1813);
          else
            Console.Error.WriteLine(tmp1813);
          var tmp1814 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addHostIntoZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp1814.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropHostFromZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1815 = new InternalStructs.dropHostFromZone_args();
        await tmp1815.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1816 = new InternalStructs.dropHostFromZone_result();
        try
        {
          tmp1816.Success = await _iAsync.dropHostFromZone(tmp1815.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropHostFromZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1816.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1817)
        {
          var tmp1818 = $"Error occurred in {GetType().FullName}: {tmp1817.Message}";
          if(_logger != null)
            _logger.LogError(tmp1817, tmp1818);
          else
            Console.Error.WriteLine(tmp1818);
          var tmp1819 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropHostFromZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp1819.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getZone_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1820 = new InternalStructs.getZone_args();
        await tmp1820.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1821 = new InternalStructs.getZone_result();
        try
        {
          tmp1821.Success = await _iAsync.getZone(tmp1820.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getZone", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1821.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1822)
        {
          var tmp1823 = $"Error occurred in {GetType().FullName}: {tmp1822.Message}";
          if(_logger != null)
            _logger.LogError(tmp1822, tmp1823);
          else
            Console.Error.WriteLine(tmp1823);
          var tmp1824 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getZone", TMessageType.Exception, seqid), cancellationToken);
          await tmp1824.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listZones_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1825 = new InternalStructs.listZones_args();
        await tmp1825.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1826 = new InternalStructs.listZones_result();
        try
        {
          tmp1826.Success = await _iAsync.listZones(tmp1825.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listZones", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1826.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1827)
        {
          var tmp1828 = $"Error occurred in {GetType().FullName}: {tmp1827.Message}";
          if(_logger != null)
            _logger.LogError(tmp1827, tmp1828);
          else
            Console.Error.WriteLine(tmp1828);
          var tmp1829 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listZones", TMessageType.Exception, seqid), cancellationToken);
          await tmp1829.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1830 = new InternalStructs.addGroup_args();
        await tmp1830.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1831 = new InternalStructs.addGroup_result();
        try
        {
          tmp1831.Success = await _iAsync.addGroup(tmp1830.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1831.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1832)
        {
          var tmp1833 = $"Error occurred in {GetType().FullName}: {tmp1832.Message}";
          if(_logger != null)
            _logger.LogError(tmp1832, tmp1833);
          else
            Console.Error.WriteLine(tmp1833);
          var tmp1834 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp1834.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1835 = new InternalStructs.dropGroup_args();
        await tmp1835.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1836 = new InternalStructs.dropGroup_result();
        try
        {
          tmp1836.Success = await _iAsync.dropGroup(tmp1835.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1836.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1837)
        {
          var tmp1838 = $"Error occurred in {GetType().FullName}: {tmp1837.Message}";
          if(_logger != null)
            _logger.LogError(tmp1837, tmp1838);
          else
            Console.Error.WriteLine(tmp1838);
          var tmp1839 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp1839.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addZoneIntoGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1840 = new InternalStructs.addZoneIntoGroup_args();
        await tmp1840.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1841 = new InternalStructs.addZoneIntoGroup_result();
        try
        {
          tmp1841.Success = await _iAsync.addZoneIntoGroup(tmp1840.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addZoneIntoGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1841.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1842)
        {
          var tmp1843 = $"Error occurred in {GetType().FullName}: {tmp1842.Message}";
          if(_logger != null)
            _logger.LogError(tmp1842, tmp1843);
          else
            Console.Error.WriteLine(tmp1843);
          var tmp1844 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addZoneIntoGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp1844.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropZoneFromGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1845 = new InternalStructs.dropZoneFromGroup_args();
        await tmp1845.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1846 = new InternalStructs.dropZoneFromGroup_result();
        try
        {
          tmp1846.Success = await _iAsync.dropZoneFromGroup(tmp1845.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropZoneFromGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1846.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1847)
        {
          var tmp1848 = $"Error occurred in {GetType().FullName}: {tmp1847.Message}";
          if(_logger != null)
            _logger.LogError(tmp1847, tmp1848);
          else
            Console.Error.WriteLine(tmp1848);
          var tmp1849 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropZoneFromGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp1849.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1850 = new InternalStructs.getGroup_args();
        await tmp1850.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1851 = new InternalStructs.getGroup_result();
        try
        {
          tmp1851.Success = await _iAsync.getGroup(tmp1850.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getGroup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1851.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1852)
        {
          var tmp1853 = $"Error occurred in {GetType().FullName}: {tmp1852.Message}";
          if(_logger != null)
            _logger.LogError(tmp1852, tmp1853);
          else
            Console.Error.WriteLine(tmp1853);
          var tmp1854 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getGroup", TMessageType.Exception, seqid), cancellationToken);
          await tmp1854.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1855 = new InternalStructs.listGroups_args();
        await tmp1855.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1856 = new InternalStructs.listGroups_result();
        try
        {
          tmp1856.Success = await _iAsync.listGroups(tmp1855.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listGroups", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1856.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1857)
        {
          var tmp1858 = $"Error occurred in {GetType().FullName}: {tmp1857.Message}";
          if(_logger != null)
            _logger.LogError(tmp1857, tmp1858);
          else
            Console.Error.WriteLine(tmp1858);
          var tmp1859 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listGroups", TMessageType.Exception, seqid), cancellationToken);
          await tmp1859.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createBackup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1860 = new InternalStructs.createBackup_args();
        await tmp1860.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1861 = new InternalStructs.createBackup_result();
        try
        {
          tmp1861.Success = await _iAsync.createBackup(tmp1860.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createBackup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1861.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1862)
        {
          var tmp1863 = $"Error occurred in {GetType().FullName}: {tmp1862.Message}";
          if(_logger != null)
            _logger.LogError(tmp1862, tmp1863);
          else
            Console.Error.WriteLine(tmp1863);
          var tmp1864 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createBackup", TMessageType.Exception, seqid), cancellationToken);
          await tmp1864.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task restoreMeta_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1865 = new InternalStructs.restoreMeta_args();
        await tmp1865.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1866 = new InternalStructs.restoreMeta_result();
        try
        {
          tmp1866.Success = await _iAsync.restoreMeta(tmp1865.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("restoreMeta", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1866.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1867)
        {
          var tmp1868 = $"Error occurred in {GetType().FullName}: {tmp1867.Message}";
          if(_logger != null)
            _logger.LogError(tmp1867, tmp1868);
          else
            Console.Error.WriteLine(tmp1868);
          var tmp1869 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("restoreMeta", TMessageType.Exception, seqid), cancellationToken);
          await tmp1869.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addListener_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1870 = new InternalStructs.addListener_args();
        await tmp1870.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1871 = new InternalStructs.addListener_result();
        try
        {
          tmp1871.Success = await _iAsync.addListener(tmp1870.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addListener", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1871.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1872)
        {
          var tmp1873 = $"Error occurred in {GetType().FullName}: {tmp1872.Message}";
          if(_logger != null)
            _logger.LogError(tmp1872, tmp1873);
          else
            Console.Error.WriteLine(tmp1873);
          var tmp1874 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addListener", TMessageType.Exception, seqid), cancellationToken);
          await tmp1874.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeListener_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1875 = new InternalStructs.removeListener_args();
        await tmp1875.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1876 = new InternalStructs.removeListener_result();
        try
        {
          tmp1876.Success = await _iAsync.removeListener(tmp1875.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("removeListener", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1876.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1877)
        {
          var tmp1878 = $"Error occurred in {GetType().FullName}: {tmp1877.Message}";
          if(_logger != null)
            _logger.LogError(tmp1877, tmp1878);
          else
            Console.Error.WriteLine(tmp1878);
          var tmp1879 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeListener", TMessageType.Exception, seqid), cancellationToken);
          await tmp1879.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listListener_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1880 = new InternalStructs.listListener_args();
        await tmp1880.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1881 = new InternalStructs.listListener_result();
        try
        {
          tmp1881.Success = await _iAsync.listListener(tmp1880.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listListener", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1881.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1882)
        {
          var tmp1883 = $"Error occurred in {GetType().FullName}: {tmp1882.Message}";
          if(_logger != null)
            _logger.LogError(tmp1882, tmp1883);
          else
            Console.Error.WriteLine(tmp1883);
          var tmp1884 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listListener", TMessageType.Exception, seqid), cancellationToken);
          await tmp1884.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getStats_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1885 = new InternalStructs.getStats_args();
        await tmp1885.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1886 = new InternalStructs.getStats_result();
        try
        {
          tmp1886.Success = await _iAsync.getStats(tmp1885.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getStats", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1886.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1887)
        {
          var tmp1888 = $"Error occurred in {GetType().FullName}: {tmp1887.Message}";
          if(_logger != null)
            _logger.LogError(tmp1887, tmp1888);
          else
            Console.Error.WriteLine(tmp1888);
          var tmp1889 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getStats", TMessageType.Exception, seqid), cancellationToken);
          await tmp1889.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task signInFTService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1890 = new InternalStructs.signInFTService_args();
        await tmp1890.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1891 = new InternalStructs.signInFTService_result();
        try
        {
          tmp1891.Success = await _iAsync.signInFTService(tmp1890.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("signInFTService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1891.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1892)
        {
          var tmp1893 = $"Error occurred in {GetType().FullName}: {tmp1892.Message}";
          if(_logger != null)
            _logger.LogError(tmp1892, tmp1893);
          else
            Console.Error.WriteLine(tmp1893);
          var tmp1894 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("signInFTService", TMessageType.Exception, seqid), cancellationToken);
          await tmp1894.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task signOutFTService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1895 = new InternalStructs.signOutFTService_args();
        await tmp1895.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1896 = new InternalStructs.signOutFTService_result();
        try
        {
          tmp1896.Success = await _iAsync.signOutFTService(tmp1895.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("signOutFTService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1896.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1897)
        {
          var tmp1898 = $"Error occurred in {GetType().FullName}: {tmp1897.Message}";
          if(_logger != null)
            _logger.LogError(tmp1897, tmp1898);
          else
            Console.Error.WriteLine(tmp1898);
          var tmp1899 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("signOutFTService", TMessageType.Exception, seqid), cancellationToken);
          await tmp1899.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listFTClients_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1900 = new InternalStructs.listFTClients_args();
        await tmp1900.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1901 = new InternalStructs.listFTClients_result();
        try
        {
          tmp1901.Success = await _iAsync.listFTClients(tmp1900.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listFTClients", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1901.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1902)
        {
          var tmp1903 = $"Error occurred in {GetType().FullName}: {tmp1902.Message}";
          if(_logger != null)
            _logger.LogError(tmp1902, tmp1903);
          else
            Console.Error.WriteLine(tmp1903);
          var tmp1904 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listFTClients", TMessageType.Exception, seqid), cancellationToken);
          await tmp1904.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createFTIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1905 = new InternalStructs.createFTIndex_args();
        await tmp1905.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1906 = new InternalStructs.createFTIndex_result();
        try
        {
          tmp1906.Success = await _iAsync.createFTIndex(tmp1905.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createFTIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1906.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1907)
        {
          var tmp1908 = $"Error occurred in {GetType().FullName}: {tmp1907.Message}";
          if(_logger != null)
            _logger.LogError(tmp1907, tmp1908);
          else
            Console.Error.WriteLine(tmp1908);
          var tmp1909 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createFTIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1909.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropFTIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1910 = new InternalStructs.dropFTIndex_args();
        await tmp1910.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1911 = new InternalStructs.dropFTIndex_result();
        try
        {
          tmp1911.Success = await _iAsync.dropFTIndex(tmp1910.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropFTIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1911.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1912)
        {
          var tmp1913 = $"Error occurred in {GetType().FullName}: {tmp1912.Message}";
          if(_logger != null)
            _logger.LogError(tmp1912, tmp1913);
          else
            Console.Error.WriteLine(tmp1913);
          var tmp1914 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropFTIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1914.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listFTIndexes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1915 = new InternalStructs.listFTIndexes_args();
        await tmp1915.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1916 = new InternalStructs.listFTIndexes_result();
        try
        {
          tmp1916.Success = await _iAsync.listFTIndexes(tmp1915.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listFTIndexes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1916.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1917)
        {
          var tmp1918 = $"Error occurred in {GetType().FullName}: {tmp1917.Message}";
          if(_logger != null)
            _logger.LogError(tmp1917, tmp1918);
          else
            Console.Error.WriteLine(tmp1918);
          var tmp1919 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listFTIndexes", TMessageType.Exception, seqid), cancellationToken);
          await tmp1919.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1920 = new InternalStructs.createSession_args();
        await tmp1920.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1921 = new InternalStructs.createSession_result();
        try
        {
          tmp1921.Success = await _iAsync.createSession(tmp1920.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createSession", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1921.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1922)
        {
          var tmp1923 = $"Error occurred in {GetType().FullName}: {tmp1922.Message}";
          if(_logger != null)
            _logger.LogError(tmp1922, tmp1923);
          else
            Console.Error.WriteLine(tmp1923);
          var tmp1924 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp1924.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateSessions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1925 = new InternalStructs.updateSessions_args();
        await tmp1925.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1926 = new InternalStructs.updateSessions_result();
        try
        {
          tmp1926.Success = await _iAsync.updateSessions(tmp1925.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("updateSessions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1926.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1927)
        {
          var tmp1928 = $"Error occurred in {GetType().FullName}: {tmp1927.Message}";
          if(_logger != null)
            _logger.LogError(tmp1927, tmp1928);
          else
            Console.Error.WriteLine(tmp1928);
          var tmp1929 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateSessions", TMessageType.Exception, seqid), cancellationToken);
          await tmp1929.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listSessions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1930 = new InternalStructs.listSessions_args();
        await tmp1930.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1931 = new InternalStructs.listSessions_result();
        try
        {
          tmp1931.Success = await _iAsync.listSessions(tmp1930.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listSessions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1931.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1932)
        {
          var tmp1933 = $"Error occurred in {GetType().FullName}: {tmp1932.Message}";
          if(_logger != null)
            _logger.LogError(tmp1932, tmp1933);
          else
            Console.Error.WriteLine(tmp1933);
          var tmp1934 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listSessions", TMessageType.Exception, seqid), cancellationToken);
          await tmp1934.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1935 = new InternalStructs.getSession_args();
        await tmp1935.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1936 = new InternalStructs.getSession_result();
        try
        {
          tmp1936.Success = await _iAsync.getSession(tmp1935.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getSession", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1936.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1937)
        {
          var tmp1938 = $"Error occurred in {GetType().FullName}: {tmp1937.Message}";
          if(_logger != null)
            _logger.LogError(tmp1937, tmp1938);
          else
            Console.Error.WriteLine(tmp1938);
          var tmp1939 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp1939.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removeSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1940 = new InternalStructs.removeSession_args();
        await tmp1940.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1941 = new InternalStructs.removeSession_result();
        try
        {
          tmp1941.Success = await _iAsync.removeSession(tmp1940.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("removeSession", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1941.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1942)
        {
          var tmp1943 = $"Error occurred in {GetType().FullName}: {tmp1942.Message}";
          if(_logger != null)
            _logger.LogError(tmp1942, tmp1943);
          else
            Console.Error.WriteLine(tmp1943);
          var tmp1944 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp1944.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task killQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1945 = new InternalStructs.killQuery_args();
        await tmp1945.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1946 = new InternalStructs.killQuery_result();
        try
        {
          tmp1946.Success = await _iAsync.killQuery(tmp1945.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("killQuery", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1946.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1947)
        {
          var tmp1948 = $"Error occurred in {GetType().FullName}: {tmp1947.Message}";
          if(_logger != null)
            _logger.LogError(tmp1947, tmp1948);
          else
            Console.Error.WriteLine(tmp1948);
          var tmp1949 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("killQuery", TMessageType.Exception, seqid), cancellationToken);
          await tmp1949.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task reportTaskFinish_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1950 = new InternalStructs.reportTaskFinish_args();
        await tmp1950.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1951 = new InternalStructs.reportTaskFinish_result();
        try
        {
          tmp1951.Success = await _iAsync.reportTaskFinish(tmp1950.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("reportTaskFinish", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1951.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1952)
        {
          var tmp1953 = $"Error occurred in {GetType().FullName}: {tmp1952.Message}";
          if(_logger != null)
            _logger.LogError(tmp1952, tmp1953);
          else
            Console.Error.WriteLine(tmp1953);
          var tmp1954 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("reportTaskFinish", TMessageType.Exception, seqid), cancellationToken);
          await tmp1954.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1955 = new InternalStructs.listCluster_args();
        await tmp1955.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1956 = new InternalStructs.listCluster_result();
        try
        {
          tmp1956.Success = await _iAsync.listCluster(tmp1955.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1956.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1957)
        {
          var tmp1958 = $"Error occurred in {GetType().FullName}: {tmp1957.Message}";
          if(_logger != null)
            _logger.LogError(tmp1957, tmp1958);
          else
            Console.Error.WriteLine(tmp1958);
          var tmp1959 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp1959.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getMetaDirInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1960 = new InternalStructs.getMetaDirInfo_args();
        await tmp1960.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1961 = new InternalStructs.getMetaDirInfo_result();
        try
        {
          tmp1961.Success = await _iAsync.getMetaDirInfo(tmp1960.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getMetaDirInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1961.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1962)
        {
          var tmp1963 = $"Error occurred in {GetType().FullName}: {tmp1962.Message}";
          if(_logger != null)
            _logger.LogError(tmp1962, tmp1963);
          else
            Console.Error.WriteLine(tmp1963);
          var tmp1964 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getMetaDirInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp1964.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task verifyClientVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1965 = new InternalStructs.verifyClientVersion_args();
        await tmp1965.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1966 = new InternalStructs.verifyClientVersion_result();
        try
        {
          tmp1966.Success = await _iAsync.verifyClientVersion(tmp1965.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("verifyClientVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1966.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1967)
        {
          var tmp1968 = $"Error occurred in {GetType().FullName}: {tmp1967.Message}";
          if(_logger != null)
            _logger.LogError(tmp1967, tmp1968);
          else
            Console.Error.WriteLine(tmp1968);
          var tmp1969 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("verifyClientVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp1969.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class createSpace_args : TBase
      {
        private global::Nebula.Meta.CreateSpaceReq _req;

        public global::Nebula.Meta.CreateSpaceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createSpace_args()
        {
        }

        public createSpace_args DeepCopy()
        {
          var tmp1970 = new createSpace_args();
          if((Req != null) && __isset.req)
          {
            tmp1970.Req = (global::Nebula.Meta.CreateSpaceReq)this.Req.DeepCopy();
          }
          tmp1970.__isset.req = this.__isset.req;
          return tmp1970;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateSpaceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1971 = new TStruct("createSpace_args");
            await oprot.WriteStructBeginAsync(tmp1971, cancellationToken);
            var tmp1972 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1972.Name = "req";
              tmp1972.Type = TType.Struct;
              tmp1972.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1972, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1973 = new StringBuilder("createSpace_args(");
          int tmp1974 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1974++) { tmp1973.Append(", "); }
            tmp1973.Append("Req: ");
            Req.ToString(tmp1973);
          }
          tmp1973.Append(')');
          return tmp1973.ToString();
        }
      }


      public partial class createSpace_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createSpace_result()
        {
        }

        public createSpace_result DeepCopy()
        {
          var tmp1975 = new createSpace_result();
          if((Success != null) && __isset.success)
          {
            tmp1975.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp1975.__isset.success = this.__isset.success;
          return tmp1975;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1976 = new TStruct("createSpace_result");
            await oprot.WriteStructBeginAsync(tmp1976, cancellationToken);
            var tmp1977 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1977.Name = "Success";
                tmp1977.Type = TType.Struct;
                tmp1977.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1977, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1978 = new StringBuilder("createSpace_result(");
          int tmp1979 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1979++) { tmp1978.Append(", "); }
            tmp1978.Append("Success: ");
            Success.ToString(tmp1978);
          }
          tmp1978.Append(')');
          return tmp1978.ToString();
        }
      }


      public partial class dropSpace_args : TBase
      {
        private global::Nebula.Meta.DropSpaceReq _req;

        public global::Nebula.Meta.DropSpaceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropSpace_args()
        {
        }

        public dropSpace_args DeepCopy()
        {
          var tmp1980 = new dropSpace_args();
          if((Req != null) && __isset.req)
          {
            tmp1980.Req = (global::Nebula.Meta.DropSpaceReq)this.Req.DeepCopy();
          }
          tmp1980.__isset.req = this.__isset.req;
          return tmp1980;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropSpaceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1981 = new TStruct("dropSpace_args");
            await oprot.WriteStructBeginAsync(tmp1981, cancellationToken);
            var tmp1982 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1982.Name = "req";
              tmp1982.Type = TType.Struct;
              tmp1982.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1982, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1983 = new StringBuilder("dropSpace_args(");
          int tmp1984 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1984++) { tmp1983.Append(", "); }
            tmp1983.Append("Req: ");
            Req.ToString(tmp1983);
          }
          tmp1983.Append(')');
          return tmp1983.ToString();
        }
      }


      public partial class dropSpace_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropSpace_result()
        {
        }

        public dropSpace_result DeepCopy()
        {
          var tmp1985 = new dropSpace_result();
          if((Success != null) && __isset.success)
          {
            tmp1985.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp1985.__isset.success = this.__isset.success;
          return tmp1985;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1986 = new TStruct("dropSpace_result");
            await oprot.WriteStructBeginAsync(tmp1986, cancellationToken);
            var tmp1987 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1987.Name = "Success";
                tmp1987.Type = TType.Struct;
                tmp1987.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1987, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1988 = new StringBuilder("dropSpace_result(");
          int tmp1989 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1989++) { tmp1988.Append(", "); }
            tmp1988.Append("Success: ");
            Success.ToString(tmp1988);
          }
          tmp1988.Append(')');
          return tmp1988.ToString();
        }
      }


      public partial class getSpace_args : TBase
      {
        private global::Nebula.Meta.GetSpaceReq _req;

        public global::Nebula.Meta.GetSpaceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getSpace_args()
        {
        }

        public getSpace_args DeepCopy()
        {
          var tmp1990 = new getSpace_args();
          if((Req != null) && __isset.req)
          {
            tmp1990.Req = (global::Nebula.Meta.GetSpaceReq)this.Req.DeepCopy();
          }
          tmp1990.__isset.req = this.__isset.req;
          return tmp1990;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetSpaceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1991 = new TStruct("getSpace_args");
            await oprot.WriteStructBeginAsync(tmp1991, cancellationToken);
            var tmp1992 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1992.Name = "req";
              tmp1992.Type = TType.Struct;
              tmp1992.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1992, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1993 = new StringBuilder("getSpace_args(");
          int tmp1994 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1994++) { tmp1993.Append(", "); }
            tmp1993.Append("Req: ");
            Req.ToString(tmp1993);
          }
          tmp1993.Append(')');
          return tmp1993.ToString();
        }
      }


      public partial class getSpace_result : TBase
      {
        private global::Nebula.Meta.GetSpaceResp _success;

        public global::Nebula.Meta.GetSpaceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getSpace_result()
        {
        }

        public getSpace_result DeepCopy()
        {
          var tmp1995 = new getSpace_result();
          if((Success != null) && __isset.success)
          {
            tmp1995.Success = (global::Nebula.Meta.GetSpaceResp)this.Success.DeepCopy();
          }
          tmp1995.__isset.success = this.__isset.success;
          return tmp1995;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetSpaceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1996 = new TStruct("getSpace_result");
            await oprot.WriteStructBeginAsync(tmp1996, cancellationToken);
            var tmp1997 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1997.Name = "Success";
                tmp1997.Type = TType.Struct;
                tmp1997.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1997, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1998 = new StringBuilder("getSpace_result(");
          int tmp1999 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1999++) { tmp1998.Append(", "); }
            tmp1998.Append("Success: ");
            Success.ToString(tmp1998);
          }
          tmp1998.Append(')');
          return tmp1998.ToString();
        }
      }


      public partial class listSpaces_args : TBase
      {
        private global::Nebula.Meta.ListSpacesReq _req;

        public global::Nebula.Meta.ListSpacesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listSpaces_args()
        {
        }

        public listSpaces_args DeepCopy()
        {
          var tmp2000 = new listSpaces_args();
          if((Req != null) && __isset.req)
          {
            tmp2000.Req = (global::Nebula.Meta.ListSpacesReq)this.Req.DeepCopy();
          }
          tmp2000.__isset.req = this.__isset.req;
          return tmp2000;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListSpacesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2001 = new TStruct("listSpaces_args");
            await oprot.WriteStructBeginAsync(tmp2001, cancellationToken);
            var tmp2002 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2002.Name = "req";
              tmp2002.Type = TType.Struct;
              tmp2002.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2002, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSpaces_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2003 = new StringBuilder("listSpaces_args(");
          int tmp2004 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2004++) { tmp2003.Append(", "); }
            tmp2003.Append("Req: ");
            Req.ToString(tmp2003);
          }
          tmp2003.Append(')');
          return tmp2003.ToString();
        }
      }


      public partial class listSpaces_result : TBase
      {
        private global::Nebula.Meta.ListSpacesResp _success;

        public global::Nebula.Meta.ListSpacesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listSpaces_result()
        {
        }

        public listSpaces_result DeepCopy()
        {
          var tmp2005 = new listSpaces_result();
          if((Success != null) && __isset.success)
          {
            tmp2005.Success = (global::Nebula.Meta.ListSpacesResp)this.Success.DeepCopy();
          }
          tmp2005.__isset.success = this.__isset.success;
          return tmp2005;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListSpacesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2006 = new TStruct("listSpaces_result");
            await oprot.WriteStructBeginAsync(tmp2006, cancellationToken);
            var tmp2007 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2007.Name = "Success";
                tmp2007.Type = TType.Struct;
                tmp2007.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2007, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSpaces_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2008 = new StringBuilder("listSpaces_result(");
          int tmp2009 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2009++) { tmp2008.Append(", "); }
            tmp2008.Append("Success: ");
            Success.ToString(tmp2008);
          }
          tmp2008.Append(')');
          return tmp2008.ToString();
        }
      }


      public partial class createSpaceAs_args : TBase
      {
        private global::Nebula.Meta.CreateSpaceAsReq _req;

        public global::Nebula.Meta.CreateSpaceAsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createSpaceAs_args()
        {
        }

        public createSpaceAs_args DeepCopy()
        {
          var tmp2010 = new createSpaceAs_args();
          if((Req != null) && __isset.req)
          {
            tmp2010.Req = (global::Nebula.Meta.CreateSpaceAsReq)this.Req.DeepCopy();
          }
          tmp2010.__isset.req = this.__isset.req;
          return tmp2010;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateSpaceAsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2011 = new TStruct("createSpaceAs_args");
            await oprot.WriteStructBeginAsync(tmp2011, cancellationToken);
            var tmp2012 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2012.Name = "req";
              tmp2012.Type = TType.Struct;
              tmp2012.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2012, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSpaceAs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2013 = new StringBuilder("createSpaceAs_args(");
          int tmp2014 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2014++) { tmp2013.Append(", "); }
            tmp2013.Append("Req: ");
            Req.ToString(tmp2013);
          }
          tmp2013.Append(')');
          return tmp2013.ToString();
        }
      }


      public partial class createSpaceAs_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createSpaceAs_result()
        {
        }

        public createSpaceAs_result DeepCopy()
        {
          var tmp2015 = new createSpaceAs_result();
          if((Success != null) && __isset.success)
          {
            tmp2015.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2015.__isset.success = this.__isset.success;
          return tmp2015;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2016 = new TStruct("createSpaceAs_result");
            await oprot.WriteStructBeginAsync(tmp2016, cancellationToken);
            var tmp2017 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2017.Name = "Success";
                tmp2017.Type = TType.Struct;
                tmp2017.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2017, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSpaceAs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2018 = new StringBuilder("createSpaceAs_result(");
          int tmp2019 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2019++) { tmp2018.Append(", "); }
            tmp2018.Append("Success: ");
            Success.ToString(tmp2018);
          }
          tmp2018.Append(')');
          return tmp2018.ToString();
        }
      }


      public partial class createTag_args : TBase
      {
        private global::Nebula.Meta.CreateTagReq _req;

        public global::Nebula.Meta.CreateTagReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createTag_args()
        {
        }

        public createTag_args DeepCopy()
        {
          var tmp2020 = new createTag_args();
          if((Req != null) && __isset.req)
          {
            tmp2020.Req = (global::Nebula.Meta.CreateTagReq)this.Req.DeepCopy();
          }
          tmp2020.__isset.req = this.__isset.req;
          return tmp2020;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateTagReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2021 = new TStruct("createTag_args");
            await oprot.WriteStructBeginAsync(tmp2021, cancellationToken);
            var tmp2022 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2022.Name = "req";
              tmp2022.Type = TType.Struct;
              tmp2022.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2022, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createTag_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2023 = new StringBuilder("createTag_args(");
          int tmp2024 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2024++) { tmp2023.Append(", "); }
            tmp2023.Append("Req: ");
            Req.ToString(tmp2023);
          }
          tmp2023.Append(')');
          return tmp2023.ToString();
        }
      }


      public partial class createTag_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createTag_result()
        {
        }

        public createTag_result DeepCopy()
        {
          var tmp2025 = new createTag_result();
          if((Success != null) && __isset.success)
          {
            tmp2025.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2025.__isset.success = this.__isset.success;
          return tmp2025;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2026 = new TStruct("createTag_result");
            await oprot.WriteStructBeginAsync(tmp2026, cancellationToken);
            var tmp2027 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2027.Name = "Success";
                tmp2027.Type = TType.Struct;
                tmp2027.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2027, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createTag_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2028 = new StringBuilder("createTag_result(");
          int tmp2029 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2029++) { tmp2028.Append(", "); }
            tmp2028.Append("Success: ");
            Success.ToString(tmp2028);
          }
          tmp2028.Append(')');
          return tmp2028.ToString();
        }
      }


      public partial class alterTag_args : TBase
      {
        private global::Nebula.Meta.AlterTagReq _req;

        public global::Nebula.Meta.AlterTagReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public alterTag_args()
        {
        }

        public alterTag_args DeepCopy()
        {
          var tmp2030 = new alterTag_args();
          if((Req != null) && __isset.req)
          {
            tmp2030.Req = (global::Nebula.Meta.AlterTagReq)this.Req.DeepCopy();
          }
          tmp2030.__isset.req = this.__isset.req;
          return tmp2030;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.AlterTagReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2031 = new TStruct("alterTag_args");
            await oprot.WriteStructBeginAsync(tmp2031, cancellationToken);
            var tmp2032 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2032.Name = "req";
              tmp2032.Type = TType.Struct;
              tmp2032.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2032, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is alterTag_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2033 = new StringBuilder("alterTag_args(");
          int tmp2034 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2034++) { tmp2033.Append(", "); }
            tmp2033.Append("Req: ");
            Req.ToString(tmp2033);
          }
          tmp2033.Append(')');
          return tmp2033.ToString();
        }
      }


      public partial class alterTag_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public alterTag_result()
        {
        }

        public alterTag_result DeepCopy()
        {
          var tmp2035 = new alterTag_result();
          if((Success != null) && __isset.success)
          {
            tmp2035.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2035.__isset.success = this.__isset.success;
          return tmp2035;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2036 = new TStruct("alterTag_result");
            await oprot.WriteStructBeginAsync(tmp2036, cancellationToken);
            var tmp2037 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2037.Name = "Success";
                tmp2037.Type = TType.Struct;
                tmp2037.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2037, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is alterTag_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2038 = new StringBuilder("alterTag_result(");
          int tmp2039 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2039++) { tmp2038.Append(", "); }
            tmp2038.Append("Success: ");
            Success.ToString(tmp2038);
          }
          tmp2038.Append(')');
          return tmp2038.ToString();
        }
      }


      public partial class dropTag_args : TBase
      {
        private global::Nebula.Meta.DropTagReq _req;

        public global::Nebula.Meta.DropTagReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropTag_args()
        {
        }

        public dropTag_args DeepCopy()
        {
          var tmp2040 = new dropTag_args();
          if((Req != null) && __isset.req)
          {
            tmp2040.Req = (global::Nebula.Meta.DropTagReq)this.Req.DeepCopy();
          }
          tmp2040.__isset.req = this.__isset.req;
          return tmp2040;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropTagReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2041 = new TStruct("dropTag_args");
            await oprot.WriteStructBeginAsync(tmp2041, cancellationToken);
            var tmp2042 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2042.Name = "req";
              tmp2042.Type = TType.Struct;
              tmp2042.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2042, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropTag_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2043 = new StringBuilder("dropTag_args(");
          int tmp2044 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2044++) { tmp2043.Append(", "); }
            tmp2043.Append("Req: ");
            Req.ToString(tmp2043);
          }
          tmp2043.Append(')');
          return tmp2043.ToString();
        }
      }


      public partial class dropTag_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropTag_result()
        {
        }

        public dropTag_result DeepCopy()
        {
          var tmp2045 = new dropTag_result();
          if((Success != null) && __isset.success)
          {
            tmp2045.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2045.__isset.success = this.__isset.success;
          return tmp2045;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2046 = new TStruct("dropTag_result");
            await oprot.WriteStructBeginAsync(tmp2046, cancellationToken);
            var tmp2047 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2047.Name = "Success";
                tmp2047.Type = TType.Struct;
                tmp2047.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2047, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropTag_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2048 = new StringBuilder("dropTag_result(");
          int tmp2049 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2049++) { tmp2048.Append(", "); }
            tmp2048.Append("Success: ");
            Success.ToString(tmp2048);
          }
          tmp2048.Append(')');
          return tmp2048.ToString();
        }
      }


      public partial class getTag_args : TBase
      {
        private global::Nebula.Meta.GetTagReq _req;

        public global::Nebula.Meta.GetTagReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getTag_args()
        {
        }

        public getTag_args DeepCopy()
        {
          var tmp2050 = new getTag_args();
          if((Req != null) && __isset.req)
          {
            tmp2050.Req = (global::Nebula.Meta.GetTagReq)this.Req.DeepCopy();
          }
          tmp2050.__isset.req = this.__isset.req;
          return tmp2050;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetTagReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2051 = new TStruct("getTag_args");
            await oprot.WriteStructBeginAsync(tmp2051, cancellationToken);
            var tmp2052 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2052.Name = "req";
              tmp2052.Type = TType.Struct;
              tmp2052.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2052, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTag_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2053 = new StringBuilder("getTag_args(");
          int tmp2054 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2054++) { tmp2053.Append(", "); }
            tmp2053.Append("Req: ");
            Req.ToString(tmp2053);
          }
          tmp2053.Append(')');
          return tmp2053.ToString();
        }
      }


      public partial class getTag_result : TBase
      {
        private global::Nebula.Meta.GetTagResp _success;

        public global::Nebula.Meta.GetTagResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getTag_result()
        {
        }

        public getTag_result DeepCopy()
        {
          var tmp2055 = new getTag_result();
          if((Success != null) && __isset.success)
          {
            tmp2055.Success = (global::Nebula.Meta.GetTagResp)this.Success.DeepCopy();
          }
          tmp2055.__isset.success = this.__isset.success;
          return tmp2055;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetTagResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2056 = new TStruct("getTag_result");
            await oprot.WriteStructBeginAsync(tmp2056, cancellationToken);
            var tmp2057 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2057.Name = "Success";
                tmp2057.Type = TType.Struct;
                tmp2057.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2057, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTag_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2058 = new StringBuilder("getTag_result(");
          int tmp2059 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2059++) { tmp2058.Append(", "); }
            tmp2058.Append("Success: ");
            Success.ToString(tmp2058);
          }
          tmp2058.Append(')');
          return tmp2058.ToString();
        }
      }


      public partial class listTags_args : TBase
      {
        private global::Nebula.Meta.ListTagsReq _req;

        public global::Nebula.Meta.ListTagsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listTags_args()
        {
        }

        public listTags_args DeepCopy()
        {
          var tmp2060 = new listTags_args();
          if((Req != null) && __isset.req)
          {
            tmp2060.Req = (global::Nebula.Meta.ListTagsReq)this.Req.DeepCopy();
          }
          tmp2060.__isset.req = this.__isset.req;
          return tmp2060;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListTagsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2061 = new TStruct("listTags_args");
            await oprot.WriteStructBeginAsync(tmp2061, cancellationToken);
            var tmp2062 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2062.Name = "req";
              tmp2062.Type = TType.Struct;
              tmp2062.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2062, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTags_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2063 = new StringBuilder("listTags_args(");
          int tmp2064 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2064++) { tmp2063.Append(", "); }
            tmp2063.Append("Req: ");
            Req.ToString(tmp2063);
          }
          tmp2063.Append(')');
          return tmp2063.ToString();
        }
      }


      public partial class listTags_result : TBase
      {
        private global::Nebula.Meta.ListTagsResp _success;

        public global::Nebula.Meta.ListTagsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listTags_result()
        {
        }

        public listTags_result DeepCopy()
        {
          var tmp2065 = new listTags_result();
          if((Success != null) && __isset.success)
          {
            tmp2065.Success = (global::Nebula.Meta.ListTagsResp)this.Success.DeepCopy();
          }
          tmp2065.__isset.success = this.__isset.success;
          return tmp2065;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListTagsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2066 = new TStruct("listTags_result");
            await oprot.WriteStructBeginAsync(tmp2066, cancellationToken);
            var tmp2067 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2067.Name = "Success";
                tmp2067.Type = TType.Struct;
                tmp2067.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2067, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTags_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2068 = new StringBuilder("listTags_result(");
          int tmp2069 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2069++) { tmp2068.Append(", "); }
            tmp2068.Append("Success: ");
            Success.ToString(tmp2068);
          }
          tmp2068.Append(')');
          return tmp2068.ToString();
        }
      }


      public partial class createEdge_args : TBase
      {
        private global::Nebula.Meta.CreateEdgeReq _req;

        public global::Nebula.Meta.CreateEdgeReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createEdge_args()
        {
        }

        public createEdge_args DeepCopy()
        {
          var tmp2070 = new createEdge_args();
          if((Req != null) && __isset.req)
          {
            tmp2070.Req = (global::Nebula.Meta.CreateEdgeReq)this.Req.DeepCopy();
          }
          tmp2070.__isset.req = this.__isset.req;
          return tmp2070;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateEdgeReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2071 = new TStruct("createEdge_args");
            await oprot.WriteStructBeginAsync(tmp2071, cancellationToken);
            var tmp2072 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2072.Name = "req";
              tmp2072.Type = TType.Struct;
              tmp2072.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2072, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createEdge_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2073 = new StringBuilder("createEdge_args(");
          int tmp2074 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2074++) { tmp2073.Append(", "); }
            tmp2073.Append("Req: ");
            Req.ToString(tmp2073);
          }
          tmp2073.Append(')');
          return tmp2073.ToString();
        }
      }


      public partial class createEdge_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createEdge_result()
        {
        }

        public createEdge_result DeepCopy()
        {
          var tmp2075 = new createEdge_result();
          if((Success != null) && __isset.success)
          {
            tmp2075.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2075.__isset.success = this.__isset.success;
          return tmp2075;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2076 = new TStruct("createEdge_result");
            await oprot.WriteStructBeginAsync(tmp2076, cancellationToken);
            var tmp2077 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2077.Name = "Success";
                tmp2077.Type = TType.Struct;
                tmp2077.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2077, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createEdge_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2078 = new StringBuilder("createEdge_result(");
          int tmp2079 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2079++) { tmp2078.Append(", "); }
            tmp2078.Append("Success: ");
            Success.ToString(tmp2078);
          }
          tmp2078.Append(')');
          return tmp2078.ToString();
        }
      }


      public partial class alterEdge_args : TBase
      {
        private global::Nebula.Meta.AlterEdgeReq _req;

        public global::Nebula.Meta.AlterEdgeReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public alterEdge_args()
        {
        }

        public alterEdge_args DeepCopy()
        {
          var tmp2080 = new alterEdge_args();
          if((Req != null) && __isset.req)
          {
            tmp2080.Req = (global::Nebula.Meta.AlterEdgeReq)this.Req.DeepCopy();
          }
          tmp2080.__isset.req = this.__isset.req;
          return tmp2080;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.AlterEdgeReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2081 = new TStruct("alterEdge_args");
            await oprot.WriteStructBeginAsync(tmp2081, cancellationToken);
            var tmp2082 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2082.Name = "req";
              tmp2082.Type = TType.Struct;
              tmp2082.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2082, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is alterEdge_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2083 = new StringBuilder("alterEdge_args(");
          int tmp2084 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2084++) { tmp2083.Append(", "); }
            tmp2083.Append("Req: ");
            Req.ToString(tmp2083);
          }
          tmp2083.Append(')');
          return tmp2083.ToString();
        }
      }


      public partial class alterEdge_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public alterEdge_result()
        {
        }

        public alterEdge_result DeepCopy()
        {
          var tmp2085 = new alterEdge_result();
          if((Success != null) && __isset.success)
          {
            tmp2085.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2085.__isset.success = this.__isset.success;
          return tmp2085;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2086 = new TStruct("alterEdge_result");
            await oprot.WriteStructBeginAsync(tmp2086, cancellationToken);
            var tmp2087 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2087.Name = "Success";
                tmp2087.Type = TType.Struct;
                tmp2087.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2087, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is alterEdge_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2088 = new StringBuilder("alterEdge_result(");
          int tmp2089 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2089++) { tmp2088.Append(", "); }
            tmp2088.Append("Success: ");
            Success.ToString(tmp2088);
          }
          tmp2088.Append(')');
          return tmp2088.ToString();
        }
      }


      public partial class dropEdge_args : TBase
      {
        private global::Nebula.Meta.DropEdgeReq _req;

        public global::Nebula.Meta.DropEdgeReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropEdge_args()
        {
        }

        public dropEdge_args DeepCopy()
        {
          var tmp2090 = new dropEdge_args();
          if((Req != null) && __isset.req)
          {
            tmp2090.Req = (global::Nebula.Meta.DropEdgeReq)this.Req.DeepCopy();
          }
          tmp2090.__isset.req = this.__isset.req;
          return tmp2090;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropEdgeReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2091 = new TStruct("dropEdge_args");
            await oprot.WriteStructBeginAsync(tmp2091, cancellationToken);
            var tmp2092 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2092.Name = "req";
              tmp2092.Type = TType.Struct;
              tmp2092.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2092, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropEdge_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2093 = new StringBuilder("dropEdge_args(");
          int tmp2094 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2094++) { tmp2093.Append(", "); }
            tmp2093.Append("Req: ");
            Req.ToString(tmp2093);
          }
          tmp2093.Append(')');
          return tmp2093.ToString();
        }
      }


      public partial class dropEdge_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropEdge_result()
        {
        }

        public dropEdge_result DeepCopy()
        {
          var tmp2095 = new dropEdge_result();
          if((Success != null) && __isset.success)
          {
            tmp2095.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2095.__isset.success = this.__isset.success;
          return tmp2095;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2096 = new TStruct("dropEdge_result");
            await oprot.WriteStructBeginAsync(tmp2096, cancellationToken);
            var tmp2097 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2097.Name = "Success";
                tmp2097.Type = TType.Struct;
                tmp2097.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2097, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropEdge_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2098 = new StringBuilder("dropEdge_result(");
          int tmp2099 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2099++) { tmp2098.Append(", "); }
            tmp2098.Append("Success: ");
            Success.ToString(tmp2098);
          }
          tmp2098.Append(')');
          return tmp2098.ToString();
        }
      }


      public partial class getEdge_args : TBase
      {
        private global::Nebula.Meta.GetEdgeReq _req;

        public global::Nebula.Meta.GetEdgeReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getEdge_args()
        {
        }

        public getEdge_args DeepCopy()
        {
          var tmp2100 = new getEdge_args();
          if((Req != null) && __isset.req)
          {
            tmp2100.Req = (global::Nebula.Meta.GetEdgeReq)this.Req.DeepCopy();
          }
          tmp2100.__isset.req = this.__isset.req;
          return tmp2100;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetEdgeReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2101 = new TStruct("getEdge_args");
            await oprot.WriteStructBeginAsync(tmp2101, cancellationToken);
            var tmp2102 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2102.Name = "req";
              tmp2102.Type = TType.Struct;
              tmp2102.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2102, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getEdge_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2103 = new StringBuilder("getEdge_args(");
          int tmp2104 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2104++) { tmp2103.Append(", "); }
            tmp2103.Append("Req: ");
            Req.ToString(tmp2103);
          }
          tmp2103.Append(')');
          return tmp2103.ToString();
        }
      }


      public partial class getEdge_result : TBase
      {
        private global::Nebula.Meta.GetEdgeResp _success;

        public global::Nebula.Meta.GetEdgeResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getEdge_result()
        {
        }

        public getEdge_result DeepCopy()
        {
          var tmp2105 = new getEdge_result();
          if((Success != null) && __isset.success)
          {
            tmp2105.Success = (global::Nebula.Meta.GetEdgeResp)this.Success.DeepCopy();
          }
          tmp2105.__isset.success = this.__isset.success;
          return tmp2105;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetEdgeResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2106 = new TStruct("getEdge_result");
            await oprot.WriteStructBeginAsync(tmp2106, cancellationToken);
            var tmp2107 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2107.Name = "Success";
                tmp2107.Type = TType.Struct;
                tmp2107.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2107, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getEdge_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2108 = new StringBuilder("getEdge_result(");
          int tmp2109 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2109++) { tmp2108.Append(", "); }
            tmp2108.Append("Success: ");
            Success.ToString(tmp2108);
          }
          tmp2108.Append(')');
          return tmp2108.ToString();
        }
      }


      public partial class listEdges_args : TBase
      {
        private global::Nebula.Meta.ListEdgesReq _req;

        public global::Nebula.Meta.ListEdgesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listEdges_args()
        {
        }

        public listEdges_args DeepCopy()
        {
          var tmp2110 = new listEdges_args();
          if((Req != null) && __isset.req)
          {
            tmp2110.Req = (global::Nebula.Meta.ListEdgesReq)this.Req.DeepCopy();
          }
          tmp2110.__isset.req = this.__isset.req;
          return tmp2110;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListEdgesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2111 = new TStruct("listEdges_args");
            await oprot.WriteStructBeginAsync(tmp2111, cancellationToken);
            var tmp2112 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2112.Name = "req";
              tmp2112.Type = TType.Struct;
              tmp2112.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2112, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listEdges_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2113 = new StringBuilder("listEdges_args(");
          int tmp2114 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2114++) { tmp2113.Append(", "); }
            tmp2113.Append("Req: ");
            Req.ToString(tmp2113);
          }
          tmp2113.Append(')');
          return tmp2113.ToString();
        }
      }


      public partial class listEdges_result : TBase
      {
        private global::Nebula.Meta.ListEdgesResp _success;

        public global::Nebula.Meta.ListEdgesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listEdges_result()
        {
        }

        public listEdges_result DeepCopy()
        {
          var tmp2115 = new listEdges_result();
          if((Success != null) && __isset.success)
          {
            tmp2115.Success = (global::Nebula.Meta.ListEdgesResp)this.Success.DeepCopy();
          }
          tmp2115.__isset.success = this.__isset.success;
          return tmp2115;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListEdgesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2116 = new TStruct("listEdges_result");
            await oprot.WriteStructBeginAsync(tmp2116, cancellationToken);
            var tmp2117 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2117.Name = "Success";
                tmp2117.Type = TType.Struct;
                tmp2117.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2117, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listEdges_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2118 = new StringBuilder("listEdges_result(");
          int tmp2119 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2119++) { tmp2118.Append(", "); }
            tmp2118.Append("Success: ");
            Success.ToString(tmp2118);
          }
          tmp2118.Append(')');
          return tmp2118.ToString();
        }
      }


      public partial class listHosts_args : TBase
      {
        private global::Nebula.Meta.ListHostsReq _req;

        public global::Nebula.Meta.ListHostsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listHosts_args()
        {
        }

        public listHosts_args DeepCopy()
        {
          var tmp2120 = new listHosts_args();
          if((Req != null) && __isset.req)
          {
            tmp2120.Req = (global::Nebula.Meta.ListHostsReq)this.Req.DeepCopy();
          }
          tmp2120.__isset.req = this.__isset.req;
          return tmp2120;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListHostsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2121 = new TStruct("listHosts_args");
            await oprot.WriteStructBeginAsync(tmp2121, cancellationToken);
            var tmp2122 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2122.Name = "req";
              tmp2122.Type = TType.Struct;
              tmp2122.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2122, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listHosts_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2123 = new StringBuilder("listHosts_args(");
          int tmp2124 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2124++) { tmp2123.Append(", "); }
            tmp2123.Append("Req: ");
            Req.ToString(tmp2123);
          }
          tmp2123.Append(')');
          return tmp2123.ToString();
        }
      }


      public partial class listHosts_result : TBase
      {
        private global::Nebula.Meta.ListHostsResp _success;

        public global::Nebula.Meta.ListHostsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listHosts_result()
        {
        }

        public listHosts_result DeepCopy()
        {
          var tmp2125 = new listHosts_result();
          if((Success != null) && __isset.success)
          {
            tmp2125.Success = (global::Nebula.Meta.ListHostsResp)this.Success.DeepCopy();
          }
          tmp2125.__isset.success = this.__isset.success;
          return tmp2125;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListHostsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2126 = new TStruct("listHosts_result");
            await oprot.WriteStructBeginAsync(tmp2126, cancellationToken);
            var tmp2127 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2127.Name = "Success";
                tmp2127.Type = TType.Struct;
                tmp2127.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2127, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listHosts_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2128 = new StringBuilder("listHosts_result(");
          int tmp2129 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2129++) { tmp2128.Append(", "); }
            tmp2128.Append("Success: ");
            Success.ToString(tmp2128);
          }
          tmp2128.Append(')');
          return tmp2128.ToString();
        }
      }


      public partial class getPartsAlloc_args : TBase
      {
        private global::Nebula.Meta.GetPartsAllocReq _req;

        public global::Nebula.Meta.GetPartsAllocReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getPartsAlloc_args()
        {
        }

        public getPartsAlloc_args DeepCopy()
        {
          var tmp2130 = new getPartsAlloc_args();
          if((Req != null) && __isset.req)
          {
            tmp2130.Req = (global::Nebula.Meta.GetPartsAllocReq)this.Req.DeepCopy();
          }
          tmp2130.__isset.req = this.__isset.req;
          return tmp2130;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetPartsAllocReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2131 = new TStruct("getPartsAlloc_args");
            await oprot.WriteStructBeginAsync(tmp2131, cancellationToken);
            var tmp2132 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2132.Name = "req";
              tmp2132.Type = TType.Struct;
              tmp2132.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2132, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getPartsAlloc_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2133 = new StringBuilder("getPartsAlloc_args(");
          int tmp2134 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2134++) { tmp2133.Append(", "); }
            tmp2133.Append("Req: ");
            Req.ToString(tmp2133);
          }
          tmp2133.Append(')');
          return tmp2133.ToString();
        }
      }


      public partial class getPartsAlloc_result : TBase
      {
        private global::Nebula.Meta.GetPartsAllocResp _success;

        public global::Nebula.Meta.GetPartsAllocResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getPartsAlloc_result()
        {
        }

        public getPartsAlloc_result DeepCopy()
        {
          var tmp2135 = new getPartsAlloc_result();
          if((Success != null) && __isset.success)
          {
            tmp2135.Success = (global::Nebula.Meta.GetPartsAllocResp)this.Success.DeepCopy();
          }
          tmp2135.__isset.success = this.__isset.success;
          return tmp2135;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetPartsAllocResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2136 = new TStruct("getPartsAlloc_result");
            await oprot.WriteStructBeginAsync(tmp2136, cancellationToken);
            var tmp2137 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2137.Name = "Success";
                tmp2137.Type = TType.Struct;
                tmp2137.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2137, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getPartsAlloc_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2138 = new StringBuilder("getPartsAlloc_result(");
          int tmp2139 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2139++) { tmp2138.Append(", "); }
            tmp2138.Append("Success: ");
            Success.ToString(tmp2138);
          }
          tmp2138.Append(')');
          return tmp2138.ToString();
        }
      }


      public partial class listParts_args : TBase
      {
        private global::Nebula.Meta.ListPartsReq _req;

        public global::Nebula.Meta.ListPartsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listParts_args()
        {
        }

        public listParts_args DeepCopy()
        {
          var tmp2140 = new listParts_args();
          if((Req != null) && __isset.req)
          {
            tmp2140.Req = (global::Nebula.Meta.ListPartsReq)this.Req.DeepCopy();
          }
          tmp2140.__isset.req = this.__isset.req;
          return tmp2140;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListPartsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2141 = new TStruct("listParts_args");
            await oprot.WriteStructBeginAsync(tmp2141, cancellationToken);
            var tmp2142 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2142.Name = "req";
              tmp2142.Type = TType.Struct;
              tmp2142.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2142, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listParts_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2143 = new StringBuilder("listParts_args(");
          int tmp2144 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2144++) { tmp2143.Append(", "); }
            tmp2143.Append("Req: ");
            Req.ToString(tmp2143);
          }
          tmp2143.Append(')');
          return tmp2143.ToString();
        }
      }


      public partial class listParts_result : TBase
      {
        private global::Nebula.Meta.ListPartsResp _success;

        public global::Nebula.Meta.ListPartsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listParts_result()
        {
        }

        public listParts_result DeepCopy()
        {
          var tmp2145 = new listParts_result();
          if((Success != null) && __isset.success)
          {
            tmp2145.Success = (global::Nebula.Meta.ListPartsResp)this.Success.DeepCopy();
          }
          tmp2145.__isset.success = this.__isset.success;
          return tmp2145;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListPartsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2146 = new TStruct("listParts_result");
            await oprot.WriteStructBeginAsync(tmp2146, cancellationToken);
            var tmp2147 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2147.Name = "Success";
                tmp2147.Type = TType.Struct;
                tmp2147.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2147, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listParts_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2148 = new StringBuilder("listParts_result(");
          int tmp2149 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2149++) { tmp2148.Append(", "); }
            tmp2148.Append("Success: ");
            Success.ToString(tmp2148);
          }
          tmp2148.Append(')');
          return tmp2148.ToString();
        }
      }


      public partial class multiPut_args : TBase
      {
        private global::Nebula.Meta.MultiPutReq _req;

        public global::Nebula.Meta.MultiPutReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public multiPut_args()
        {
        }

        public multiPut_args DeepCopy()
        {
          var tmp2150 = new multiPut_args();
          if((Req != null) && __isset.req)
          {
            tmp2150.Req = (global::Nebula.Meta.MultiPutReq)this.Req.DeepCopy();
          }
          tmp2150.__isset.req = this.__isset.req;
          return tmp2150;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.MultiPutReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2151 = new TStruct("multiPut_args");
            await oprot.WriteStructBeginAsync(tmp2151, cancellationToken);
            var tmp2152 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2152.Name = "req";
              tmp2152.Type = TType.Struct;
              tmp2152.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2152, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is multiPut_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2153 = new StringBuilder("multiPut_args(");
          int tmp2154 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2154++) { tmp2153.Append(", "); }
            tmp2153.Append("Req: ");
            Req.ToString(tmp2153);
          }
          tmp2153.Append(')');
          return tmp2153.ToString();
        }
      }


      public partial class multiPut_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public multiPut_result()
        {
        }

        public multiPut_result DeepCopy()
        {
          var tmp2155 = new multiPut_result();
          if((Success != null) && __isset.success)
          {
            tmp2155.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2155.__isset.success = this.__isset.success;
          return tmp2155;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2156 = new TStruct("multiPut_result");
            await oprot.WriteStructBeginAsync(tmp2156, cancellationToken);
            var tmp2157 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2157.Name = "Success";
                tmp2157.Type = TType.Struct;
                tmp2157.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2157, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is multiPut_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2158 = new StringBuilder("multiPut_result(");
          int tmp2159 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2159++) { tmp2158.Append(", "); }
            tmp2158.Append("Success: ");
            Success.ToString(tmp2158);
          }
          tmp2158.Append(')');
          return tmp2158.ToString();
        }
      }


      public partial class get_args : TBase
      {
        private global::Nebula.Meta.GetReq _req;

        public global::Nebula.Meta.GetReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public get_args()
        {
        }

        public get_args DeepCopy()
        {
          var tmp2160 = new get_args();
          if((Req != null) && __isset.req)
          {
            tmp2160.Req = (global::Nebula.Meta.GetReq)this.Req.DeepCopy();
          }
          tmp2160.__isset.req = this.__isset.req;
          return tmp2160;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2161 = new TStruct("get_args");
            await oprot.WriteStructBeginAsync(tmp2161, cancellationToken);
            var tmp2162 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2162.Name = "req";
              tmp2162.Type = TType.Struct;
              tmp2162.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2162, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is get_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2163 = new StringBuilder("get_args(");
          int tmp2164 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2164++) { tmp2163.Append(", "); }
            tmp2163.Append("Req: ");
            Req.ToString(tmp2163);
          }
          tmp2163.Append(')');
          return tmp2163.ToString();
        }
      }


      public partial class get_result : TBase
      {
        private global::Nebula.Meta.GetResp _success;

        public global::Nebula.Meta.GetResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public get_result()
        {
        }

        public get_result DeepCopy()
        {
          var tmp2165 = new get_result();
          if((Success != null) && __isset.success)
          {
            tmp2165.Success = (global::Nebula.Meta.GetResp)this.Success.DeepCopy();
          }
          tmp2165.__isset.success = this.__isset.success;
          return tmp2165;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2166 = new TStruct("get_result");
            await oprot.WriteStructBeginAsync(tmp2166, cancellationToken);
            var tmp2167 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2167.Name = "Success";
                tmp2167.Type = TType.Struct;
                tmp2167.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2167, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is get_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2168 = new StringBuilder("get_result(");
          int tmp2169 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2169++) { tmp2168.Append(", "); }
            tmp2168.Append("Success: ");
            Success.ToString(tmp2168);
          }
          tmp2168.Append(')');
          return tmp2168.ToString();
        }
      }


      public partial class multiGet_args : TBase
      {
        private global::Nebula.Meta.MultiGetReq _req;

        public global::Nebula.Meta.MultiGetReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public multiGet_args()
        {
        }

        public multiGet_args DeepCopy()
        {
          var tmp2170 = new multiGet_args();
          if((Req != null) && __isset.req)
          {
            tmp2170.Req = (global::Nebula.Meta.MultiGetReq)this.Req.DeepCopy();
          }
          tmp2170.__isset.req = this.__isset.req;
          return tmp2170;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.MultiGetReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2171 = new TStruct("multiGet_args");
            await oprot.WriteStructBeginAsync(tmp2171, cancellationToken);
            var tmp2172 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2172.Name = "req";
              tmp2172.Type = TType.Struct;
              tmp2172.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2172, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is multiGet_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2173 = new StringBuilder("multiGet_args(");
          int tmp2174 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2174++) { tmp2173.Append(", "); }
            tmp2173.Append("Req: ");
            Req.ToString(tmp2173);
          }
          tmp2173.Append(')');
          return tmp2173.ToString();
        }
      }


      public partial class multiGet_result : TBase
      {
        private global::Nebula.Meta.MultiGetResp _success;

        public global::Nebula.Meta.MultiGetResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public multiGet_result()
        {
        }

        public multiGet_result DeepCopy()
        {
          var tmp2175 = new multiGet_result();
          if((Success != null) && __isset.success)
          {
            tmp2175.Success = (global::Nebula.Meta.MultiGetResp)this.Success.DeepCopy();
          }
          tmp2175.__isset.success = this.__isset.success;
          return tmp2175;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.MultiGetResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2176 = new TStruct("multiGet_result");
            await oprot.WriteStructBeginAsync(tmp2176, cancellationToken);
            var tmp2177 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2177.Name = "Success";
                tmp2177.Type = TType.Struct;
                tmp2177.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2177, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is multiGet_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2178 = new StringBuilder("multiGet_result(");
          int tmp2179 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2179++) { tmp2178.Append(", "); }
            tmp2178.Append("Success: ");
            Success.ToString(tmp2178);
          }
          tmp2178.Append(')');
          return tmp2178.ToString();
        }
      }


      public partial class remove_args : TBase
      {
        private global::Nebula.Meta.RemoveReq _req;

        public global::Nebula.Meta.RemoveReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public remove_args()
        {
        }

        public remove_args DeepCopy()
        {
          var tmp2180 = new remove_args();
          if((Req != null) && __isset.req)
          {
            tmp2180.Req = (global::Nebula.Meta.RemoveReq)this.Req.DeepCopy();
          }
          tmp2180.__isset.req = this.__isset.req;
          return tmp2180;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.RemoveReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2181 = new TStruct("remove_args");
            await oprot.WriteStructBeginAsync(tmp2181, cancellationToken);
            var tmp2182 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2182.Name = "req";
              tmp2182.Type = TType.Struct;
              tmp2182.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2182, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is remove_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2183 = new StringBuilder("remove_args(");
          int tmp2184 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2184++) { tmp2183.Append(", "); }
            tmp2183.Append("Req: ");
            Req.ToString(tmp2183);
          }
          tmp2183.Append(')');
          return tmp2183.ToString();
        }
      }


      public partial class remove_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public remove_result()
        {
        }

        public remove_result DeepCopy()
        {
          var tmp2185 = new remove_result();
          if((Success != null) && __isset.success)
          {
            tmp2185.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2185.__isset.success = this.__isset.success;
          return tmp2185;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2186 = new TStruct("remove_result");
            await oprot.WriteStructBeginAsync(tmp2186, cancellationToken);
            var tmp2187 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2187.Name = "Success";
                tmp2187.Type = TType.Struct;
                tmp2187.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2187, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is remove_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2188 = new StringBuilder("remove_result(");
          int tmp2189 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2189++) { tmp2188.Append(", "); }
            tmp2188.Append("Success: ");
            Success.ToString(tmp2188);
          }
          tmp2188.Append(')');
          return tmp2188.ToString();
        }
      }


      public partial class removeRange_args : TBase
      {
        private global::Nebula.Meta.RemoveRangeReq _req;

        public global::Nebula.Meta.RemoveRangeReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public removeRange_args()
        {
        }

        public removeRange_args DeepCopy()
        {
          var tmp2190 = new removeRange_args();
          if((Req != null) && __isset.req)
          {
            tmp2190.Req = (global::Nebula.Meta.RemoveRangeReq)this.Req.DeepCopy();
          }
          tmp2190.__isset.req = this.__isset.req;
          return tmp2190;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.RemoveRangeReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2191 = new TStruct("removeRange_args");
            await oprot.WriteStructBeginAsync(tmp2191, cancellationToken);
            var tmp2192 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2192.Name = "req";
              tmp2192.Type = TType.Struct;
              tmp2192.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2192, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeRange_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2193 = new StringBuilder("removeRange_args(");
          int tmp2194 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2194++) { tmp2193.Append(", "); }
            tmp2193.Append("Req: ");
            Req.ToString(tmp2193);
          }
          tmp2193.Append(')');
          return tmp2193.ToString();
        }
      }


      public partial class removeRange_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public removeRange_result()
        {
        }

        public removeRange_result DeepCopy()
        {
          var tmp2195 = new removeRange_result();
          if((Success != null) && __isset.success)
          {
            tmp2195.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2195.__isset.success = this.__isset.success;
          return tmp2195;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2196 = new TStruct("removeRange_result");
            await oprot.WriteStructBeginAsync(tmp2196, cancellationToken);
            var tmp2197 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2197.Name = "Success";
                tmp2197.Type = TType.Struct;
                tmp2197.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2197, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeRange_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2198 = new StringBuilder("removeRange_result(");
          int tmp2199 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2199++) { tmp2198.Append(", "); }
            tmp2198.Append("Success: ");
            Success.ToString(tmp2198);
          }
          tmp2198.Append(')');
          return tmp2198.ToString();
        }
      }


      public partial class scan_args : TBase
      {
        private global::Nebula.Meta.ScanReq _req;

        public global::Nebula.Meta.ScanReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public scan_args()
        {
        }

        public scan_args DeepCopy()
        {
          var tmp2200 = new scan_args();
          if((Req != null) && __isset.req)
          {
            tmp2200.Req = (global::Nebula.Meta.ScanReq)this.Req.DeepCopy();
          }
          tmp2200.__isset.req = this.__isset.req;
          return tmp2200;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ScanReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2201 = new TStruct("scan_args");
            await oprot.WriteStructBeginAsync(tmp2201, cancellationToken);
            var tmp2202 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2202.Name = "req";
              tmp2202.Type = TType.Struct;
              tmp2202.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2202, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is scan_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2203 = new StringBuilder("scan_args(");
          int tmp2204 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2204++) { tmp2203.Append(", "); }
            tmp2203.Append("Req: ");
            Req.ToString(tmp2203);
          }
          tmp2203.Append(')');
          return tmp2203.ToString();
        }
      }


      public partial class scan_result : TBase
      {
        private global::Nebula.Meta.ScanResp _success;

        public global::Nebula.Meta.ScanResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public scan_result()
        {
        }

        public scan_result DeepCopy()
        {
          var tmp2205 = new scan_result();
          if((Success != null) && __isset.success)
          {
            tmp2205.Success = (global::Nebula.Meta.ScanResp)this.Success.DeepCopy();
          }
          tmp2205.__isset.success = this.__isset.success;
          return tmp2205;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ScanResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2206 = new TStruct("scan_result");
            await oprot.WriteStructBeginAsync(tmp2206, cancellationToken);
            var tmp2207 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2207.Name = "Success";
                tmp2207.Type = TType.Struct;
                tmp2207.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2207, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is scan_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2208 = new StringBuilder("scan_result(");
          int tmp2209 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2209++) { tmp2208.Append(", "); }
            tmp2208.Append("Success: ");
            Success.ToString(tmp2208);
          }
          tmp2208.Append(')');
          return tmp2208.ToString();
        }
      }


      public partial class createTagIndex_args : TBase
      {
        private global::Nebula.Meta.CreateTagIndexReq _req;

        public global::Nebula.Meta.CreateTagIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createTagIndex_args()
        {
        }

        public createTagIndex_args DeepCopy()
        {
          var tmp2210 = new createTagIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2210.Req = (global::Nebula.Meta.CreateTagIndexReq)this.Req.DeepCopy();
          }
          tmp2210.__isset.req = this.__isset.req;
          return tmp2210;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateTagIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2211 = new TStruct("createTagIndex_args");
            await oprot.WriteStructBeginAsync(tmp2211, cancellationToken);
            var tmp2212 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2212.Name = "req";
              tmp2212.Type = TType.Struct;
              tmp2212.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2212, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createTagIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2213 = new StringBuilder("createTagIndex_args(");
          int tmp2214 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2214++) { tmp2213.Append(", "); }
            tmp2213.Append("Req: ");
            Req.ToString(tmp2213);
          }
          tmp2213.Append(')');
          return tmp2213.ToString();
        }
      }


      public partial class createTagIndex_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createTagIndex_result()
        {
        }

        public createTagIndex_result DeepCopy()
        {
          var tmp2215 = new createTagIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2215.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2215.__isset.success = this.__isset.success;
          return tmp2215;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2216 = new TStruct("createTagIndex_result");
            await oprot.WriteStructBeginAsync(tmp2216, cancellationToken);
            var tmp2217 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2217.Name = "Success";
                tmp2217.Type = TType.Struct;
                tmp2217.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2217, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createTagIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2218 = new StringBuilder("createTagIndex_result(");
          int tmp2219 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2219++) { tmp2218.Append(", "); }
            tmp2218.Append("Success: ");
            Success.ToString(tmp2218);
          }
          tmp2218.Append(')');
          return tmp2218.ToString();
        }
      }


      public partial class dropTagIndex_args : TBase
      {
        private global::Nebula.Meta.DropTagIndexReq _req;

        public global::Nebula.Meta.DropTagIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropTagIndex_args()
        {
        }

        public dropTagIndex_args DeepCopy()
        {
          var tmp2220 = new dropTagIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2220.Req = (global::Nebula.Meta.DropTagIndexReq)this.Req.DeepCopy();
          }
          tmp2220.__isset.req = this.__isset.req;
          return tmp2220;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropTagIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2221 = new TStruct("dropTagIndex_args");
            await oprot.WriteStructBeginAsync(tmp2221, cancellationToken);
            var tmp2222 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2222.Name = "req";
              tmp2222.Type = TType.Struct;
              tmp2222.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2222, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropTagIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2223 = new StringBuilder("dropTagIndex_args(");
          int tmp2224 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2224++) { tmp2223.Append(", "); }
            tmp2223.Append("Req: ");
            Req.ToString(tmp2223);
          }
          tmp2223.Append(')');
          return tmp2223.ToString();
        }
      }


      public partial class dropTagIndex_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropTagIndex_result()
        {
        }

        public dropTagIndex_result DeepCopy()
        {
          var tmp2225 = new dropTagIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2225.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2225.__isset.success = this.__isset.success;
          return tmp2225;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2226 = new TStruct("dropTagIndex_result");
            await oprot.WriteStructBeginAsync(tmp2226, cancellationToken);
            var tmp2227 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2227.Name = "Success";
                tmp2227.Type = TType.Struct;
                tmp2227.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2227, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropTagIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2228 = new StringBuilder("dropTagIndex_result(");
          int tmp2229 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2229++) { tmp2228.Append(", "); }
            tmp2228.Append("Success: ");
            Success.ToString(tmp2228);
          }
          tmp2228.Append(')');
          return tmp2228.ToString();
        }
      }


      public partial class getTagIndex_args : TBase
      {
        private global::Nebula.Meta.GetTagIndexReq _req;

        public global::Nebula.Meta.GetTagIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getTagIndex_args()
        {
        }

        public getTagIndex_args DeepCopy()
        {
          var tmp2230 = new getTagIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2230.Req = (global::Nebula.Meta.GetTagIndexReq)this.Req.DeepCopy();
          }
          tmp2230.__isset.req = this.__isset.req;
          return tmp2230;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetTagIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2231 = new TStruct("getTagIndex_args");
            await oprot.WriteStructBeginAsync(tmp2231, cancellationToken);
            var tmp2232 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2232.Name = "req";
              tmp2232.Type = TType.Struct;
              tmp2232.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2232, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTagIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2233 = new StringBuilder("getTagIndex_args(");
          int tmp2234 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2234++) { tmp2233.Append(", "); }
            tmp2233.Append("Req: ");
            Req.ToString(tmp2233);
          }
          tmp2233.Append(')');
          return tmp2233.ToString();
        }
      }


      public partial class getTagIndex_result : TBase
      {
        private global::Nebula.Meta.GetTagIndexResp _success;

        public global::Nebula.Meta.GetTagIndexResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getTagIndex_result()
        {
        }

        public getTagIndex_result DeepCopy()
        {
          var tmp2235 = new getTagIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2235.Success = (global::Nebula.Meta.GetTagIndexResp)this.Success.DeepCopy();
          }
          tmp2235.__isset.success = this.__isset.success;
          return tmp2235;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetTagIndexResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2236 = new TStruct("getTagIndex_result");
            await oprot.WriteStructBeginAsync(tmp2236, cancellationToken);
            var tmp2237 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2237.Name = "Success";
                tmp2237.Type = TType.Struct;
                tmp2237.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2237, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTagIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2238 = new StringBuilder("getTagIndex_result(");
          int tmp2239 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2239++) { tmp2238.Append(", "); }
            tmp2238.Append("Success: ");
            Success.ToString(tmp2238);
          }
          tmp2238.Append(')');
          return tmp2238.ToString();
        }
      }


      public partial class listTagIndexes_args : TBase
      {
        private global::Nebula.Meta.ListTagIndexesReq _req;

        public global::Nebula.Meta.ListTagIndexesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listTagIndexes_args()
        {
        }

        public listTagIndexes_args DeepCopy()
        {
          var tmp2240 = new listTagIndexes_args();
          if((Req != null) && __isset.req)
          {
            tmp2240.Req = (global::Nebula.Meta.ListTagIndexesReq)this.Req.DeepCopy();
          }
          tmp2240.__isset.req = this.__isset.req;
          return tmp2240;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListTagIndexesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2241 = new TStruct("listTagIndexes_args");
            await oprot.WriteStructBeginAsync(tmp2241, cancellationToken);
            var tmp2242 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2242.Name = "req";
              tmp2242.Type = TType.Struct;
              tmp2242.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2242, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTagIndexes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2243 = new StringBuilder("listTagIndexes_args(");
          int tmp2244 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2244++) { tmp2243.Append(", "); }
            tmp2243.Append("Req: ");
            Req.ToString(tmp2243);
          }
          tmp2243.Append(')');
          return tmp2243.ToString();
        }
      }


      public partial class listTagIndexes_result : TBase
      {
        private global::Nebula.Meta.ListTagIndexesResp _success;

        public global::Nebula.Meta.ListTagIndexesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listTagIndexes_result()
        {
        }

        public listTagIndexes_result DeepCopy()
        {
          var tmp2245 = new listTagIndexes_result();
          if((Success != null) && __isset.success)
          {
            tmp2245.Success = (global::Nebula.Meta.ListTagIndexesResp)this.Success.DeepCopy();
          }
          tmp2245.__isset.success = this.__isset.success;
          return tmp2245;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListTagIndexesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2246 = new TStruct("listTagIndexes_result");
            await oprot.WriteStructBeginAsync(tmp2246, cancellationToken);
            var tmp2247 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2247.Name = "Success";
                tmp2247.Type = TType.Struct;
                tmp2247.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2247, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTagIndexes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2248 = new StringBuilder("listTagIndexes_result(");
          int tmp2249 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2249++) { tmp2248.Append(", "); }
            tmp2248.Append("Success: ");
            Success.ToString(tmp2248);
          }
          tmp2248.Append(')');
          return tmp2248.ToString();
        }
      }


      public partial class rebuildTagIndex_args : TBase
      {
        private global::Nebula.Meta.RebuildIndexReq _req;

        public global::Nebula.Meta.RebuildIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public rebuildTagIndex_args()
        {
        }

        public rebuildTagIndex_args DeepCopy()
        {
          var tmp2250 = new rebuildTagIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2250.Req = (global::Nebula.Meta.RebuildIndexReq)this.Req.DeepCopy();
          }
          tmp2250.__isset.req = this.__isset.req;
          return tmp2250;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.RebuildIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2251 = new TStruct("rebuildTagIndex_args");
            await oprot.WriteStructBeginAsync(tmp2251, cancellationToken);
            var tmp2252 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2252.Name = "req";
              tmp2252.Type = TType.Struct;
              tmp2252.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2252, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebuildTagIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2253 = new StringBuilder("rebuildTagIndex_args(");
          int tmp2254 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2254++) { tmp2253.Append(", "); }
            tmp2253.Append("Req: ");
            Req.ToString(tmp2253);
          }
          tmp2253.Append(')');
          return tmp2253.ToString();
        }
      }


      public partial class rebuildTagIndex_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public rebuildTagIndex_result()
        {
        }

        public rebuildTagIndex_result DeepCopy()
        {
          var tmp2255 = new rebuildTagIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2255.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2255.__isset.success = this.__isset.success;
          return tmp2255;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2256 = new TStruct("rebuildTagIndex_result");
            await oprot.WriteStructBeginAsync(tmp2256, cancellationToken);
            var tmp2257 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2257.Name = "Success";
                tmp2257.Type = TType.Struct;
                tmp2257.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2257, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebuildTagIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2258 = new StringBuilder("rebuildTagIndex_result(");
          int tmp2259 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2259++) { tmp2258.Append(", "); }
            tmp2258.Append("Success: ");
            Success.ToString(tmp2258);
          }
          tmp2258.Append(')');
          return tmp2258.ToString();
        }
      }


      public partial class listTagIndexStatus_args : TBase
      {
        private global::Nebula.Meta.ListIndexStatusReq _req;

        public global::Nebula.Meta.ListIndexStatusReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listTagIndexStatus_args()
        {
        }

        public listTagIndexStatus_args DeepCopy()
        {
          var tmp2260 = new listTagIndexStatus_args();
          if((Req != null) && __isset.req)
          {
            tmp2260.Req = (global::Nebula.Meta.ListIndexStatusReq)this.Req.DeepCopy();
          }
          tmp2260.__isset.req = this.__isset.req;
          return tmp2260;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListIndexStatusReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2261 = new TStruct("listTagIndexStatus_args");
            await oprot.WriteStructBeginAsync(tmp2261, cancellationToken);
            var tmp2262 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2262.Name = "req";
              tmp2262.Type = TType.Struct;
              tmp2262.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2262, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTagIndexStatus_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2263 = new StringBuilder("listTagIndexStatus_args(");
          int tmp2264 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2264++) { tmp2263.Append(", "); }
            tmp2263.Append("Req: ");
            Req.ToString(tmp2263);
          }
          tmp2263.Append(')');
          return tmp2263.ToString();
        }
      }


      public partial class listTagIndexStatus_result : TBase
      {
        private global::Nebula.Meta.ListIndexStatusResp _success;

        public global::Nebula.Meta.ListIndexStatusResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listTagIndexStatus_result()
        {
        }

        public listTagIndexStatus_result DeepCopy()
        {
          var tmp2265 = new listTagIndexStatus_result();
          if((Success != null) && __isset.success)
          {
            tmp2265.Success = (global::Nebula.Meta.ListIndexStatusResp)this.Success.DeepCopy();
          }
          tmp2265.__isset.success = this.__isset.success;
          return tmp2265;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListIndexStatusResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2266 = new TStruct("listTagIndexStatus_result");
            await oprot.WriteStructBeginAsync(tmp2266, cancellationToken);
            var tmp2267 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2267.Name = "Success";
                tmp2267.Type = TType.Struct;
                tmp2267.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2267, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listTagIndexStatus_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2268 = new StringBuilder("listTagIndexStatus_result(");
          int tmp2269 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2269++) { tmp2268.Append(", "); }
            tmp2268.Append("Success: ");
            Success.ToString(tmp2268);
          }
          tmp2268.Append(')');
          return tmp2268.ToString();
        }
      }


      public partial class createEdgeIndex_args : TBase
      {
        private global::Nebula.Meta.CreateEdgeIndexReq _req;

        public global::Nebula.Meta.CreateEdgeIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createEdgeIndex_args()
        {
        }

        public createEdgeIndex_args DeepCopy()
        {
          var tmp2270 = new createEdgeIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2270.Req = (global::Nebula.Meta.CreateEdgeIndexReq)this.Req.DeepCopy();
          }
          tmp2270.__isset.req = this.__isset.req;
          return tmp2270;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateEdgeIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2271 = new TStruct("createEdgeIndex_args");
            await oprot.WriteStructBeginAsync(tmp2271, cancellationToken);
            var tmp2272 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2272.Name = "req";
              tmp2272.Type = TType.Struct;
              tmp2272.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2272, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createEdgeIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2273 = new StringBuilder("createEdgeIndex_args(");
          int tmp2274 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2274++) { tmp2273.Append(", "); }
            tmp2273.Append("Req: ");
            Req.ToString(tmp2273);
          }
          tmp2273.Append(')');
          return tmp2273.ToString();
        }
      }


      public partial class createEdgeIndex_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createEdgeIndex_result()
        {
        }

        public createEdgeIndex_result DeepCopy()
        {
          var tmp2275 = new createEdgeIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2275.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2275.__isset.success = this.__isset.success;
          return tmp2275;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2276 = new TStruct("createEdgeIndex_result");
            await oprot.WriteStructBeginAsync(tmp2276, cancellationToken);
            var tmp2277 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2277.Name = "Success";
                tmp2277.Type = TType.Struct;
                tmp2277.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2277, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createEdgeIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2278 = new StringBuilder("createEdgeIndex_result(");
          int tmp2279 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2279++) { tmp2278.Append(", "); }
            tmp2278.Append("Success: ");
            Success.ToString(tmp2278);
          }
          tmp2278.Append(')');
          return tmp2278.ToString();
        }
      }


      public partial class dropEdgeIndex_args : TBase
      {
        private global::Nebula.Meta.DropEdgeIndexReq _req;

        public global::Nebula.Meta.DropEdgeIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropEdgeIndex_args()
        {
        }

        public dropEdgeIndex_args DeepCopy()
        {
          var tmp2280 = new dropEdgeIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2280.Req = (global::Nebula.Meta.DropEdgeIndexReq)this.Req.DeepCopy();
          }
          tmp2280.__isset.req = this.__isset.req;
          return tmp2280;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropEdgeIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2281 = new TStruct("dropEdgeIndex_args");
            await oprot.WriteStructBeginAsync(tmp2281, cancellationToken);
            var tmp2282 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2282.Name = "req";
              tmp2282.Type = TType.Struct;
              tmp2282.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2282, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropEdgeIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2283 = new StringBuilder("dropEdgeIndex_args(");
          int tmp2284 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2284++) { tmp2283.Append(", "); }
            tmp2283.Append("Req: ");
            Req.ToString(tmp2283);
          }
          tmp2283.Append(')');
          return tmp2283.ToString();
        }
      }


      public partial class dropEdgeIndex_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropEdgeIndex_result()
        {
        }

        public dropEdgeIndex_result DeepCopy()
        {
          var tmp2285 = new dropEdgeIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2285.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2285.__isset.success = this.__isset.success;
          return tmp2285;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2286 = new TStruct("dropEdgeIndex_result");
            await oprot.WriteStructBeginAsync(tmp2286, cancellationToken);
            var tmp2287 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2287.Name = "Success";
                tmp2287.Type = TType.Struct;
                tmp2287.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2287, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropEdgeIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2288 = new StringBuilder("dropEdgeIndex_result(");
          int tmp2289 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2289++) { tmp2288.Append(", "); }
            tmp2288.Append("Success: ");
            Success.ToString(tmp2288);
          }
          tmp2288.Append(')');
          return tmp2288.ToString();
        }
      }


      public partial class getEdgeIndex_args : TBase
      {
        private global::Nebula.Meta.GetEdgeIndexReq _req;

        public global::Nebula.Meta.GetEdgeIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getEdgeIndex_args()
        {
        }

        public getEdgeIndex_args DeepCopy()
        {
          var tmp2290 = new getEdgeIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2290.Req = (global::Nebula.Meta.GetEdgeIndexReq)this.Req.DeepCopy();
          }
          tmp2290.__isset.req = this.__isset.req;
          return tmp2290;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetEdgeIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2291 = new TStruct("getEdgeIndex_args");
            await oprot.WriteStructBeginAsync(tmp2291, cancellationToken);
            var tmp2292 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2292.Name = "req";
              tmp2292.Type = TType.Struct;
              tmp2292.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2292, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getEdgeIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2293 = new StringBuilder("getEdgeIndex_args(");
          int tmp2294 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2294++) { tmp2293.Append(", "); }
            tmp2293.Append("Req: ");
            Req.ToString(tmp2293);
          }
          tmp2293.Append(')');
          return tmp2293.ToString();
        }
      }


      public partial class getEdgeIndex_result : TBase
      {
        private global::Nebula.Meta.GetEdgeIndexResp _success;

        public global::Nebula.Meta.GetEdgeIndexResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getEdgeIndex_result()
        {
        }

        public getEdgeIndex_result DeepCopy()
        {
          var tmp2295 = new getEdgeIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2295.Success = (global::Nebula.Meta.GetEdgeIndexResp)this.Success.DeepCopy();
          }
          tmp2295.__isset.success = this.__isset.success;
          return tmp2295;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetEdgeIndexResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2296 = new TStruct("getEdgeIndex_result");
            await oprot.WriteStructBeginAsync(tmp2296, cancellationToken);
            var tmp2297 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2297.Name = "Success";
                tmp2297.Type = TType.Struct;
                tmp2297.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2297, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getEdgeIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2298 = new StringBuilder("getEdgeIndex_result(");
          int tmp2299 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2299++) { tmp2298.Append(", "); }
            tmp2298.Append("Success: ");
            Success.ToString(tmp2298);
          }
          tmp2298.Append(')');
          return tmp2298.ToString();
        }
      }


      public partial class listEdgeIndexes_args : TBase
      {
        private global::Nebula.Meta.ListEdgeIndexesReq _req;

        public global::Nebula.Meta.ListEdgeIndexesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listEdgeIndexes_args()
        {
        }

        public listEdgeIndexes_args DeepCopy()
        {
          var tmp2300 = new listEdgeIndexes_args();
          if((Req != null) && __isset.req)
          {
            tmp2300.Req = (global::Nebula.Meta.ListEdgeIndexesReq)this.Req.DeepCopy();
          }
          tmp2300.__isset.req = this.__isset.req;
          return tmp2300;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListEdgeIndexesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2301 = new TStruct("listEdgeIndexes_args");
            await oprot.WriteStructBeginAsync(tmp2301, cancellationToken);
            var tmp2302 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2302.Name = "req";
              tmp2302.Type = TType.Struct;
              tmp2302.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2302, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listEdgeIndexes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2303 = new StringBuilder("listEdgeIndexes_args(");
          int tmp2304 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2304++) { tmp2303.Append(", "); }
            tmp2303.Append("Req: ");
            Req.ToString(tmp2303);
          }
          tmp2303.Append(')');
          return tmp2303.ToString();
        }
      }


      public partial class listEdgeIndexes_result : TBase
      {
        private global::Nebula.Meta.ListEdgeIndexesResp _success;

        public global::Nebula.Meta.ListEdgeIndexesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listEdgeIndexes_result()
        {
        }

        public listEdgeIndexes_result DeepCopy()
        {
          var tmp2305 = new listEdgeIndexes_result();
          if((Success != null) && __isset.success)
          {
            tmp2305.Success = (global::Nebula.Meta.ListEdgeIndexesResp)this.Success.DeepCopy();
          }
          tmp2305.__isset.success = this.__isset.success;
          return tmp2305;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListEdgeIndexesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2306 = new TStruct("listEdgeIndexes_result");
            await oprot.WriteStructBeginAsync(tmp2306, cancellationToken);
            var tmp2307 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2307.Name = "Success";
                tmp2307.Type = TType.Struct;
                tmp2307.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2307, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listEdgeIndexes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2308 = new StringBuilder("listEdgeIndexes_result(");
          int tmp2309 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2309++) { tmp2308.Append(", "); }
            tmp2308.Append("Success: ");
            Success.ToString(tmp2308);
          }
          tmp2308.Append(')');
          return tmp2308.ToString();
        }
      }


      public partial class rebuildEdgeIndex_args : TBase
      {
        private global::Nebula.Meta.RebuildIndexReq _req;

        public global::Nebula.Meta.RebuildIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public rebuildEdgeIndex_args()
        {
        }

        public rebuildEdgeIndex_args DeepCopy()
        {
          var tmp2310 = new rebuildEdgeIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2310.Req = (global::Nebula.Meta.RebuildIndexReq)this.Req.DeepCopy();
          }
          tmp2310.__isset.req = this.__isset.req;
          return tmp2310;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.RebuildIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2311 = new TStruct("rebuildEdgeIndex_args");
            await oprot.WriteStructBeginAsync(tmp2311, cancellationToken);
            var tmp2312 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2312.Name = "req";
              tmp2312.Type = TType.Struct;
              tmp2312.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2312, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebuildEdgeIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2313 = new StringBuilder("rebuildEdgeIndex_args(");
          int tmp2314 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2314++) { tmp2313.Append(", "); }
            tmp2313.Append("Req: ");
            Req.ToString(tmp2313);
          }
          tmp2313.Append(')');
          return tmp2313.ToString();
        }
      }


      public partial class rebuildEdgeIndex_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public rebuildEdgeIndex_result()
        {
        }

        public rebuildEdgeIndex_result DeepCopy()
        {
          var tmp2315 = new rebuildEdgeIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2315.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2315.__isset.success = this.__isset.success;
          return tmp2315;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2316 = new TStruct("rebuildEdgeIndex_result");
            await oprot.WriteStructBeginAsync(tmp2316, cancellationToken);
            var tmp2317 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2317.Name = "Success";
                tmp2317.Type = TType.Struct;
                tmp2317.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2317, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebuildEdgeIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2318 = new StringBuilder("rebuildEdgeIndex_result(");
          int tmp2319 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2319++) { tmp2318.Append(", "); }
            tmp2318.Append("Success: ");
            Success.ToString(tmp2318);
          }
          tmp2318.Append(')');
          return tmp2318.ToString();
        }
      }


      public partial class listEdgeIndexStatus_args : TBase
      {
        private global::Nebula.Meta.ListIndexStatusReq _req;

        public global::Nebula.Meta.ListIndexStatusReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listEdgeIndexStatus_args()
        {
        }

        public listEdgeIndexStatus_args DeepCopy()
        {
          var tmp2320 = new listEdgeIndexStatus_args();
          if((Req != null) && __isset.req)
          {
            tmp2320.Req = (global::Nebula.Meta.ListIndexStatusReq)this.Req.DeepCopy();
          }
          tmp2320.__isset.req = this.__isset.req;
          return tmp2320;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListIndexStatusReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2321 = new TStruct("listEdgeIndexStatus_args");
            await oprot.WriteStructBeginAsync(tmp2321, cancellationToken);
            var tmp2322 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2322.Name = "req";
              tmp2322.Type = TType.Struct;
              tmp2322.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2322, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listEdgeIndexStatus_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2323 = new StringBuilder("listEdgeIndexStatus_args(");
          int tmp2324 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2324++) { tmp2323.Append(", "); }
            tmp2323.Append("Req: ");
            Req.ToString(tmp2323);
          }
          tmp2323.Append(')');
          return tmp2323.ToString();
        }
      }


      public partial class listEdgeIndexStatus_result : TBase
      {
        private global::Nebula.Meta.ListIndexStatusResp _success;

        public global::Nebula.Meta.ListIndexStatusResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listEdgeIndexStatus_result()
        {
        }

        public listEdgeIndexStatus_result DeepCopy()
        {
          var tmp2325 = new listEdgeIndexStatus_result();
          if((Success != null) && __isset.success)
          {
            tmp2325.Success = (global::Nebula.Meta.ListIndexStatusResp)this.Success.DeepCopy();
          }
          tmp2325.__isset.success = this.__isset.success;
          return tmp2325;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListIndexStatusResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2326 = new TStruct("listEdgeIndexStatus_result");
            await oprot.WriteStructBeginAsync(tmp2326, cancellationToken);
            var tmp2327 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2327.Name = "Success";
                tmp2327.Type = TType.Struct;
                tmp2327.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2327, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listEdgeIndexStatus_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2328 = new StringBuilder("listEdgeIndexStatus_result(");
          int tmp2329 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2329++) { tmp2328.Append(", "); }
            tmp2328.Append("Success: ");
            Success.ToString(tmp2328);
          }
          tmp2328.Append(')');
          return tmp2328.ToString();
        }
      }


      public partial class createUser_args : TBase
      {
        private global::Nebula.Meta.CreateUserReq _req;

        public global::Nebula.Meta.CreateUserReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createUser_args()
        {
        }

        public createUser_args DeepCopy()
        {
          var tmp2330 = new createUser_args();
          if((Req != null) && __isset.req)
          {
            tmp2330.Req = (global::Nebula.Meta.CreateUserReq)this.Req.DeepCopy();
          }
          tmp2330.__isset.req = this.__isset.req;
          return tmp2330;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateUserReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2331 = new TStruct("createUser_args");
            await oprot.WriteStructBeginAsync(tmp2331, cancellationToken);
            var tmp2332 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2332.Name = "req";
              tmp2332.Type = TType.Struct;
              tmp2332.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2332, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createUser_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2333 = new StringBuilder("createUser_args(");
          int tmp2334 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2334++) { tmp2333.Append(", "); }
            tmp2333.Append("Req: ");
            Req.ToString(tmp2333);
          }
          tmp2333.Append(')');
          return tmp2333.ToString();
        }
      }


      public partial class createUser_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createUser_result()
        {
        }

        public createUser_result DeepCopy()
        {
          var tmp2335 = new createUser_result();
          if((Success != null) && __isset.success)
          {
            tmp2335.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2335.__isset.success = this.__isset.success;
          return tmp2335;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2336 = new TStruct("createUser_result");
            await oprot.WriteStructBeginAsync(tmp2336, cancellationToken);
            var tmp2337 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2337.Name = "Success";
                tmp2337.Type = TType.Struct;
                tmp2337.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2337, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createUser_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2338 = new StringBuilder("createUser_result(");
          int tmp2339 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2339++) { tmp2338.Append(", "); }
            tmp2338.Append("Success: ");
            Success.ToString(tmp2338);
          }
          tmp2338.Append(')');
          return tmp2338.ToString();
        }
      }


      public partial class dropUser_args : TBase
      {
        private global::Nebula.Meta.DropUserReq _req;

        public global::Nebula.Meta.DropUserReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropUser_args()
        {
        }

        public dropUser_args DeepCopy()
        {
          var tmp2340 = new dropUser_args();
          if((Req != null) && __isset.req)
          {
            tmp2340.Req = (global::Nebula.Meta.DropUserReq)this.Req.DeepCopy();
          }
          tmp2340.__isset.req = this.__isset.req;
          return tmp2340;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropUserReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2341 = new TStruct("dropUser_args");
            await oprot.WriteStructBeginAsync(tmp2341, cancellationToken);
            var tmp2342 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2342.Name = "req";
              tmp2342.Type = TType.Struct;
              tmp2342.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2342, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropUser_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2343 = new StringBuilder("dropUser_args(");
          int tmp2344 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2344++) { tmp2343.Append(", "); }
            tmp2343.Append("Req: ");
            Req.ToString(tmp2343);
          }
          tmp2343.Append(')');
          return tmp2343.ToString();
        }
      }


      public partial class dropUser_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropUser_result()
        {
        }

        public dropUser_result DeepCopy()
        {
          var tmp2345 = new dropUser_result();
          if((Success != null) && __isset.success)
          {
            tmp2345.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2345.__isset.success = this.__isset.success;
          return tmp2345;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2346 = new TStruct("dropUser_result");
            await oprot.WriteStructBeginAsync(tmp2346, cancellationToken);
            var tmp2347 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2347.Name = "Success";
                tmp2347.Type = TType.Struct;
                tmp2347.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2347, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropUser_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2348 = new StringBuilder("dropUser_result(");
          int tmp2349 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2349++) { tmp2348.Append(", "); }
            tmp2348.Append("Success: ");
            Success.ToString(tmp2348);
          }
          tmp2348.Append(')');
          return tmp2348.ToString();
        }
      }


      public partial class alterUser_args : TBase
      {
        private global::Nebula.Meta.AlterUserReq _req;

        public global::Nebula.Meta.AlterUserReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public alterUser_args()
        {
        }

        public alterUser_args DeepCopy()
        {
          var tmp2350 = new alterUser_args();
          if((Req != null) && __isset.req)
          {
            tmp2350.Req = (global::Nebula.Meta.AlterUserReq)this.Req.DeepCopy();
          }
          tmp2350.__isset.req = this.__isset.req;
          return tmp2350;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.AlterUserReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2351 = new TStruct("alterUser_args");
            await oprot.WriteStructBeginAsync(tmp2351, cancellationToken);
            var tmp2352 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2352.Name = "req";
              tmp2352.Type = TType.Struct;
              tmp2352.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2352, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is alterUser_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2353 = new StringBuilder("alterUser_args(");
          int tmp2354 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2354++) { tmp2353.Append(", "); }
            tmp2353.Append("Req: ");
            Req.ToString(tmp2353);
          }
          tmp2353.Append(')');
          return tmp2353.ToString();
        }
      }


      public partial class alterUser_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public alterUser_result()
        {
        }

        public alterUser_result DeepCopy()
        {
          var tmp2355 = new alterUser_result();
          if((Success != null) && __isset.success)
          {
            tmp2355.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2355.__isset.success = this.__isset.success;
          return tmp2355;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2356 = new TStruct("alterUser_result");
            await oprot.WriteStructBeginAsync(tmp2356, cancellationToken);
            var tmp2357 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2357.Name = "Success";
                tmp2357.Type = TType.Struct;
                tmp2357.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2357, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is alterUser_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2358 = new StringBuilder("alterUser_result(");
          int tmp2359 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2359++) { tmp2358.Append(", "); }
            tmp2358.Append("Success: ");
            Success.ToString(tmp2358);
          }
          tmp2358.Append(')');
          return tmp2358.ToString();
        }
      }


      public partial class grantRole_args : TBase
      {
        private global::Nebula.Meta.GrantRoleReq _req;

        public global::Nebula.Meta.GrantRoleReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public grantRole_args()
        {
        }

        public grantRole_args DeepCopy()
        {
          var tmp2360 = new grantRole_args();
          if((Req != null) && __isset.req)
          {
            tmp2360.Req = (global::Nebula.Meta.GrantRoleReq)this.Req.DeepCopy();
          }
          tmp2360.__isset.req = this.__isset.req;
          return tmp2360;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GrantRoleReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2361 = new TStruct("grantRole_args");
            await oprot.WriteStructBeginAsync(tmp2361, cancellationToken);
            var tmp2362 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2362.Name = "req";
              tmp2362.Type = TType.Struct;
              tmp2362.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2362, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is grantRole_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2363 = new StringBuilder("grantRole_args(");
          int tmp2364 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2364++) { tmp2363.Append(", "); }
            tmp2363.Append("Req: ");
            Req.ToString(tmp2363);
          }
          tmp2363.Append(')');
          return tmp2363.ToString();
        }
      }


      public partial class grantRole_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public grantRole_result()
        {
        }

        public grantRole_result DeepCopy()
        {
          var tmp2365 = new grantRole_result();
          if((Success != null) && __isset.success)
          {
            tmp2365.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2365.__isset.success = this.__isset.success;
          return tmp2365;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2366 = new TStruct("grantRole_result");
            await oprot.WriteStructBeginAsync(tmp2366, cancellationToken);
            var tmp2367 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2367.Name = "Success";
                tmp2367.Type = TType.Struct;
                tmp2367.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2367, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is grantRole_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2368 = new StringBuilder("grantRole_result(");
          int tmp2369 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2369++) { tmp2368.Append(", "); }
            tmp2368.Append("Success: ");
            Success.ToString(tmp2368);
          }
          tmp2368.Append(')');
          return tmp2368.ToString();
        }
      }


      public partial class revokeRole_args : TBase
      {
        private global::Nebula.Meta.RevokeRoleReq _req;

        public global::Nebula.Meta.RevokeRoleReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public revokeRole_args()
        {
        }

        public revokeRole_args DeepCopy()
        {
          var tmp2370 = new revokeRole_args();
          if((Req != null) && __isset.req)
          {
            tmp2370.Req = (global::Nebula.Meta.RevokeRoleReq)this.Req.DeepCopy();
          }
          tmp2370.__isset.req = this.__isset.req;
          return tmp2370;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.RevokeRoleReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2371 = new TStruct("revokeRole_args");
            await oprot.WriteStructBeginAsync(tmp2371, cancellationToken);
            var tmp2372 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2372.Name = "req";
              tmp2372.Type = TType.Struct;
              tmp2372.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2372, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is revokeRole_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2373 = new StringBuilder("revokeRole_args(");
          int tmp2374 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2374++) { tmp2373.Append(", "); }
            tmp2373.Append("Req: ");
            Req.ToString(tmp2373);
          }
          tmp2373.Append(')');
          return tmp2373.ToString();
        }
      }


      public partial class revokeRole_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public revokeRole_result()
        {
        }

        public revokeRole_result DeepCopy()
        {
          var tmp2375 = new revokeRole_result();
          if((Success != null) && __isset.success)
          {
            tmp2375.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2375.__isset.success = this.__isset.success;
          return tmp2375;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2376 = new TStruct("revokeRole_result");
            await oprot.WriteStructBeginAsync(tmp2376, cancellationToken);
            var tmp2377 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2377.Name = "Success";
                tmp2377.Type = TType.Struct;
                tmp2377.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2377, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is revokeRole_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2378 = new StringBuilder("revokeRole_result(");
          int tmp2379 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2379++) { tmp2378.Append(", "); }
            tmp2378.Append("Success: ");
            Success.ToString(tmp2378);
          }
          tmp2378.Append(')');
          return tmp2378.ToString();
        }
      }


      public partial class listUsers_args : TBase
      {
        private global::Nebula.Meta.ListUsersReq _req;

        public global::Nebula.Meta.ListUsersReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listUsers_args()
        {
        }

        public listUsers_args DeepCopy()
        {
          var tmp2380 = new listUsers_args();
          if((Req != null) && __isset.req)
          {
            tmp2380.Req = (global::Nebula.Meta.ListUsersReq)this.Req.DeepCopy();
          }
          tmp2380.__isset.req = this.__isset.req;
          return tmp2380;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListUsersReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2381 = new TStruct("listUsers_args");
            await oprot.WriteStructBeginAsync(tmp2381, cancellationToken);
            var tmp2382 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2382.Name = "req";
              tmp2382.Type = TType.Struct;
              tmp2382.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2382, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listUsers_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2383 = new StringBuilder("listUsers_args(");
          int tmp2384 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2384++) { tmp2383.Append(", "); }
            tmp2383.Append("Req: ");
            Req.ToString(tmp2383);
          }
          tmp2383.Append(')');
          return tmp2383.ToString();
        }
      }


      public partial class listUsers_result : TBase
      {
        private global::Nebula.Meta.ListUsersResp _success;

        public global::Nebula.Meta.ListUsersResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listUsers_result()
        {
        }

        public listUsers_result DeepCopy()
        {
          var tmp2385 = new listUsers_result();
          if((Success != null) && __isset.success)
          {
            tmp2385.Success = (global::Nebula.Meta.ListUsersResp)this.Success.DeepCopy();
          }
          tmp2385.__isset.success = this.__isset.success;
          return tmp2385;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListUsersResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2386 = new TStruct("listUsers_result");
            await oprot.WriteStructBeginAsync(tmp2386, cancellationToken);
            var tmp2387 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2387.Name = "Success";
                tmp2387.Type = TType.Struct;
                tmp2387.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2387, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listUsers_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2388 = new StringBuilder("listUsers_result(");
          int tmp2389 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2389++) { tmp2388.Append(", "); }
            tmp2388.Append("Success: ");
            Success.ToString(tmp2388);
          }
          tmp2388.Append(')');
          return tmp2388.ToString();
        }
      }


      public partial class listRoles_args : TBase
      {
        private global::Nebula.Meta.ListRolesReq _req;

        public global::Nebula.Meta.ListRolesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listRoles_args()
        {
        }

        public listRoles_args DeepCopy()
        {
          var tmp2390 = new listRoles_args();
          if((Req != null) && __isset.req)
          {
            tmp2390.Req = (global::Nebula.Meta.ListRolesReq)this.Req.DeepCopy();
          }
          tmp2390.__isset.req = this.__isset.req;
          return tmp2390;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListRolesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2391 = new TStruct("listRoles_args");
            await oprot.WriteStructBeginAsync(tmp2391, cancellationToken);
            var tmp2392 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2392.Name = "req";
              tmp2392.Type = TType.Struct;
              tmp2392.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2392, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listRoles_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2393 = new StringBuilder("listRoles_args(");
          int tmp2394 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2394++) { tmp2393.Append(", "); }
            tmp2393.Append("Req: ");
            Req.ToString(tmp2393);
          }
          tmp2393.Append(')');
          return tmp2393.ToString();
        }
      }


      public partial class listRoles_result : TBase
      {
        private global::Nebula.Meta.ListRolesResp _success;

        public global::Nebula.Meta.ListRolesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listRoles_result()
        {
        }

        public listRoles_result DeepCopy()
        {
          var tmp2395 = new listRoles_result();
          if((Success != null) && __isset.success)
          {
            tmp2395.Success = (global::Nebula.Meta.ListRolesResp)this.Success.DeepCopy();
          }
          tmp2395.__isset.success = this.__isset.success;
          return tmp2395;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListRolesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2396 = new TStruct("listRoles_result");
            await oprot.WriteStructBeginAsync(tmp2396, cancellationToken);
            var tmp2397 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2397.Name = "Success";
                tmp2397.Type = TType.Struct;
                tmp2397.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2397, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listRoles_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2398 = new StringBuilder("listRoles_result(");
          int tmp2399 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2399++) { tmp2398.Append(", "); }
            tmp2398.Append("Success: ");
            Success.ToString(tmp2398);
          }
          tmp2398.Append(')');
          return tmp2398.ToString();
        }
      }


      public partial class getUserRoles_args : TBase
      {
        private global::Nebula.Meta.GetUserRolesReq _req;

        public global::Nebula.Meta.GetUserRolesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getUserRoles_args()
        {
        }

        public getUserRoles_args DeepCopy()
        {
          var tmp2400 = new getUserRoles_args();
          if((Req != null) && __isset.req)
          {
            tmp2400.Req = (global::Nebula.Meta.GetUserRolesReq)this.Req.DeepCopy();
          }
          tmp2400.__isset.req = this.__isset.req;
          return tmp2400;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetUserRolesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2401 = new TStruct("getUserRoles_args");
            await oprot.WriteStructBeginAsync(tmp2401, cancellationToken);
            var tmp2402 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2402.Name = "req";
              tmp2402.Type = TType.Struct;
              tmp2402.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2402, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUserRoles_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2403 = new StringBuilder("getUserRoles_args(");
          int tmp2404 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2404++) { tmp2403.Append(", "); }
            tmp2403.Append("Req: ");
            Req.ToString(tmp2403);
          }
          tmp2403.Append(')');
          return tmp2403.ToString();
        }
      }


      public partial class getUserRoles_result : TBase
      {
        private global::Nebula.Meta.ListRolesResp _success;

        public global::Nebula.Meta.ListRolesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getUserRoles_result()
        {
        }

        public getUserRoles_result DeepCopy()
        {
          var tmp2405 = new getUserRoles_result();
          if((Success != null) && __isset.success)
          {
            tmp2405.Success = (global::Nebula.Meta.ListRolesResp)this.Success.DeepCopy();
          }
          tmp2405.__isset.success = this.__isset.success;
          return tmp2405;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListRolesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2406 = new TStruct("getUserRoles_result");
            await oprot.WriteStructBeginAsync(tmp2406, cancellationToken);
            var tmp2407 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2407.Name = "Success";
                tmp2407.Type = TType.Struct;
                tmp2407.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2407, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUserRoles_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2408 = new StringBuilder("getUserRoles_result(");
          int tmp2409 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2409++) { tmp2408.Append(", "); }
            tmp2408.Append("Success: ");
            Success.ToString(tmp2408);
          }
          tmp2408.Append(')');
          return tmp2408.ToString();
        }
      }


      public partial class changePassword_args : TBase
      {
        private global::Nebula.Meta.ChangePasswordReq _req;

        public global::Nebula.Meta.ChangePasswordReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public changePassword_args()
        {
        }

        public changePassword_args DeepCopy()
        {
          var tmp2410 = new changePassword_args();
          if((Req != null) && __isset.req)
          {
            tmp2410.Req = (global::Nebula.Meta.ChangePasswordReq)this.Req.DeepCopy();
          }
          tmp2410.__isset.req = this.__isset.req;
          return tmp2410;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ChangePasswordReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2411 = new TStruct("changePassword_args");
            await oprot.WriteStructBeginAsync(tmp2411, cancellationToken);
            var tmp2412 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2412.Name = "req";
              tmp2412.Type = TType.Struct;
              tmp2412.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2412, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is changePassword_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2413 = new StringBuilder("changePassword_args(");
          int tmp2414 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2414++) { tmp2413.Append(", "); }
            tmp2413.Append("Req: ");
            Req.ToString(tmp2413);
          }
          tmp2413.Append(')');
          return tmp2413.ToString();
        }
      }


      public partial class changePassword_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public changePassword_result()
        {
        }

        public changePassword_result DeepCopy()
        {
          var tmp2415 = new changePassword_result();
          if((Success != null) && __isset.success)
          {
            tmp2415.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2415.__isset.success = this.__isset.success;
          return tmp2415;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2416 = new TStruct("changePassword_result");
            await oprot.WriteStructBeginAsync(tmp2416, cancellationToken);
            var tmp2417 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2417.Name = "Success";
                tmp2417.Type = TType.Struct;
                tmp2417.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2417, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is changePassword_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2418 = new StringBuilder("changePassword_result(");
          int tmp2419 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2419++) { tmp2418.Append(", "); }
            tmp2418.Append("Success: ");
            Success.ToString(tmp2418);
          }
          tmp2418.Append(')');
          return tmp2418.ToString();
        }
      }


      public partial class heartBeat_args : TBase
      {
        private global::Nebula.Meta.HBReq _req;

        public global::Nebula.Meta.HBReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public heartBeat_args()
        {
        }

        public heartBeat_args DeepCopy()
        {
          var tmp2420 = new heartBeat_args();
          if((Req != null) && __isset.req)
          {
            tmp2420.Req = (global::Nebula.Meta.HBReq)this.Req.DeepCopy();
          }
          tmp2420.__isset.req = this.__isset.req;
          return tmp2420;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.HBReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2421 = new TStruct("heartBeat_args");
            await oprot.WriteStructBeginAsync(tmp2421, cancellationToken);
            var tmp2422 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2422.Name = "req";
              tmp2422.Type = TType.Struct;
              tmp2422.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2422, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is heartBeat_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2423 = new StringBuilder("heartBeat_args(");
          int tmp2424 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2424++) { tmp2423.Append(", "); }
            tmp2423.Append("Req: ");
            Req.ToString(tmp2423);
          }
          tmp2423.Append(')');
          return tmp2423.ToString();
        }
      }


      public partial class heartBeat_result : TBase
      {
        private global::Nebula.Meta.HBResp _success;

        public global::Nebula.Meta.HBResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public heartBeat_result()
        {
        }

        public heartBeat_result DeepCopy()
        {
          var tmp2425 = new heartBeat_result();
          if((Success != null) && __isset.success)
          {
            tmp2425.Success = (global::Nebula.Meta.HBResp)this.Success.DeepCopy();
          }
          tmp2425.__isset.success = this.__isset.success;
          return tmp2425;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.HBResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2426 = new TStruct("heartBeat_result");
            await oprot.WriteStructBeginAsync(tmp2426, cancellationToken);
            var tmp2427 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2427.Name = "Success";
                tmp2427.Type = TType.Struct;
                tmp2427.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2427, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is heartBeat_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2428 = new StringBuilder("heartBeat_result(");
          int tmp2429 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2429++) { tmp2428.Append(", "); }
            tmp2428.Append("Success: ");
            Success.ToString(tmp2428);
          }
          tmp2428.Append(')');
          return tmp2428.ToString();
        }
      }


      public partial class balance_args : TBase
      {
        private global::Nebula.Meta.BalanceReq _req;

        public global::Nebula.Meta.BalanceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public balance_args()
        {
        }

        public balance_args DeepCopy()
        {
          var tmp2430 = new balance_args();
          if((Req != null) && __isset.req)
          {
            tmp2430.Req = (global::Nebula.Meta.BalanceReq)this.Req.DeepCopy();
          }
          tmp2430.__isset.req = this.__isset.req;
          return tmp2430;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.BalanceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2431 = new TStruct("balance_args");
            await oprot.WriteStructBeginAsync(tmp2431, cancellationToken);
            var tmp2432 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2432.Name = "req";
              tmp2432.Type = TType.Struct;
              tmp2432.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2432, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is balance_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2433 = new StringBuilder("balance_args(");
          int tmp2434 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2434++) { tmp2433.Append(", "); }
            tmp2433.Append("Req: ");
            Req.ToString(tmp2433);
          }
          tmp2433.Append(')');
          return tmp2433.ToString();
        }
      }


      public partial class balance_result : TBase
      {
        private global::Nebula.Meta.BalanceResp _success;

        public global::Nebula.Meta.BalanceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public balance_result()
        {
        }

        public balance_result DeepCopy()
        {
          var tmp2435 = new balance_result();
          if((Success != null) && __isset.success)
          {
            tmp2435.Success = (global::Nebula.Meta.BalanceResp)this.Success.DeepCopy();
          }
          tmp2435.__isset.success = this.__isset.success;
          return tmp2435;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.BalanceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2436 = new TStruct("balance_result");
            await oprot.WriteStructBeginAsync(tmp2436, cancellationToken);
            var tmp2437 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2437.Name = "Success";
                tmp2437.Type = TType.Struct;
                tmp2437.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2437, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is balance_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2438 = new StringBuilder("balance_result(");
          int tmp2439 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2439++) { tmp2438.Append(", "); }
            tmp2438.Append("Success: ");
            Success.ToString(tmp2438);
          }
          tmp2438.Append(')');
          return tmp2438.ToString();
        }
      }


      public partial class leaderBalance_args : TBase
      {
        private global::Nebula.Meta.LeaderBalanceReq _req;

        public global::Nebula.Meta.LeaderBalanceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public leaderBalance_args()
        {
        }

        public leaderBalance_args DeepCopy()
        {
          var tmp2440 = new leaderBalance_args();
          if((Req != null) && __isset.req)
          {
            tmp2440.Req = (global::Nebula.Meta.LeaderBalanceReq)this.Req.DeepCopy();
          }
          tmp2440.__isset.req = this.__isset.req;
          return tmp2440;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.LeaderBalanceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2441 = new TStruct("leaderBalance_args");
            await oprot.WriteStructBeginAsync(tmp2441, cancellationToken);
            var tmp2442 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2442.Name = "req";
              tmp2442.Type = TType.Struct;
              tmp2442.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2442, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is leaderBalance_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2443 = new StringBuilder("leaderBalance_args(");
          int tmp2444 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2444++) { tmp2443.Append(", "); }
            tmp2443.Append("Req: ");
            Req.ToString(tmp2443);
          }
          tmp2443.Append(')');
          return tmp2443.ToString();
        }
      }


      public partial class leaderBalance_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public leaderBalance_result()
        {
        }

        public leaderBalance_result DeepCopy()
        {
          var tmp2445 = new leaderBalance_result();
          if((Success != null) && __isset.success)
          {
            tmp2445.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2445.__isset.success = this.__isset.success;
          return tmp2445;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2446 = new TStruct("leaderBalance_result");
            await oprot.WriteStructBeginAsync(tmp2446, cancellationToken);
            var tmp2447 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2447.Name = "Success";
                tmp2447.Type = TType.Struct;
                tmp2447.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2447, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is leaderBalance_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2448 = new StringBuilder("leaderBalance_result(");
          int tmp2449 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2449++) { tmp2448.Append(", "); }
            tmp2448.Append("Success: ");
            Success.ToString(tmp2448);
          }
          tmp2448.Append(')');
          return tmp2448.ToString();
        }
      }


      public partial class regConfig_args : TBase
      {
        private global::Nebula.Meta.RegConfigReq _req;

        public global::Nebula.Meta.RegConfigReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public regConfig_args()
        {
        }

        public regConfig_args DeepCopy()
        {
          var tmp2450 = new regConfig_args();
          if((Req != null) && __isset.req)
          {
            tmp2450.Req = (global::Nebula.Meta.RegConfigReq)this.Req.DeepCopy();
          }
          tmp2450.__isset.req = this.__isset.req;
          return tmp2450;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.RegConfigReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2451 = new TStruct("regConfig_args");
            await oprot.WriteStructBeginAsync(tmp2451, cancellationToken);
            var tmp2452 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2452.Name = "req";
              tmp2452.Type = TType.Struct;
              tmp2452.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2452, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is regConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2453 = new StringBuilder("regConfig_args(");
          int tmp2454 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2454++) { tmp2453.Append(", "); }
            tmp2453.Append("Req: ");
            Req.ToString(tmp2453);
          }
          tmp2453.Append(')');
          return tmp2453.ToString();
        }
      }


      public partial class regConfig_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public regConfig_result()
        {
        }

        public regConfig_result DeepCopy()
        {
          var tmp2455 = new regConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp2455.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2455.__isset.success = this.__isset.success;
          return tmp2455;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2456 = new TStruct("regConfig_result");
            await oprot.WriteStructBeginAsync(tmp2456, cancellationToken);
            var tmp2457 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2457.Name = "Success";
                tmp2457.Type = TType.Struct;
                tmp2457.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2457, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is regConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2458 = new StringBuilder("regConfig_result(");
          int tmp2459 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2459++) { tmp2458.Append(", "); }
            tmp2458.Append("Success: ");
            Success.ToString(tmp2458);
          }
          tmp2458.Append(')');
          return tmp2458.ToString();
        }
      }


      public partial class getConfig_args : TBase
      {
        private global::Nebula.Meta.GetConfigReq _req;

        public global::Nebula.Meta.GetConfigReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getConfig_args()
        {
        }

        public getConfig_args DeepCopy()
        {
          var tmp2460 = new getConfig_args();
          if((Req != null) && __isset.req)
          {
            tmp2460.Req = (global::Nebula.Meta.GetConfigReq)this.Req.DeepCopy();
          }
          tmp2460.__isset.req = this.__isset.req;
          return tmp2460;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetConfigReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2461 = new TStruct("getConfig_args");
            await oprot.WriteStructBeginAsync(tmp2461, cancellationToken);
            var tmp2462 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2462.Name = "req";
              tmp2462.Type = TType.Struct;
              tmp2462.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2462, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2463 = new StringBuilder("getConfig_args(");
          int tmp2464 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2464++) { tmp2463.Append(", "); }
            tmp2463.Append("Req: ");
            Req.ToString(tmp2463);
          }
          tmp2463.Append(')');
          return tmp2463.ToString();
        }
      }


      public partial class getConfig_result : TBase
      {
        private global::Nebula.Meta.GetConfigResp _success;

        public global::Nebula.Meta.GetConfigResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getConfig_result()
        {
        }

        public getConfig_result DeepCopy()
        {
          var tmp2465 = new getConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp2465.Success = (global::Nebula.Meta.GetConfigResp)this.Success.DeepCopy();
          }
          tmp2465.__isset.success = this.__isset.success;
          return tmp2465;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetConfigResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2466 = new TStruct("getConfig_result");
            await oprot.WriteStructBeginAsync(tmp2466, cancellationToken);
            var tmp2467 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2467.Name = "Success";
                tmp2467.Type = TType.Struct;
                tmp2467.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2467, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2468 = new StringBuilder("getConfig_result(");
          int tmp2469 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2469++) { tmp2468.Append(", "); }
            tmp2468.Append("Success: ");
            Success.ToString(tmp2468);
          }
          tmp2468.Append(')');
          return tmp2468.ToString();
        }
      }


      public partial class setConfig_args : TBase
      {
        private global::Nebula.Meta.SetConfigReq _req;

        public global::Nebula.Meta.SetConfigReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public setConfig_args()
        {
        }

        public setConfig_args DeepCopy()
        {
          var tmp2470 = new setConfig_args();
          if((Req != null) && __isset.req)
          {
            tmp2470.Req = (global::Nebula.Meta.SetConfigReq)this.Req.DeepCopy();
          }
          tmp2470.__isset.req = this.__isset.req;
          return tmp2470;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.SetConfigReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2471 = new TStruct("setConfig_args");
            await oprot.WriteStructBeginAsync(tmp2471, cancellationToken);
            var tmp2472 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2472.Name = "req";
              tmp2472.Type = TType.Struct;
              tmp2472.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2472, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2473 = new StringBuilder("setConfig_args(");
          int tmp2474 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2474++) { tmp2473.Append(", "); }
            tmp2473.Append("Req: ");
            Req.ToString(tmp2473);
          }
          tmp2473.Append(')');
          return tmp2473.ToString();
        }
      }


      public partial class setConfig_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public setConfig_result()
        {
        }

        public setConfig_result DeepCopy()
        {
          var tmp2475 = new setConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp2475.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2475.__isset.success = this.__isset.success;
          return tmp2475;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2476 = new TStruct("setConfig_result");
            await oprot.WriteStructBeginAsync(tmp2476, cancellationToken);
            var tmp2477 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2477.Name = "Success";
                tmp2477.Type = TType.Struct;
                tmp2477.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2477, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2478 = new StringBuilder("setConfig_result(");
          int tmp2479 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2479++) { tmp2478.Append(", "); }
            tmp2478.Append("Success: ");
            Success.ToString(tmp2478);
          }
          tmp2478.Append(')');
          return tmp2478.ToString();
        }
      }


      public partial class listConfigs_args : TBase
      {
        private global::Nebula.Meta.ListConfigsReq _req;

        public global::Nebula.Meta.ListConfigsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listConfigs_args()
        {
        }

        public listConfigs_args DeepCopy()
        {
          var tmp2480 = new listConfigs_args();
          if((Req != null) && __isset.req)
          {
            tmp2480.Req = (global::Nebula.Meta.ListConfigsReq)this.Req.DeepCopy();
          }
          tmp2480.__isset.req = this.__isset.req;
          return tmp2480;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListConfigsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2481 = new TStruct("listConfigs_args");
            await oprot.WriteStructBeginAsync(tmp2481, cancellationToken);
            var tmp2482 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2482.Name = "req";
              tmp2482.Type = TType.Struct;
              tmp2482.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2482, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listConfigs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2483 = new StringBuilder("listConfigs_args(");
          int tmp2484 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2484++) { tmp2483.Append(", "); }
            tmp2483.Append("Req: ");
            Req.ToString(tmp2483);
          }
          tmp2483.Append(')');
          return tmp2483.ToString();
        }
      }


      public partial class listConfigs_result : TBase
      {
        private global::Nebula.Meta.ListConfigsResp _success;

        public global::Nebula.Meta.ListConfigsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listConfigs_result()
        {
        }

        public listConfigs_result DeepCopy()
        {
          var tmp2485 = new listConfigs_result();
          if((Success != null) && __isset.success)
          {
            tmp2485.Success = (global::Nebula.Meta.ListConfigsResp)this.Success.DeepCopy();
          }
          tmp2485.__isset.success = this.__isset.success;
          return tmp2485;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListConfigsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2486 = new TStruct("listConfigs_result");
            await oprot.WriteStructBeginAsync(tmp2486, cancellationToken);
            var tmp2487 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2487.Name = "Success";
                tmp2487.Type = TType.Struct;
                tmp2487.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2487, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listConfigs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2488 = new StringBuilder("listConfigs_result(");
          int tmp2489 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2489++) { tmp2488.Append(", "); }
            tmp2488.Append("Success: ");
            Success.ToString(tmp2488);
          }
          tmp2488.Append(')');
          return tmp2488.ToString();
        }
      }


      public partial class createSnapshot_args : TBase
      {
        private global::Nebula.Meta.CreateSnapshotReq _req;

        public global::Nebula.Meta.CreateSnapshotReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createSnapshot_args()
        {
        }

        public createSnapshot_args DeepCopy()
        {
          var tmp2490 = new createSnapshot_args();
          if((Req != null) && __isset.req)
          {
            tmp2490.Req = (global::Nebula.Meta.CreateSnapshotReq)this.Req.DeepCopy();
          }
          tmp2490.__isset.req = this.__isset.req;
          return tmp2490;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateSnapshotReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2491 = new TStruct("createSnapshot_args");
            await oprot.WriteStructBeginAsync(tmp2491, cancellationToken);
            var tmp2492 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2492.Name = "req";
              tmp2492.Type = TType.Struct;
              tmp2492.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2492, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSnapshot_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2493 = new StringBuilder("createSnapshot_args(");
          int tmp2494 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2494++) { tmp2493.Append(", "); }
            tmp2493.Append("Req: ");
            Req.ToString(tmp2493);
          }
          tmp2493.Append(')');
          return tmp2493.ToString();
        }
      }


      public partial class createSnapshot_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createSnapshot_result()
        {
        }

        public createSnapshot_result DeepCopy()
        {
          var tmp2495 = new createSnapshot_result();
          if((Success != null) && __isset.success)
          {
            tmp2495.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2495.__isset.success = this.__isset.success;
          return tmp2495;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2496 = new TStruct("createSnapshot_result");
            await oprot.WriteStructBeginAsync(tmp2496, cancellationToken);
            var tmp2497 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2497.Name = "Success";
                tmp2497.Type = TType.Struct;
                tmp2497.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2497, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSnapshot_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2498 = new StringBuilder("createSnapshot_result(");
          int tmp2499 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2499++) { tmp2498.Append(", "); }
            tmp2498.Append("Success: ");
            Success.ToString(tmp2498);
          }
          tmp2498.Append(')');
          return tmp2498.ToString();
        }
      }


      public partial class dropSnapshot_args : TBase
      {
        private global::Nebula.Meta.DropSnapshotReq _req;

        public global::Nebula.Meta.DropSnapshotReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropSnapshot_args()
        {
        }

        public dropSnapshot_args DeepCopy()
        {
          var tmp2500 = new dropSnapshot_args();
          if((Req != null) && __isset.req)
          {
            tmp2500.Req = (global::Nebula.Meta.DropSnapshotReq)this.Req.DeepCopy();
          }
          tmp2500.__isset.req = this.__isset.req;
          return tmp2500;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropSnapshotReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2501 = new TStruct("dropSnapshot_args");
            await oprot.WriteStructBeginAsync(tmp2501, cancellationToken);
            var tmp2502 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2502.Name = "req";
              tmp2502.Type = TType.Struct;
              tmp2502.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2502, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropSnapshot_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2503 = new StringBuilder("dropSnapshot_args(");
          int tmp2504 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2504++) { tmp2503.Append(", "); }
            tmp2503.Append("Req: ");
            Req.ToString(tmp2503);
          }
          tmp2503.Append(')');
          return tmp2503.ToString();
        }
      }


      public partial class dropSnapshot_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropSnapshot_result()
        {
        }

        public dropSnapshot_result DeepCopy()
        {
          var tmp2505 = new dropSnapshot_result();
          if((Success != null) && __isset.success)
          {
            tmp2505.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2505.__isset.success = this.__isset.success;
          return tmp2505;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2506 = new TStruct("dropSnapshot_result");
            await oprot.WriteStructBeginAsync(tmp2506, cancellationToken);
            var tmp2507 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2507.Name = "Success";
                tmp2507.Type = TType.Struct;
                tmp2507.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2507, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropSnapshot_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2508 = new StringBuilder("dropSnapshot_result(");
          int tmp2509 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2509++) { tmp2508.Append(", "); }
            tmp2508.Append("Success: ");
            Success.ToString(tmp2508);
          }
          tmp2508.Append(')');
          return tmp2508.ToString();
        }
      }


      public partial class listSnapshots_args : TBase
      {
        private global::Nebula.Meta.ListSnapshotsReq _req;

        public global::Nebula.Meta.ListSnapshotsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listSnapshots_args()
        {
        }

        public listSnapshots_args DeepCopy()
        {
          var tmp2510 = new listSnapshots_args();
          if((Req != null) && __isset.req)
          {
            tmp2510.Req = (global::Nebula.Meta.ListSnapshotsReq)this.Req.DeepCopy();
          }
          tmp2510.__isset.req = this.__isset.req;
          return tmp2510;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListSnapshotsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2511 = new TStruct("listSnapshots_args");
            await oprot.WriteStructBeginAsync(tmp2511, cancellationToken);
            var tmp2512 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2512.Name = "req";
              tmp2512.Type = TType.Struct;
              tmp2512.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2512, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSnapshots_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2513 = new StringBuilder("listSnapshots_args(");
          int tmp2514 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2514++) { tmp2513.Append(", "); }
            tmp2513.Append("Req: ");
            Req.ToString(tmp2513);
          }
          tmp2513.Append(')');
          return tmp2513.ToString();
        }
      }


      public partial class listSnapshots_result : TBase
      {
        private global::Nebula.Meta.ListSnapshotsResp _success;

        public global::Nebula.Meta.ListSnapshotsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listSnapshots_result()
        {
        }

        public listSnapshots_result DeepCopy()
        {
          var tmp2515 = new listSnapshots_result();
          if((Success != null) && __isset.success)
          {
            tmp2515.Success = (global::Nebula.Meta.ListSnapshotsResp)this.Success.DeepCopy();
          }
          tmp2515.__isset.success = this.__isset.success;
          return tmp2515;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListSnapshotsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2516 = new TStruct("listSnapshots_result");
            await oprot.WriteStructBeginAsync(tmp2516, cancellationToken);
            var tmp2517 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2517.Name = "Success";
                tmp2517.Type = TType.Struct;
                tmp2517.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2517, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSnapshots_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2518 = new StringBuilder("listSnapshots_result(");
          int tmp2519 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2519++) { tmp2518.Append(", "); }
            tmp2518.Append("Success: ");
            Success.ToString(tmp2518);
          }
          tmp2518.Append(')');
          return tmp2518.ToString();
        }
      }


      public partial class runAdminJob_args : TBase
      {
        private global::Nebula.Meta.AdminJobReq _req;

        public global::Nebula.Meta.AdminJobReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public runAdminJob_args()
        {
        }

        public runAdminJob_args DeepCopy()
        {
          var tmp2520 = new runAdminJob_args();
          if((Req != null) && __isset.req)
          {
            tmp2520.Req = (global::Nebula.Meta.AdminJobReq)this.Req.DeepCopy();
          }
          tmp2520.__isset.req = this.__isset.req;
          return tmp2520;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.AdminJobReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2521 = new TStruct("runAdminJob_args");
            await oprot.WriteStructBeginAsync(tmp2521, cancellationToken);
            var tmp2522 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2522.Name = "req";
              tmp2522.Type = TType.Struct;
              tmp2522.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2522, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is runAdminJob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2523 = new StringBuilder("runAdminJob_args(");
          int tmp2524 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2524++) { tmp2523.Append(", "); }
            tmp2523.Append("Req: ");
            Req.ToString(tmp2523);
          }
          tmp2523.Append(')');
          return tmp2523.ToString();
        }
      }


      public partial class runAdminJob_result : TBase
      {
        private global::Nebula.Meta.AdminJobResp _success;

        public global::Nebula.Meta.AdminJobResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public runAdminJob_result()
        {
        }

        public runAdminJob_result DeepCopy()
        {
          var tmp2525 = new runAdminJob_result();
          if((Success != null) && __isset.success)
          {
            tmp2525.Success = (global::Nebula.Meta.AdminJobResp)this.Success.DeepCopy();
          }
          tmp2525.__isset.success = this.__isset.success;
          return tmp2525;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.AdminJobResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2526 = new TStruct("runAdminJob_result");
            await oprot.WriteStructBeginAsync(tmp2526, cancellationToken);
            var tmp2527 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2527.Name = "Success";
                tmp2527.Type = TType.Struct;
                tmp2527.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2527, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is runAdminJob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2528 = new StringBuilder("runAdminJob_result(");
          int tmp2529 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2529++) { tmp2528.Append(", "); }
            tmp2528.Append("Success: ");
            Success.ToString(tmp2528);
          }
          tmp2528.Append(')');
          return tmp2528.ToString();
        }
      }


      public partial class addZone_args : TBase
      {
        private global::Nebula.Meta.AddZoneReq _req;

        public global::Nebula.Meta.AddZoneReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addZone_args()
        {
        }

        public addZone_args DeepCopy()
        {
          var tmp2530 = new addZone_args();
          if((Req != null) && __isset.req)
          {
            tmp2530.Req = (global::Nebula.Meta.AddZoneReq)this.Req.DeepCopy();
          }
          tmp2530.__isset.req = this.__isset.req;
          return tmp2530;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.AddZoneReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2531 = new TStruct("addZone_args");
            await oprot.WriteStructBeginAsync(tmp2531, cancellationToken);
            var tmp2532 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2532.Name = "req";
              tmp2532.Type = TType.Struct;
              tmp2532.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2532, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2533 = new StringBuilder("addZone_args(");
          int tmp2534 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2534++) { tmp2533.Append(", "); }
            tmp2533.Append("Req: ");
            Req.ToString(tmp2533);
          }
          tmp2533.Append(')');
          return tmp2533.ToString();
        }
      }


      public partial class addZone_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addZone_result()
        {
        }

        public addZone_result DeepCopy()
        {
          var tmp2535 = new addZone_result();
          if((Success != null) && __isset.success)
          {
            tmp2535.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2535.__isset.success = this.__isset.success;
          return tmp2535;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2536 = new TStruct("addZone_result");
            await oprot.WriteStructBeginAsync(tmp2536, cancellationToken);
            var tmp2537 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2537.Name = "Success";
                tmp2537.Type = TType.Struct;
                tmp2537.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2537, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2538 = new StringBuilder("addZone_result(");
          int tmp2539 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2539++) { tmp2538.Append(", "); }
            tmp2538.Append("Success: ");
            Success.ToString(tmp2538);
          }
          tmp2538.Append(')');
          return tmp2538.ToString();
        }
      }


      public partial class dropZone_args : TBase
      {
        private global::Nebula.Meta.DropZoneReq _req;

        public global::Nebula.Meta.DropZoneReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropZone_args()
        {
        }

        public dropZone_args DeepCopy()
        {
          var tmp2540 = new dropZone_args();
          if((Req != null) && __isset.req)
          {
            tmp2540.Req = (global::Nebula.Meta.DropZoneReq)this.Req.DeepCopy();
          }
          tmp2540.__isset.req = this.__isset.req;
          return tmp2540;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropZoneReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2541 = new TStruct("dropZone_args");
            await oprot.WriteStructBeginAsync(tmp2541, cancellationToken);
            var tmp2542 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2542.Name = "req";
              tmp2542.Type = TType.Struct;
              tmp2542.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2542, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2543 = new StringBuilder("dropZone_args(");
          int tmp2544 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2544++) { tmp2543.Append(", "); }
            tmp2543.Append("Req: ");
            Req.ToString(tmp2543);
          }
          tmp2543.Append(')');
          return tmp2543.ToString();
        }
      }


      public partial class dropZone_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropZone_result()
        {
        }

        public dropZone_result DeepCopy()
        {
          var tmp2545 = new dropZone_result();
          if((Success != null) && __isset.success)
          {
            tmp2545.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2545.__isset.success = this.__isset.success;
          return tmp2545;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2546 = new TStruct("dropZone_result");
            await oprot.WriteStructBeginAsync(tmp2546, cancellationToken);
            var tmp2547 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2547.Name = "Success";
                tmp2547.Type = TType.Struct;
                tmp2547.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2547, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2548 = new StringBuilder("dropZone_result(");
          int tmp2549 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2549++) { tmp2548.Append(", "); }
            tmp2548.Append("Success: ");
            Success.ToString(tmp2548);
          }
          tmp2548.Append(')');
          return tmp2548.ToString();
        }
      }


      public partial class addHostIntoZone_args : TBase
      {
        private global::Nebula.Meta.AddHostIntoZoneReq _req;

        public global::Nebula.Meta.AddHostIntoZoneReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addHostIntoZone_args()
        {
        }

        public addHostIntoZone_args DeepCopy()
        {
          var tmp2550 = new addHostIntoZone_args();
          if((Req != null) && __isset.req)
          {
            tmp2550.Req = (global::Nebula.Meta.AddHostIntoZoneReq)this.Req.DeepCopy();
          }
          tmp2550.__isset.req = this.__isset.req;
          return tmp2550;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.AddHostIntoZoneReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2551 = new TStruct("addHostIntoZone_args");
            await oprot.WriteStructBeginAsync(tmp2551, cancellationToken);
            var tmp2552 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2552.Name = "req";
              tmp2552.Type = TType.Struct;
              tmp2552.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2552, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addHostIntoZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2553 = new StringBuilder("addHostIntoZone_args(");
          int tmp2554 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2554++) { tmp2553.Append(", "); }
            tmp2553.Append("Req: ");
            Req.ToString(tmp2553);
          }
          tmp2553.Append(')');
          return tmp2553.ToString();
        }
      }


      public partial class addHostIntoZone_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addHostIntoZone_result()
        {
        }

        public addHostIntoZone_result DeepCopy()
        {
          var tmp2555 = new addHostIntoZone_result();
          if((Success != null) && __isset.success)
          {
            tmp2555.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2555.__isset.success = this.__isset.success;
          return tmp2555;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2556 = new TStruct("addHostIntoZone_result");
            await oprot.WriteStructBeginAsync(tmp2556, cancellationToken);
            var tmp2557 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2557.Name = "Success";
                tmp2557.Type = TType.Struct;
                tmp2557.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2557, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addHostIntoZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2558 = new StringBuilder("addHostIntoZone_result(");
          int tmp2559 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2559++) { tmp2558.Append(", "); }
            tmp2558.Append("Success: ");
            Success.ToString(tmp2558);
          }
          tmp2558.Append(')');
          return tmp2558.ToString();
        }
      }


      public partial class dropHostFromZone_args : TBase
      {
        private global::Nebula.Meta.DropHostFromZoneReq _req;

        public global::Nebula.Meta.DropHostFromZoneReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropHostFromZone_args()
        {
        }

        public dropHostFromZone_args DeepCopy()
        {
          var tmp2560 = new dropHostFromZone_args();
          if((Req != null) && __isset.req)
          {
            tmp2560.Req = (global::Nebula.Meta.DropHostFromZoneReq)this.Req.DeepCopy();
          }
          tmp2560.__isset.req = this.__isset.req;
          return tmp2560;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropHostFromZoneReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2561 = new TStruct("dropHostFromZone_args");
            await oprot.WriteStructBeginAsync(tmp2561, cancellationToken);
            var tmp2562 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2562.Name = "req";
              tmp2562.Type = TType.Struct;
              tmp2562.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2562, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropHostFromZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2563 = new StringBuilder("dropHostFromZone_args(");
          int tmp2564 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2564++) { tmp2563.Append(", "); }
            tmp2563.Append("Req: ");
            Req.ToString(tmp2563);
          }
          tmp2563.Append(')');
          return tmp2563.ToString();
        }
      }


      public partial class dropHostFromZone_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropHostFromZone_result()
        {
        }

        public dropHostFromZone_result DeepCopy()
        {
          var tmp2565 = new dropHostFromZone_result();
          if((Success != null) && __isset.success)
          {
            tmp2565.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2565.__isset.success = this.__isset.success;
          return tmp2565;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2566 = new TStruct("dropHostFromZone_result");
            await oprot.WriteStructBeginAsync(tmp2566, cancellationToken);
            var tmp2567 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2567.Name = "Success";
                tmp2567.Type = TType.Struct;
                tmp2567.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2567, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropHostFromZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2568 = new StringBuilder("dropHostFromZone_result(");
          int tmp2569 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2569++) { tmp2568.Append(", "); }
            tmp2568.Append("Success: ");
            Success.ToString(tmp2568);
          }
          tmp2568.Append(')');
          return tmp2568.ToString();
        }
      }


      public partial class getZone_args : TBase
      {
        private global::Nebula.Meta.GetZoneReq _req;

        public global::Nebula.Meta.GetZoneReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getZone_args()
        {
        }

        public getZone_args DeepCopy()
        {
          var tmp2570 = new getZone_args();
          if((Req != null) && __isset.req)
          {
            tmp2570.Req = (global::Nebula.Meta.GetZoneReq)this.Req.DeepCopy();
          }
          tmp2570.__isset.req = this.__isset.req;
          return tmp2570;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetZoneReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2571 = new TStruct("getZone_args");
            await oprot.WriteStructBeginAsync(tmp2571, cancellationToken);
            var tmp2572 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2572.Name = "req";
              tmp2572.Type = TType.Struct;
              tmp2572.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2572, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getZone_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2573 = new StringBuilder("getZone_args(");
          int tmp2574 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2574++) { tmp2573.Append(", "); }
            tmp2573.Append("Req: ");
            Req.ToString(tmp2573);
          }
          tmp2573.Append(')');
          return tmp2573.ToString();
        }
      }


      public partial class getZone_result : TBase
      {
        private global::Nebula.Meta.GetZoneResp _success;

        public global::Nebula.Meta.GetZoneResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getZone_result()
        {
        }

        public getZone_result DeepCopy()
        {
          var tmp2575 = new getZone_result();
          if((Success != null) && __isset.success)
          {
            tmp2575.Success = (global::Nebula.Meta.GetZoneResp)this.Success.DeepCopy();
          }
          tmp2575.__isset.success = this.__isset.success;
          return tmp2575;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetZoneResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2576 = new TStruct("getZone_result");
            await oprot.WriteStructBeginAsync(tmp2576, cancellationToken);
            var tmp2577 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2577.Name = "Success";
                tmp2577.Type = TType.Struct;
                tmp2577.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2577, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getZone_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2578 = new StringBuilder("getZone_result(");
          int tmp2579 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2579++) { tmp2578.Append(", "); }
            tmp2578.Append("Success: ");
            Success.ToString(tmp2578);
          }
          tmp2578.Append(')');
          return tmp2578.ToString();
        }
      }


      public partial class listZones_args : TBase
      {
        private global::Nebula.Meta.ListZonesReq _req;

        public global::Nebula.Meta.ListZonesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listZones_args()
        {
        }

        public listZones_args DeepCopy()
        {
          var tmp2580 = new listZones_args();
          if((Req != null) && __isset.req)
          {
            tmp2580.Req = (global::Nebula.Meta.ListZonesReq)this.Req.DeepCopy();
          }
          tmp2580.__isset.req = this.__isset.req;
          return tmp2580;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListZonesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2581 = new TStruct("listZones_args");
            await oprot.WriteStructBeginAsync(tmp2581, cancellationToken);
            var tmp2582 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2582.Name = "req";
              tmp2582.Type = TType.Struct;
              tmp2582.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2582, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listZones_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2583 = new StringBuilder("listZones_args(");
          int tmp2584 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2584++) { tmp2583.Append(", "); }
            tmp2583.Append("Req: ");
            Req.ToString(tmp2583);
          }
          tmp2583.Append(')');
          return tmp2583.ToString();
        }
      }


      public partial class listZones_result : TBase
      {
        private global::Nebula.Meta.ListZonesResp _success;

        public global::Nebula.Meta.ListZonesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listZones_result()
        {
        }

        public listZones_result DeepCopy()
        {
          var tmp2585 = new listZones_result();
          if((Success != null) && __isset.success)
          {
            tmp2585.Success = (global::Nebula.Meta.ListZonesResp)this.Success.DeepCopy();
          }
          tmp2585.__isset.success = this.__isset.success;
          return tmp2585;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListZonesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2586 = new TStruct("listZones_result");
            await oprot.WriteStructBeginAsync(tmp2586, cancellationToken);
            var tmp2587 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2587.Name = "Success";
                tmp2587.Type = TType.Struct;
                tmp2587.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2587, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listZones_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2588 = new StringBuilder("listZones_result(");
          int tmp2589 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2589++) { tmp2588.Append(", "); }
            tmp2588.Append("Success: ");
            Success.ToString(tmp2588);
          }
          tmp2588.Append(')');
          return tmp2588.ToString();
        }
      }


      public partial class addGroup_args : TBase
      {
        private global::Nebula.Meta.AddGroupReq _req;

        public global::Nebula.Meta.AddGroupReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addGroup_args()
        {
        }

        public addGroup_args DeepCopy()
        {
          var tmp2590 = new addGroup_args();
          if((Req != null) && __isset.req)
          {
            tmp2590.Req = (global::Nebula.Meta.AddGroupReq)this.Req.DeepCopy();
          }
          tmp2590.__isset.req = this.__isset.req;
          return tmp2590;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.AddGroupReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2591 = new TStruct("addGroup_args");
            await oprot.WriteStructBeginAsync(tmp2591, cancellationToken);
            var tmp2592 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2592.Name = "req";
              tmp2592.Type = TType.Struct;
              tmp2592.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2592, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2593 = new StringBuilder("addGroup_args(");
          int tmp2594 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2594++) { tmp2593.Append(", "); }
            tmp2593.Append("Req: ");
            Req.ToString(tmp2593);
          }
          tmp2593.Append(')');
          return tmp2593.ToString();
        }
      }


      public partial class addGroup_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addGroup_result()
        {
        }

        public addGroup_result DeepCopy()
        {
          var tmp2595 = new addGroup_result();
          if((Success != null) && __isset.success)
          {
            tmp2595.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2595.__isset.success = this.__isset.success;
          return tmp2595;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2596 = new TStruct("addGroup_result");
            await oprot.WriteStructBeginAsync(tmp2596, cancellationToken);
            var tmp2597 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2597.Name = "Success";
                tmp2597.Type = TType.Struct;
                tmp2597.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2597, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2598 = new StringBuilder("addGroup_result(");
          int tmp2599 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2599++) { tmp2598.Append(", "); }
            tmp2598.Append("Success: ");
            Success.ToString(tmp2598);
          }
          tmp2598.Append(')');
          return tmp2598.ToString();
        }
      }


      public partial class dropGroup_args : TBase
      {
        private global::Nebula.Meta.DropGroupReq _req;

        public global::Nebula.Meta.DropGroupReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropGroup_args()
        {
        }

        public dropGroup_args DeepCopy()
        {
          var tmp2600 = new dropGroup_args();
          if((Req != null) && __isset.req)
          {
            tmp2600.Req = (global::Nebula.Meta.DropGroupReq)this.Req.DeepCopy();
          }
          tmp2600.__isset.req = this.__isset.req;
          return tmp2600;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropGroupReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2601 = new TStruct("dropGroup_args");
            await oprot.WriteStructBeginAsync(tmp2601, cancellationToken);
            var tmp2602 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2602.Name = "req";
              tmp2602.Type = TType.Struct;
              tmp2602.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2602, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2603 = new StringBuilder("dropGroup_args(");
          int tmp2604 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2604++) { tmp2603.Append(", "); }
            tmp2603.Append("Req: ");
            Req.ToString(tmp2603);
          }
          tmp2603.Append(')');
          return tmp2603.ToString();
        }
      }


      public partial class dropGroup_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropGroup_result()
        {
        }

        public dropGroup_result DeepCopy()
        {
          var tmp2605 = new dropGroup_result();
          if((Success != null) && __isset.success)
          {
            tmp2605.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2605.__isset.success = this.__isset.success;
          return tmp2605;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2606 = new TStruct("dropGroup_result");
            await oprot.WriteStructBeginAsync(tmp2606, cancellationToken);
            var tmp2607 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2607.Name = "Success";
                tmp2607.Type = TType.Struct;
                tmp2607.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2607, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2608 = new StringBuilder("dropGroup_result(");
          int tmp2609 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2609++) { tmp2608.Append(", "); }
            tmp2608.Append("Success: ");
            Success.ToString(tmp2608);
          }
          tmp2608.Append(')');
          return tmp2608.ToString();
        }
      }


      public partial class addZoneIntoGroup_args : TBase
      {
        private global::Nebula.Meta.AddZoneIntoGroupReq _req;

        public global::Nebula.Meta.AddZoneIntoGroupReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addZoneIntoGroup_args()
        {
        }

        public addZoneIntoGroup_args DeepCopy()
        {
          var tmp2610 = new addZoneIntoGroup_args();
          if((Req != null) && __isset.req)
          {
            tmp2610.Req = (global::Nebula.Meta.AddZoneIntoGroupReq)this.Req.DeepCopy();
          }
          tmp2610.__isset.req = this.__isset.req;
          return tmp2610;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.AddZoneIntoGroupReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2611 = new TStruct("addZoneIntoGroup_args");
            await oprot.WriteStructBeginAsync(tmp2611, cancellationToken);
            var tmp2612 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2612.Name = "req";
              tmp2612.Type = TType.Struct;
              tmp2612.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2612, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addZoneIntoGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2613 = new StringBuilder("addZoneIntoGroup_args(");
          int tmp2614 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2614++) { tmp2613.Append(", "); }
            tmp2613.Append("Req: ");
            Req.ToString(tmp2613);
          }
          tmp2613.Append(')');
          return tmp2613.ToString();
        }
      }


      public partial class addZoneIntoGroup_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addZoneIntoGroup_result()
        {
        }

        public addZoneIntoGroup_result DeepCopy()
        {
          var tmp2615 = new addZoneIntoGroup_result();
          if((Success != null) && __isset.success)
          {
            tmp2615.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2615.__isset.success = this.__isset.success;
          return tmp2615;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2616 = new TStruct("addZoneIntoGroup_result");
            await oprot.WriteStructBeginAsync(tmp2616, cancellationToken);
            var tmp2617 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2617.Name = "Success";
                tmp2617.Type = TType.Struct;
                tmp2617.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2617, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addZoneIntoGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2618 = new StringBuilder("addZoneIntoGroup_result(");
          int tmp2619 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2619++) { tmp2618.Append(", "); }
            tmp2618.Append("Success: ");
            Success.ToString(tmp2618);
          }
          tmp2618.Append(')');
          return tmp2618.ToString();
        }
      }


      public partial class dropZoneFromGroup_args : TBase
      {
        private global::Nebula.Meta.DropZoneFromGroupReq _req;

        public global::Nebula.Meta.DropZoneFromGroupReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropZoneFromGroup_args()
        {
        }

        public dropZoneFromGroup_args DeepCopy()
        {
          var tmp2620 = new dropZoneFromGroup_args();
          if((Req != null) && __isset.req)
          {
            tmp2620.Req = (global::Nebula.Meta.DropZoneFromGroupReq)this.Req.DeepCopy();
          }
          tmp2620.__isset.req = this.__isset.req;
          return tmp2620;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropZoneFromGroupReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2621 = new TStruct("dropZoneFromGroup_args");
            await oprot.WriteStructBeginAsync(tmp2621, cancellationToken);
            var tmp2622 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2622.Name = "req";
              tmp2622.Type = TType.Struct;
              tmp2622.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2622, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropZoneFromGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2623 = new StringBuilder("dropZoneFromGroup_args(");
          int tmp2624 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2624++) { tmp2623.Append(", "); }
            tmp2623.Append("Req: ");
            Req.ToString(tmp2623);
          }
          tmp2623.Append(')');
          return tmp2623.ToString();
        }
      }


      public partial class dropZoneFromGroup_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropZoneFromGroup_result()
        {
        }

        public dropZoneFromGroup_result DeepCopy()
        {
          var tmp2625 = new dropZoneFromGroup_result();
          if((Success != null) && __isset.success)
          {
            tmp2625.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2625.__isset.success = this.__isset.success;
          return tmp2625;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2626 = new TStruct("dropZoneFromGroup_result");
            await oprot.WriteStructBeginAsync(tmp2626, cancellationToken);
            var tmp2627 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2627.Name = "Success";
                tmp2627.Type = TType.Struct;
                tmp2627.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2627, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropZoneFromGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2628 = new StringBuilder("dropZoneFromGroup_result(");
          int tmp2629 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2629++) { tmp2628.Append(", "); }
            tmp2628.Append("Success: ");
            Success.ToString(tmp2628);
          }
          tmp2628.Append(')');
          return tmp2628.ToString();
        }
      }


      public partial class getGroup_args : TBase
      {
        private global::Nebula.Meta.GetGroupReq _req;

        public global::Nebula.Meta.GetGroupReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getGroup_args()
        {
        }

        public getGroup_args DeepCopy()
        {
          var tmp2630 = new getGroup_args();
          if((Req != null) && __isset.req)
          {
            tmp2630.Req = (global::Nebula.Meta.GetGroupReq)this.Req.DeepCopy();
          }
          tmp2630.__isset.req = this.__isset.req;
          return tmp2630;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetGroupReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2631 = new TStruct("getGroup_args");
            await oprot.WriteStructBeginAsync(tmp2631, cancellationToken);
            var tmp2632 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2632.Name = "req";
              tmp2632.Type = TType.Struct;
              tmp2632.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2632, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getGroup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2633 = new StringBuilder("getGroup_args(");
          int tmp2634 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2634++) { tmp2633.Append(", "); }
            tmp2633.Append("Req: ");
            Req.ToString(tmp2633);
          }
          tmp2633.Append(')');
          return tmp2633.ToString();
        }
      }


      public partial class getGroup_result : TBase
      {
        private global::Nebula.Meta.GetGroupResp _success;

        public global::Nebula.Meta.GetGroupResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getGroup_result()
        {
        }

        public getGroup_result DeepCopy()
        {
          var tmp2635 = new getGroup_result();
          if((Success != null) && __isset.success)
          {
            tmp2635.Success = (global::Nebula.Meta.GetGroupResp)this.Success.DeepCopy();
          }
          tmp2635.__isset.success = this.__isset.success;
          return tmp2635;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetGroupResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2636 = new TStruct("getGroup_result");
            await oprot.WriteStructBeginAsync(tmp2636, cancellationToken);
            var tmp2637 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2637.Name = "Success";
                tmp2637.Type = TType.Struct;
                tmp2637.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2637, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getGroup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2638 = new StringBuilder("getGroup_result(");
          int tmp2639 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2639++) { tmp2638.Append(", "); }
            tmp2638.Append("Success: ");
            Success.ToString(tmp2638);
          }
          tmp2638.Append(')');
          return tmp2638.ToString();
        }
      }


      public partial class listGroups_args : TBase
      {
        private global::Nebula.Meta.ListGroupsReq _req;

        public global::Nebula.Meta.ListGroupsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listGroups_args()
        {
        }

        public listGroups_args DeepCopy()
        {
          var tmp2640 = new listGroups_args();
          if((Req != null) && __isset.req)
          {
            tmp2640.Req = (global::Nebula.Meta.ListGroupsReq)this.Req.DeepCopy();
          }
          tmp2640.__isset.req = this.__isset.req;
          return tmp2640;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListGroupsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2641 = new TStruct("listGroups_args");
            await oprot.WriteStructBeginAsync(tmp2641, cancellationToken);
            var tmp2642 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2642.Name = "req";
              tmp2642.Type = TType.Struct;
              tmp2642.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2642, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listGroups_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2643 = new StringBuilder("listGroups_args(");
          int tmp2644 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2644++) { tmp2643.Append(", "); }
            tmp2643.Append("Req: ");
            Req.ToString(tmp2643);
          }
          tmp2643.Append(')');
          return tmp2643.ToString();
        }
      }


      public partial class listGroups_result : TBase
      {
        private global::Nebula.Meta.ListGroupsResp _success;

        public global::Nebula.Meta.ListGroupsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listGroups_result()
        {
        }

        public listGroups_result DeepCopy()
        {
          var tmp2645 = new listGroups_result();
          if((Success != null) && __isset.success)
          {
            tmp2645.Success = (global::Nebula.Meta.ListGroupsResp)this.Success.DeepCopy();
          }
          tmp2645.__isset.success = this.__isset.success;
          return tmp2645;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListGroupsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2646 = new TStruct("listGroups_result");
            await oprot.WriteStructBeginAsync(tmp2646, cancellationToken);
            var tmp2647 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2647.Name = "Success";
                tmp2647.Type = TType.Struct;
                tmp2647.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2647, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listGroups_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2648 = new StringBuilder("listGroups_result(");
          int tmp2649 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2649++) { tmp2648.Append(", "); }
            tmp2648.Append("Success: ");
            Success.ToString(tmp2648);
          }
          tmp2648.Append(')');
          return tmp2648.ToString();
        }
      }


      public partial class createBackup_args : TBase
      {
        private global::Nebula.Meta.CreateBackupReq _req;

        public global::Nebula.Meta.CreateBackupReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createBackup_args()
        {
        }

        public createBackup_args DeepCopy()
        {
          var tmp2650 = new createBackup_args();
          if((Req != null) && __isset.req)
          {
            tmp2650.Req = (global::Nebula.Meta.CreateBackupReq)this.Req.DeepCopy();
          }
          tmp2650.__isset.req = this.__isset.req;
          return tmp2650;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateBackupReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2651 = new TStruct("createBackup_args");
            await oprot.WriteStructBeginAsync(tmp2651, cancellationToken);
            var tmp2652 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2652.Name = "req";
              tmp2652.Type = TType.Struct;
              tmp2652.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2652, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createBackup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2653 = new StringBuilder("createBackup_args(");
          int tmp2654 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2654++) { tmp2653.Append(", "); }
            tmp2653.Append("Req: ");
            Req.ToString(tmp2653);
          }
          tmp2653.Append(')');
          return tmp2653.ToString();
        }
      }


      public partial class createBackup_result : TBase
      {
        private global::Nebula.Meta.CreateBackupResp _success;

        public global::Nebula.Meta.CreateBackupResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createBackup_result()
        {
        }

        public createBackup_result DeepCopy()
        {
          var tmp2655 = new createBackup_result();
          if((Success != null) && __isset.success)
          {
            tmp2655.Success = (global::Nebula.Meta.CreateBackupResp)this.Success.DeepCopy();
          }
          tmp2655.__isset.success = this.__isset.success;
          return tmp2655;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.CreateBackupResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2656 = new TStruct("createBackup_result");
            await oprot.WriteStructBeginAsync(tmp2656, cancellationToken);
            var tmp2657 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2657.Name = "Success";
                tmp2657.Type = TType.Struct;
                tmp2657.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2657, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createBackup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2658 = new StringBuilder("createBackup_result(");
          int tmp2659 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2659++) { tmp2658.Append(", "); }
            tmp2658.Append("Success: ");
            Success.ToString(tmp2658);
          }
          tmp2658.Append(')');
          return tmp2658.ToString();
        }
      }


      public partial class restoreMeta_args : TBase
      {
        private global::Nebula.Meta.RestoreMetaReq _req;

        public global::Nebula.Meta.RestoreMetaReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public restoreMeta_args()
        {
        }

        public restoreMeta_args DeepCopy()
        {
          var tmp2660 = new restoreMeta_args();
          if((Req != null) && __isset.req)
          {
            tmp2660.Req = (global::Nebula.Meta.RestoreMetaReq)this.Req.DeepCopy();
          }
          tmp2660.__isset.req = this.__isset.req;
          return tmp2660;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.RestoreMetaReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2661 = new TStruct("restoreMeta_args");
            await oprot.WriteStructBeginAsync(tmp2661, cancellationToken);
            var tmp2662 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2662.Name = "req";
              tmp2662.Type = TType.Struct;
              tmp2662.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2662, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is restoreMeta_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2663 = new StringBuilder("restoreMeta_args(");
          int tmp2664 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2664++) { tmp2663.Append(", "); }
            tmp2663.Append("Req: ");
            Req.ToString(tmp2663);
          }
          tmp2663.Append(')');
          return tmp2663.ToString();
        }
      }


      public partial class restoreMeta_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public restoreMeta_result()
        {
        }

        public restoreMeta_result DeepCopy()
        {
          var tmp2665 = new restoreMeta_result();
          if((Success != null) && __isset.success)
          {
            tmp2665.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2665.__isset.success = this.__isset.success;
          return tmp2665;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2666 = new TStruct("restoreMeta_result");
            await oprot.WriteStructBeginAsync(tmp2666, cancellationToken);
            var tmp2667 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2667.Name = "Success";
                tmp2667.Type = TType.Struct;
                tmp2667.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2667, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is restoreMeta_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2668 = new StringBuilder("restoreMeta_result(");
          int tmp2669 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2669++) { tmp2668.Append(", "); }
            tmp2668.Append("Success: ");
            Success.ToString(tmp2668);
          }
          tmp2668.Append(')');
          return tmp2668.ToString();
        }
      }


      public partial class addListener_args : TBase
      {
        private global::Nebula.Meta.AddListenerReq _req;

        public global::Nebula.Meta.AddListenerReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addListener_args()
        {
        }

        public addListener_args DeepCopy()
        {
          var tmp2670 = new addListener_args();
          if((Req != null) && __isset.req)
          {
            tmp2670.Req = (global::Nebula.Meta.AddListenerReq)this.Req.DeepCopy();
          }
          tmp2670.__isset.req = this.__isset.req;
          return tmp2670;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.AddListenerReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2671 = new TStruct("addListener_args");
            await oprot.WriteStructBeginAsync(tmp2671, cancellationToken);
            var tmp2672 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2672.Name = "req";
              tmp2672.Type = TType.Struct;
              tmp2672.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2672, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addListener_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2673 = new StringBuilder("addListener_args(");
          int tmp2674 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2674++) { tmp2673.Append(", "); }
            tmp2673.Append("Req: ");
            Req.ToString(tmp2673);
          }
          tmp2673.Append(')');
          return tmp2673.ToString();
        }
      }


      public partial class addListener_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addListener_result()
        {
        }

        public addListener_result DeepCopy()
        {
          var tmp2675 = new addListener_result();
          if((Success != null) && __isset.success)
          {
            tmp2675.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2675.__isset.success = this.__isset.success;
          return tmp2675;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2676 = new TStruct("addListener_result");
            await oprot.WriteStructBeginAsync(tmp2676, cancellationToken);
            var tmp2677 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2677.Name = "Success";
                tmp2677.Type = TType.Struct;
                tmp2677.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2677, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addListener_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2678 = new StringBuilder("addListener_result(");
          int tmp2679 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2679++) { tmp2678.Append(", "); }
            tmp2678.Append("Success: ");
            Success.ToString(tmp2678);
          }
          tmp2678.Append(')');
          return tmp2678.ToString();
        }
      }


      public partial class removeListener_args : TBase
      {
        private global::Nebula.Meta.RemoveListenerReq _req;

        public global::Nebula.Meta.RemoveListenerReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public removeListener_args()
        {
        }

        public removeListener_args DeepCopy()
        {
          var tmp2680 = new removeListener_args();
          if((Req != null) && __isset.req)
          {
            tmp2680.Req = (global::Nebula.Meta.RemoveListenerReq)this.Req.DeepCopy();
          }
          tmp2680.__isset.req = this.__isset.req;
          return tmp2680;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.RemoveListenerReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2681 = new TStruct("removeListener_args");
            await oprot.WriteStructBeginAsync(tmp2681, cancellationToken);
            var tmp2682 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2682.Name = "req";
              tmp2682.Type = TType.Struct;
              tmp2682.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2682, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeListener_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2683 = new StringBuilder("removeListener_args(");
          int tmp2684 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2684++) { tmp2683.Append(", "); }
            tmp2683.Append("Req: ");
            Req.ToString(tmp2683);
          }
          tmp2683.Append(')');
          return tmp2683.ToString();
        }
      }


      public partial class removeListener_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public removeListener_result()
        {
        }

        public removeListener_result DeepCopy()
        {
          var tmp2685 = new removeListener_result();
          if((Success != null) && __isset.success)
          {
            tmp2685.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2685.__isset.success = this.__isset.success;
          return tmp2685;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2686 = new TStruct("removeListener_result");
            await oprot.WriteStructBeginAsync(tmp2686, cancellationToken);
            var tmp2687 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2687.Name = "Success";
                tmp2687.Type = TType.Struct;
                tmp2687.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2687, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeListener_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2688 = new StringBuilder("removeListener_result(");
          int tmp2689 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2689++) { tmp2688.Append(", "); }
            tmp2688.Append("Success: ");
            Success.ToString(tmp2688);
          }
          tmp2688.Append(')');
          return tmp2688.ToString();
        }
      }


      public partial class listListener_args : TBase
      {
        private global::Nebula.Meta.ListListenerReq _req;

        public global::Nebula.Meta.ListListenerReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listListener_args()
        {
        }

        public listListener_args DeepCopy()
        {
          var tmp2690 = new listListener_args();
          if((Req != null) && __isset.req)
          {
            tmp2690.Req = (global::Nebula.Meta.ListListenerReq)this.Req.DeepCopy();
          }
          tmp2690.__isset.req = this.__isset.req;
          return tmp2690;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListListenerReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2691 = new TStruct("listListener_args");
            await oprot.WriteStructBeginAsync(tmp2691, cancellationToken);
            var tmp2692 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2692.Name = "req";
              tmp2692.Type = TType.Struct;
              tmp2692.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2692, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listListener_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2693 = new StringBuilder("listListener_args(");
          int tmp2694 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2694++) { tmp2693.Append(", "); }
            tmp2693.Append("Req: ");
            Req.ToString(tmp2693);
          }
          tmp2693.Append(')');
          return tmp2693.ToString();
        }
      }


      public partial class listListener_result : TBase
      {
        private global::Nebula.Meta.ListListenerResp _success;

        public global::Nebula.Meta.ListListenerResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listListener_result()
        {
        }

        public listListener_result DeepCopy()
        {
          var tmp2695 = new listListener_result();
          if((Success != null) && __isset.success)
          {
            tmp2695.Success = (global::Nebula.Meta.ListListenerResp)this.Success.DeepCopy();
          }
          tmp2695.__isset.success = this.__isset.success;
          return tmp2695;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListListenerResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2696 = new TStruct("listListener_result");
            await oprot.WriteStructBeginAsync(tmp2696, cancellationToken);
            var tmp2697 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2697.Name = "Success";
                tmp2697.Type = TType.Struct;
                tmp2697.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2697, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listListener_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2698 = new StringBuilder("listListener_result(");
          int tmp2699 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2699++) { tmp2698.Append(", "); }
            tmp2698.Append("Success: ");
            Success.ToString(tmp2698);
          }
          tmp2698.Append(')');
          return tmp2698.ToString();
        }
      }


      public partial class getStats_args : TBase
      {
        private global::Nebula.Meta.GetStatsReq _req;

        public global::Nebula.Meta.GetStatsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getStats_args()
        {
        }

        public getStats_args DeepCopy()
        {
          var tmp2700 = new getStats_args();
          if((Req != null) && __isset.req)
          {
            tmp2700.Req = (global::Nebula.Meta.GetStatsReq)this.Req.DeepCopy();
          }
          tmp2700.__isset.req = this.__isset.req;
          return tmp2700;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetStatsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2701 = new TStruct("getStats_args");
            await oprot.WriteStructBeginAsync(tmp2701, cancellationToken);
            var tmp2702 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2702.Name = "req";
              tmp2702.Type = TType.Struct;
              tmp2702.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2702, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getStats_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2703 = new StringBuilder("getStats_args(");
          int tmp2704 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2704++) { tmp2703.Append(", "); }
            tmp2703.Append("Req: ");
            Req.ToString(tmp2703);
          }
          tmp2703.Append(')');
          return tmp2703.ToString();
        }
      }


      public partial class getStats_result : TBase
      {
        private global::Nebula.Meta.GetStatsResp _success;

        public global::Nebula.Meta.GetStatsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getStats_result()
        {
        }

        public getStats_result DeepCopy()
        {
          var tmp2705 = new getStats_result();
          if((Success != null) && __isset.success)
          {
            tmp2705.Success = (global::Nebula.Meta.GetStatsResp)this.Success.DeepCopy();
          }
          tmp2705.__isset.success = this.__isset.success;
          return tmp2705;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetStatsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2706 = new TStruct("getStats_result");
            await oprot.WriteStructBeginAsync(tmp2706, cancellationToken);
            var tmp2707 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2707.Name = "Success";
                tmp2707.Type = TType.Struct;
                tmp2707.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2707, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getStats_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2708 = new StringBuilder("getStats_result(");
          int tmp2709 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2709++) { tmp2708.Append(", "); }
            tmp2708.Append("Success: ");
            Success.ToString(tmp2708);
          }
          tmp2708.Append(')');
          return tmp2708.ToString();
        }
      }


      public partial class signInFTService_args : TBase
      {
        private global::Nebula.Meta.SignInFTServiceReq _req;

        public global::Nebula.Meta.SignInFTServiceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public signInFTService_args()
        {
        }

        public signInFTService_args DeepCopy()
        {
          var tmp2710 = new signInFTService_args();
          if((Req != null) && __isset.req)
          {
            tmp2710.Req = (global::Nebula.Meta.SignInFTServiceReq)this.Req.DeepCopy();
          }
          tmp2710.__isset.req = this.__isset.req;
          return tmp2710;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.SignInFTServiceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2711 = new TStruct("signInFTService_args");
            await oprot.WriteStructBeginAsync(tmp2711, cancellationToken);
            var tmp2712 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2712.Name = "req";
              tmp2712.Type = TType.Struct;
              tmp2712.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2712, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is signInFTService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2713 = new StringBuilder("signInFTService_args(");
          int tmp2714 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2714++) { tmp2713.Append(", "); }
            tmp2713.Append("Req: ");
            Req.ToString(tmp2713);
          }
          tmp2713.Append(')');
          return tmp2713.ToString();
        }
      }


      public partial class signInFTService_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public signInFTService_result()
        {
        }

        public signInFTService_result DeepCopy()
        {
          var tmp2715 = new signInFTService_result();
          if((Success != null) && __isset.success)
          {
            tmp2715.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2715.__isset.success = this.__isset.success;
          return tmp2715;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2716 = new TStruct("signInFTService_result");
            await oprot.WriteStructBeginAsync(tmp2716, cancellationToken);
            var tmp2717 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2717.Name = "Success";
                tmp2717.Type = TType.Struct;
                tmp2717.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2717, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is signInFTService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2718 = new StringBuilder("signInFTService_result(");
          int tmp2719 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2719++) { tmp2718.Append(", "); }
            tmp2718.Append("Success: ");
            Success.ToString(tmp2718);
          }
          tmp2718.Append(')');
          return tmp2718.ToString();
        }
      }


      public partial class signOutFTService_args : TBase
      {
        private global::Nebula.Meta.SignOutFTServiceReq _req;

        public global::Nebula.Meta.SignOutFTServiceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public signOutFTService_args()
        {
        }

        public signOutFTService_args DeepCopy()
        {
          var tmp2720 = new signOutFTService_args();
          if((Req != null) && __isset.req)
          {
            tmp2720.Req = (global::Nebula.Meta.SignOutFTServiceReq)this.Req.DeepCopy();
          }
          tmp2720.__isset.req = this.__isset.req;
          return tmp2720;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.SignOutFTServiceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2721 = new TStruct("signOutFTService_args");
            await oprot.WriteStructBeginAsync(tmp2721, cancellationToken);
            var tmp2722 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2722.Name = "req";
              tmp2722.Type = TType.Struct;
              tmp2722.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2722, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is signOutFTService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2723 = new StringBuilder("signOutFTService_args(");
          int tmp2724 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2724++) { tmp2723.Append(", "); }
            tmp2723.Append("Req: ");
            Req.ToString(tmp2723);
          }
          tmp2723.Append(')');
          return tmp2723.ToString();
        }
      }


      public partial class signOutFTService_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public signOutFTService_result()
        {
        }

        public signOutFTService_result DeepCopy()
        {
          var tmp2725 = new signOutFTService_result();
          if((Success != null) && __isset.success)
          {
            tmp2725.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2725.__isset.success = this.__isset.success;
          return tmp2725;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2726 = new TStruct("signOutFTService_result");
            await oprot.WriteStructBeginAsync(tmp2726, cancellationToken);
            var tmp2727 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2727.Name = "Success";
                tmp2727.Type = TType.Struct;
                tmp2727.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2727, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is signOutFTService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2728 = new StringBuilder("signOutFTService_result(");
          int tmp2729 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2729++) { tmp2728.Append(", "); }
            tmp2728.Append("Success: ");
            Success.ToString(tmp2728);
          }
          tmp2728.Append(')');
          return tmp2728.ToString();
        }
      }


      public partial class listFTClients_args : TBase
      {
        private global::Nebula.Meta.ListFTClientsReq _req;

        public global::Nebula.Meta.ListFTClientsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listFTClients_args()
        {
        }

        public listFTClients_args DeepCopy()
        {
          var tmp2730 = new listFTClients_args();
          if((Req != null) && __isset.req)
          {
            tmp2730.Req = (global::Nebula.Meta.ListFTClientsReq)this.Req.DeepCopy();
          }
          tmp2730.__isset.req = this.__isset.req;
          return tmp2730;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListFTClientsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2731 = new TStruct("listFTClients_args");
            await oprot.WriteStructBeginAsync(tmp2731, cancellationToken);
            var tmp2732 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2732.Name = "req";
              tmp2732.Type = TType.Struct;
              tmp2732.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2732, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFTClients_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2733 = new StringBuilder("listFTClients_args(");
          int tmp2734 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2734++) { tmp2733.Append(", "); }
            tmp2733.Append("Req: ");
            Req.ToString(tmp2733);
          }
          tmp2733.Append(')');
          return tmp2733.ToString();
        }
      }


      public partial class listFTClients_result : TBase
      {
        private global::Nebula.Meta.ListFTClientsResp _success;

        public global::Nebula.Meta.ListFTClientsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listFTClients_result()
        {
        }

        public listFTClients_result DeepCopy()
        {
          var tmp2735 = new listFTClients_result();
          if((Success != null) && __isset.success)
          {
            tmp2735.Success = (global::Nebula.Meta.ListFTClientsResp)this.Success.DeepCopy();
          }
          tmp2735.__isset.success = this.__isset.success;
          return tmp2735;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListFTClientsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2736 = new TStruct("listFTClients_result");
            await oprot.WriteStructBeginAsync(tmp2736, cancellationToken);
            var tmp2737 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2737.Name = "Success";
                tmp2737.Type = TType.Struct;
                tmp2737.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2737, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFTClients_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2738 = new StringBuilder("listFTClients_result(");
          int tmp2739 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2739++) { tmp2738.Append(", "); }
            tmp2738.Append("Success: ");
            Success.ToString(tmp2738);
          }
          tmp2738.Append(')');
          return tmp2738.ToString();
        }
      }


      public partial class createFTIndex_args : TBase
      {
        private global::Nebula.Meta.CreateFTIndexReq _req;

        public global::Nebula.Meta.CreateFTIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createFTIndex_args()
        {
        }

        public createFTIndex_args DeepCopy()
        {
          var tmp2740 = new createFTIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2740.Req = (global::Nebula.Meta.CreateFTIndexReq)this.Req.DeepCopy();
          }
          tmp2740.__isset.req = this.__isset.req;
          return tmp2740;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateFTIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2741 = new TStruct("createFTIndex_args");
            await oprot.WriteStructBeginAsync(tmp2741, cancellationToken);
            var tmp2742 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2742.Name = "req";
              tmp2742.Type = TType.Struct;
              tmp2742.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2742, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createFTIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2743 = new StringBuilder("createFTIndex_args(");
          int tmp2744 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2744++) { tmp2743.Append(", "); }
            tmp2743.Append("Req: ");
            Req.ToString(tmp2743);
          }
          tmp2743.Append(')');
          return tmp2743.ToString();
        }
      }


      public partial class createFTIndex_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createFTIndex_result()
        {
        }

        public createFTIndex_result DeepCopy()
        {
          var tmp2745 = new createFTIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2745.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2745.__isset.success = this.__isset.success;
          return tmp2745;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2746 = new TStruct("createFTIndex_result");
            await oprot.WriteStructBeginAsync(tmp2746, cancellationToken);
            var tmp2747 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2747.Name = "Success";
                tmp2747.Type = TType.Struct;
                tmp2747.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2747, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createFTIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2748 = new StringBuilder("createFTIndex_result(");
          int tmp2749 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2749++) { tmp2748.Append(", "); }
            tmp2748.Append("Success: ");
            Success.ToString(tmp2748);
          }
          tmp2748.Append(')');
          return tmp2748.ToString();
        }
      }


      public partial class dropFTIndex_args : TBase
      {
        private global::Nebula.Meta.DropFTIndexReq _req;

        public global::Nebula.Meta.DropFTIndexReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropFTIndex_args()
        {
        }

        public dropFTIndex_args DeepCopy()
        {
          var tmp2750 = new dropFTIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp2750.Req = (global::Nebula.Meta.DropFTIndexReq)this.Req.DeepCopy();
          }
          tmp2750.__isset.req = this.__isset.req;
          return tmp2750;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.DropFTIndexReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2751 = new TStruct("dropFTIndex_args");
            await oprot.WriteStructBeginAsync(tmp2751, cancellationToken);
            var tmp2752 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2752.Name = "req";
              tmp2752.Type = TType.Struct;
              tmp2752.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2752, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropFTIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2753 = new StringBuilder("dropFTIndex_args(");
          int tmp2754 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2754++) { tmp2753.Append(", "); }
            tmp2753.Append("Req: ");
            Req.ToString(tmp2753);
          }
          tmp2753.Append(')');
          return tmp2753.ToString();
        }
      }


      public partial class dropFTIndex_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropFTIndex_result()
        {
        }

        public dropFTIndex_result DeepCopy()
        {
          var tmp2755 = new dropFTIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp2755.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2755.__isset.success = this.__isset.success;
          return tmp2755;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2756 = new TStruct("dropFTIndex_result");
            await oprot.WriteStructBeginAsync(tmp2756, cancellationToken);
            var tmp2757 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2757.Name = "Success";
                tmp2757.Type = TType.Struct;
                tmp2757.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2757, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropFTIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2758 = new StringBuilder("dropFTIndex_result(");
          int tmp2759 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2759++) { tmp2758.Append(", "); }
            tmp2758.Append("Success: ");
            Success.ToString(tmp2758);
          }
          tmp2758.Append(')');
          return tmp2758.ToString();
        }
      }


      public partial class listFTIndexes_args : TBase
      {
        private global::Nebula.Meta.ListFTIndexesReq _req;

        public global::Nebula.Meta.ListFTIndexesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listFTIndexes_args()
        {
        }

        public listFTIndexes_args DeepCopy()
        {
          var tmp2760 = new listFTIndexes_args();
          if((Req != null) && __isset.req)
          {
            tmp2760.Req = (global::Nebula.Meta.ListFTIndexesReq)this.Req.DeepCopy();
          }
          tmp2760.__isset.req = this.__isset.req;
          return tmp2760;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListFTIndexesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2761 = new TStruct("listFTIndexes_args");
            await oprot.WriteStructBeginAsync(tmp2761, cancellationToken);
            var tmp2762 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2762.Name = "req";
              tmp2762.Type = TType.Struct;
              tmp2762.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2762, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFTIndexes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2763 = new StringBuilder("listFTIndexes_args(");
          int tmp2764 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2764++) { tmp2763.Append(", "); }
            tmp2763.Append("Req: ");
            Req.ToString(tmp2763);
          }
          tmp2763.Append(')');
          return tmp2763.ToString();
        }
      }


      public partial class listFTIndexes_result : TBase
      {
        private global::Nebula.Meta.ListFTIndexesResp _success;

        public global::Nebula.Meta.ListFTIndexesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listFTIndexes_result()
        {
        }

        public listFTIndexes_result DeepCopy()
        {
          var tmp2765 = new listFTIndexes_result();
          if((Success != null) && __isset.success)
          {
            tmp2765.Success = (global::Nebula.Meta.ListFTIndexesResp)this.Success.DeepCopy();
          }
          tmp2765.__isset.success = this.__isset.success;
          return tmp2765;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListFTIndexesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2766 = new TStruct("listFTIndexes_result");
            await oprot.WriteStructBeginAsync(tmp2766, cancellationToken);
            var tmp2767 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2767.Name = "Success";
                tmp2767.Type = TType.Struct;
                tmp2767.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2767, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listFTIndexes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2768 = new StringBuilder("listFTIndexes_result(");
          int tmp2769 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2769++) { tmp2768.Append(", "); }
            tmp2768.Append("Success: ");
            Success.ToString(tmp2768);
          }
          tmp2768.Append(')');
          return tmp2768.ToString();
        }
      }


      public partial class createSession_args : TBase
      {
        private global::Nebula.Meta.CreateSessionReq _req;

        public global::Nebula.Meta.CreateSessionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createSession_args()
        {
        }

        public createSession_args DeepCopy()
        {
          var tmp2770 = new createSession_args();
          if((Req != null) && __isset.req)
          {
            tmp2770.Req = (global::Nebula.Meta.CreateSessionReq)this.Req.DeepCopy();
          }
          tmp2770.__isset.req = this.__isset.req;
          return tmp2770;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.CreateSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2771 = new TStruct("createSession_args");
            await oprot.WriteStructBeginAsync(tmp2771, cancellationToken);
            var tmp2772 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2772.Name = "req";
              tmp2772.Type = TType.Struct;
              tmp2772.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2772, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2773 = new StringBuilder("createSession_args(");
          int tmp2774 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2774++) { tmp2773.Append(", "); }
            tmp2773.Append("Req: ");
            Req.ToString(tmp2773);
          }
          tmp2773.Append(')');
          return tmp2773.ToString();
        }
      }


      public partial class createSession_result : TBase
      {
        private global::Nebula.Meta.CreateSessionResp _success;

        public global::Nebula.Meta.CreateSessionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createSession_result()
        {
        }

        public createSession_result DeepCopy()
        {
          var tmp2775 = new createSession_result();
          if((Success != null) && __isset.success)
          {
            tmp2775.Success = (global::Nebula.Meta.CreateSessionResp)this.Success.DeepCopy();
          }
          tmp2775.__isset.success = this.__isset.success;
          return tmp2775;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.CreateSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2776 = new TStruct("createSession_result");
            await oprot.WriteStructBeginAsync(tmp2776, cancellationToken);
            var tmp2777 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2777.Name = "Success";
                tmp2777.Type = TType.Struct;
                tmp2777.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2777, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2778 = new StringBuilder("createSession_result(");
          int tmp2779 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2779++) { tmp2778.Append(", "); }
            tmp2778.Append("Success: ");
            Success.ToString(tmp2778);
          }
          tmp2778.Append(')');
          return tmp2778.ToString();
        }
      }


      public partial class updateSessions_args : TBase
      {
        private global::Nebula.Meta.UpdateSessionsReq _req;

        public global::Nebula.Meta.UpdateSessionsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public updateSessions_args()
        {
        }

        public updateSessions_args DeepCopy()
        {
          var tmp2780 = new updateSessions_args();
          if((Req != null) && __isset.req)
          {
            tmp2780.Req = (global::Nebula.Meta.UpdateSessionsReq)this.Req.DeepCopy();
          }
          tmp2780.__isset.req = this.__isset.req;
          return tmp2780;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.UpdateSessionsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2781 = new TStruct("updateSessions_args");
            await oprot.WriteStructBeginAsync(tmp2781, cancellationToken);
            var tmp2782 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2782.Name = "req";
              tmp2782.Type = TType.Struct;
              tmp2782.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2782, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateSessions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2783 = new StringBuilder("updateSessions_args(");
          int tmp2784 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2784++) { tmp2783.Append(", "); }
            tmp2783.Append("Req: ");
            Req.ToString(tmp2783);
          }
          tmp2783.Append(')');
          return tmp2783.ToString();
        }
      }


      public partial class updateSessions_result : TBase
      {
        private global::Nebula.Meta.UpdateSessionsResp _success;

        public global::Nebula.Meta.UpdateSessionsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public updateSessions_result()
        {
        }

        public updateSessions_result DeepCopy()
        {
          var tmp2785 = new updateSessions_result();
          if((Success != null) && __isset.success)
          {
            tmp2785.Success = (global::Nebula.Meta.UpdateSessionsResp)this.Success.DeepCopy();
          }
          tmp2785.__isset.success = this.__isset.success;
          return tmp2785;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.UpdateSessionsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2786 = new TStruct("updateSessions_result");
            await oprot.WriteStructBeginAsync(tmp2786, cancellationToken);
            var tmp2787 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2787.Name = "Success";
                tmp2787.Type = TType.Struct;
                tmp2787.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2787, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateSessions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2788 = new StringBuilder("updateSessions_result(");
          int tmp2789 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2789++) { tmp2788.Append(", "); }
            tmp2788.Append("Success: ");
            Success.ToString(tmp2788);
          }
          tmp2788.Append(')');
          return tmp2788.ToString();
        }
      }


      public partial class listSessions_args : TBase
      {
        private global::Nebula.Meta.ListSessionsReq _req;

        public global::Nebula.Meta.ListSessionsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listSessions_args()
        {
        }

        public listSessions_args DeepCopy()
        {
          var tmp2790 = new listSessions_args();
          if((Req != null) && __isset.req)
          {
            tmp2790.Req = (global::Nebula.Meta.ListSessionsReq)this.Req.DeepCopy();
          }
          tmp2790.__isset.req = this.__isset.req;
          return tmp2790;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListSessionsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2791 = new TStruct("listSessions_args");
            await oprot.WriteStructBeginAsync(tmp2791, cancellationToken);
            var tmp2792 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2792.Name = "req";
              tmp2792.Type = TType.Struct;
              tmp2792.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2792, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSessions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2793 = new StringBuilder("listSessions_args(");
          int tmp2794 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2794++) { tmp2793.Append(", "); }
            tmp2793.Append("Req: ");
            Req.ToString(tmp2793);
          }
          tmp2793.Append(')');
          return tmp2793.ToString();
        }
      }


      public partial class listSessions_result : TBase
      {
        private global::Nebula.Meta.ListSessionsResp _success;

        public global::Nebula.Meta.ListSessionsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listSessions_result()
        {
        }

        public listSessions_result DeepCopy()
        {
          var tmp2795 = new listSessions_result();
          if((Success != null) && __isset.success)
          {
            tmp2795.Success = (global::Nebula.Meta.ListSessionsResp)this.Success.DeepCopy();
          }
          tmp2795.__isset.success = this.__isset.success;
          return tmp2795;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListSessionsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2796 = new TStruct("listSessions_result");
            await oprot.WriteStructBeginAsync(tmp2796, cancellationToken);
            var tmp2797 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2797.Name = "Success";
                tmp2797.Type = TType.Struct;
                tmp2797.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2797, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listSessions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2798 = new StringBuilder("listSessions_result(");
          int tmp2799 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2799++) { tmp2798.Append(", "); }
            tmp2798.Append("Success: ");
            Success.ToString(tmp2798);
          }
          tmp2798.Append(')');
          return tmp2798.ToString();
        }
      }


      public partial class getSession_args : TBase
      {
        private global::Nebula.Meta.GetSessionReq _req;

        public global::Nebula.Meta.GetSessionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getSession_args()
        {
        }

        public getSession_args DeepCopy()
        {
          var tmp2800 = new getSession_args();
          if((Req != null) && __isset.req)
          {
            tmp2800.Req = (global::Nebula.Meta.GetSessionReq)this.Req.DeepCopy();
          }
          tmp2800.__isset.req = this.__isset.req;
          return tmp2800;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2801 = new TStruct("getSession_args");
            await oprot.WriteStructBeginAsync(tmp2801, cancellationToken);
            var tmp2802 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2802.Name = "req";
              tmp2802.Type = TType.Struct;
              tmp2802.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2802, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2803 = new StringBuilder("getSession_args(");
          int tmp2804 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2804++) { tmp2803.Append(", "); }
            tmp2803.Append("Req: ");
            Req.ToString(tmp2803);
          }
          tmp2803.Append(')');
          return tmp2803.ToString();
        }
      }


      public partial class getSession_result : TBase
      {
        private global::Nebula.Meta.GetSessionResp _success;

        public global::Nebula.Meta.GetSessionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getSession_result()
        {
        }

        public getSession_result DeepCopy()
        {
          var tmp2805 = new getSession_result();
          if((Success != null) && __isset.success)
          {
            tmp2805.Success = (global::Nebula.Meta.GetSessionResp)this.Success.DeepCopy();
          }
          tmp2805.__isset.success = this.__isset.success;
          return tmp2805;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2806 = new TStruct("getSession_result");
            await oprot.WriteStructBeginAsync(tmp2806, cancellationToken);
            var tmp2807 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2807.Name = "Success";
                tmp2807.Type = TType.Struct;
                tmp2807.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2807, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2808 = new StringBuilder("getSession_result(");
          int tmp2809 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2809++) { tmp2808.Append(", "); }
            tmp2808.Append("Success: ");
            Success.ToString(tmp2808);
          }
          tmp2808.Append(')');
          return tmp2808.ToString();
        }
      }


      public partial class removeSession_args : TBase
      {
        private global::Nebula.Meta.RemoveSessionReq _req;

        public global::Nebula.Meta.RemoveSessionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public removeSession_args()
        {
        }

        public removeSession_args DeepCopy()
        {
          var tmp2810 = new removeSession_args();
          if((Req != null) && __isset.req)
          {
            tmp2810.Req = (global::Nebula.Meta.RemoveSessionReq)this.Req.DeepCopy();
          }
          tmp2810.__isset.req = this.__isset.req;
          return tmp2810;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.RemoveSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2811 = new TStruct("removeSession_args");
            await oprot.WriteStructBeginAsync(tmp2811, cancellationToken);
            var tmp2812 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2812.Name = "req";
              tmp2812.Type = TType.Struct;
              tmp2812.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2812, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2813 = new StringBuilder("removeSession_args(");
          int tmp2814 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2814++) { tmp2813.Append(", "); }
            tmp2813.Append("Req: ");
            Req.ToString(tmp2813);
          }
          tmp2813.Append(')');
          return tmp2813.ToString();
        }
      }


      public partial class removeSession_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public removeSession_result()
        {
        }

        public removeSession_result DeepCopy()
        {
          var tmp2815 = new removeSession_result();
          if((Success != null) && __isset.success)
          {
            tmp2815.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2815.__isset.success = this.__isset.success;
          return tmp2815;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2816 = new TStruct("removeSession_result");
            await oprot.WriteStructBeginAsync(tmp2816, cancellationToken);
            var tmp2817 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2817.Name = "Success";
                tmp2817.Type = TType.Struct;
                tmp2817.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2817, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removeSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2818 = new StringBuilder("removeSession_result(");
          int tmp2819 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2819++) { tmp2818.Append(", "); }
            tmp2818.Append("Success: ");
            Success.ToString(tmp2818);
          }
          tmp2818.Append(')');
          return tmp2818.ToString();
        }
      }


      public partial class killQuery_args : TBase
      {
        private global::Nebula.Meta.KillQueryReq _req;

        public global::Nebula.Meta.KillQueryReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public killQuery_args()
        {
        }

        public killQuery_args DeepCopy()
        {
          var tmp2820 = new killQuery_args();
          if((Req != null) && __isset.req)
          {
            tmp2820.Req = (global::Nebula.Meta.KillQueryReq)this.Req.DeepCopy();
          }
          tmp2820.__isset.req = this.__isset.req;
          return tmp2820;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.KillQueryReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2821 = new TStruct("killQuery_args");
            await oprot.WriteStructBeginAsync(tmp2821, cancellationToken);
            var tmp2822 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2822.Name = "req";
              tmp2822.Type = TType.Struct;
              tmp2822.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2822, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is killQuery_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2823 = new StringBuilder("killQuery_args(");
          int tmp2824 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2824++) { tmp2823.Append(", "); }
            tmp2823.Append("Req: ");
            Req.ToString(tmp2823);
          }
          tmp2823.Append(')');
          return tmp2823.ToString();
        }
      }


      public partial class killQuery_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public killQuery_result()
        {
        }

        public killQuery_result DeepCopy()
        {
          var tmp2825 = new killQuery_result();
          if((Success != null) && __isset.success)
          {
            tmp2825.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2825.__isset.success = this.__isset.success;
          return tmp2825;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2826 = new TStruct("killQuery_result");
            await oprot.WriteStructBeginAsync(tmp2826, cancellationToken);
            var tmp2827 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2827.Name = "Success";
                tmp2827.Type = TType.Struct;
                tmp2827.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2827, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is killQuery_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2828 = new StringBuilder("killQuery_result(");
          int tmp2829 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2829++) { tmp2828.Append(", "); }
            tmp2828.Append("Success: ");
            Success.ToString(tmp2828);
          }
          tmp2828.Append(')');
          return tmp2828.ToString();
        }
      }


      public partial class reportTaskFinish_args : TBase
      {
        private global::Nebula.Meta.ReportTaskReq _req;

        public global::Nebula.Meta.ReportTaskReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public reportTaskFinish_args()
        {
        }

        public reportTaskFinish_args DeepCopy()
        {
          var tmp2830 = new reportTaskFinish_args();
          if((Req != null) && __isset.req)
          {
            tmp2830.Req = (global::Nebula.Meta.ReportTaskReq)this.Req.DeepCopy();
          }
          tmp2830.__isset.req = this.__isset.req;
          return tmp2830;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ReportTaskReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2831 = new TStruct("reportTaskFinish_args");
            await oprot.WriteStructBeginAsync(tmp2831, cancellationToken);
            var tmp2832 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2832.Name = "req";
              tmp2832.Type = TType.Struct;
              tmp2832.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2832, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is reportTaskFinish_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2833 = new StringBuilder("reportTaskFinish_args(");
          int tmp2834 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2834++) { tmp2833.Append(", "); }
            tmp2833.Append("Req: ");
            Req.ToString(tmp2833);
          }
          tmp2833.Append(')');
          return tmp2833.ToString();
        }
      }


      public partial class reportTaskFinish_result : TBase
      {
        private global::Nebula.Meta.ExecResp _success;

        public global::Nebula.Meta.ExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public reportTaskFinish_result()
        {
        }

        public reportTaskFinish_result DeepCopy()
        {
          var tmp2835 = new reportTaskFinish_result();
          if((Success != null) && __isset.success)
          {
            tmp2835.Success = (global::Nebula.Meta.ExecResp)this.Success.DeepCopy();
          }
          tmp2835.__isset.success = this.__isset.success;
          return tmp2835;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2836 = new TStruct("reportTaskFinish_result");
            await oprot.WriteStructBeginAsync(tmp2836, cancellationToken);
            var tmp2837 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2837.Name = "Success";
                tmp2837.Type = TType.Struct;
                tmp2837.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2837, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is reportTaskFinish_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2838 = new StringBuilder("reportTaskFinish_result(");
          int tmp2839 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2839++) { tmp2838.Append(", "); }
            tmp2838.Append("Success: ");
            Success.ToString(tmp2838);
          }
          tmp2838.Append(')');
          return tmp2838.ToString();
        }
      }


      public partial class listCluster_args : TBase
      {
        private global::Nebula.Meta.ListClusterInfoReq _req;

        public global::Nebula.Meta.ListClusterInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listCluster_args()
        {
        }

        public listCluster_args DeepCopy()
        {
          var tmp2840 = new listCluster_args();
          if((Req != null) && __isset.req)
          {
            tmp2840.Req = (global::Nebula.Meta.ListClusterInfoReq)this.Req.DeepCopy();
          }
          tmp2840.__isset.req = this.__isset.req;
          return tmp2840;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.ListClusterInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2841 = new TStruct("listCluster_args");
            await oprot.WriteStructBeginAsync(tmp2841, cancellationToken);
            var tmp2842 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2842.Name = "req";
              tmp2842.Type = TType.Struct;
              tmp2842.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2842, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2843 = new StringBuilder("listCluster_args(");
          int tmp2844 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2844++) { tmp2843.Append(", "); }
            tmp2843.Append("Req: ");
            Req.ToString(tmp2843);
          }
          tmp2843.Append(')');
          return tmp2843.ToString();
        }
      }


      public partial class listCluster_result : TBase
      {
        private global::Nebula.Meta.ListClusterInfoResp _success;

        public global::Nebula.Meta.ListClusterInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listCluster_result()
        {
        }

        public listCluster_result DeepCopy()
        {
          var tmp2845 = new listCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp2845.Success = (global::Nebula.Meta.ListClusterInfoResp)this.Success.DeepCopy();
          }
          tmp2845.__isset.success = this.__isset.success;
          return tmp2845;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.ListClusterInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2846 = new TStruct("listCluster_result");
            await oprot.WriteStructBeginAsync(tmp2846, cancellationToken);
            var tmp2847 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2847.Name = "Success";
                tmp2847.Type = TType.Struct;
                tmp2847.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2847, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2848 = new StringBuilder("listCluster_result(");
          int tmp2849 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2849++) { tmp2848.Append(", "); }
            tmp2848.Append("Success: ");
            Success.ToString(tmp2848);
          }
          tmp2848.Append(')');
          return tmp2848.ToString();
        }
      }


      public partial class getMetaDirInfo_args : TBase
      {
        private global::Nebula.Meta.GetMetaDirInfoReq _req;

        public global::Nebula.Meta.GetMetaDirInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getMetaDirInfo_args()
        {
        }

        public getMetaDirInfo_args DeepCopy()
        {
          var tmp2850 = new getMetaDirInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp2850.Req = (global::Nebula.Meta.GetMetaDirInfoReq)this.Req.DeepCopy();
          }
          tmp2850.__isset.req = this.__isset.req;
          return tmp2850;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.GetMetaDirInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2851 = new TStruct("getMetaDirInfo_args");
            await oprot.WriteStructBeginAsync(tmp2851, cancellationToken);
            var tmp2852 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2852.Name = "req";
              tmp2852.Type = TType.Struct;
              tmp2852.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2852, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getMetaDirInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2853 = new StringBuilder("getMetaDirInfo_args(");
          int tmp2854 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2854++) { tmp2853.Append(", "); }
            tmp2853.Append("Req: ");
            Req.ToString(tmp2853);
          }
          tmp2853.Append(')');
          return tmp2853.ToString();
        }
      }


      public partial class getMetaDirInfo_result : TBase
      {
        private global::Nebula.Meta.GetMetaDirInfoResp _success;

        public global::Nebula.Meta.GetMetaDirInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getMetaDirInfo_result()
        {
        }

        public getMetaDirInfo_result DeepCopy()
        {
          var tmp2855 = new getMetaDirInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp2855.Success = (global::Nebula.Meta.GetMetaDirInfoResp)this.Success.DeepCopy();
          }
          tmp2855.__isset.success = this.__isset.success;
          return tmp2855;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.GetMetaDirInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2856 = new TStruct("getMetaDirInfo_result");
            await oprot.WriteStructBeginAsync(tmp2856, cancellationToken);
            var tmp2857 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2857.Name = "Success";
                tmp2857.Type = TType.Struct;
                tmp2857.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2857, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getMetaDirInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2858 = new StringBuilder("getMetaDirInfo_result(");
          int tmp2859 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2859++) { tmp2858.Append(", "); }
            tmp2858.Append("Success: ");
            Success.ToString(tmp2858);
          }
          tmp2858.Append(')');
          return tmp2858.ToString();
        }
      }


      public partial class verifyClientVersion_args : TBase
      {
        private global::Nebula.Meta.VerifyClientVersionReq _req;

        public global::Nebula.Meta.VerifyClientVersionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public verifyClientVersion_args()
        {
        }

        public verifyClientVersion_args DeepCopy()
        {
          var tmp2860 = new verifyClientVersion_args();
          if((Req != null) && __isset.req)
          {
            tmp2860.Req = (global::Nebula.Meta.VerifyClientVersionReq)this.Req.DeepCopy();
          }
          tmp2860.__isset.req = this.__isset.req;
          return tmp2860;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Meta.VerifyClientVersionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2861 = new TStruct("verifyClientVersion_args");
            await oprot.WriteStructBeginAsync(tmp2861, cancellationToken);
            var tmp2862 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp2862.Name = "req";
              tmp2862.Type = TType.Struct;
              tmp2862.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp2862, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is verifyClientVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2863 = new StringBuilder("verifyClientVersion_args(");
          int tmp2864 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp2864++) { tmp2863.Append(", "); }
            tmp2863.Append("Req: ");
            Req.ToString(tmp2863);
          }
          tmp2863.Append(')');
          return tmp2863.ToString();
        }
      }


      public partial class verifyClientVersion_result : TBase
      {
        private global::Nebula.Meta.VerifyClientVersionResp _success;

        public global::Nebula.Meta.VerifyClientVersionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public verifyClientVersion_result()
        {
        }

        public verifyClientVersion_result DeepCopy()
        {
          var tmp2865 = new verifyClientVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp2865.Success = (global::Nebula.Meta.VerifyClientVersionResp)this.Success.DeepCopy();
          }
          tmp2865.__isset.success = this.__isset.success;
          return tmp2865;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Meta.VerifyClientVersionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp2866 = new TStruct("verifyClientVersion_result");
            await oprot.WriteStructBeginAsync(tmp2866, cancellationToken);
            var tmp2867 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp2867.Name = "Success";
                tmp2867.Type = TType.Struct;
                tmp2867.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp2867, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is verifyClientVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp2868 = new StringBuilder("verifyClientVersion_result(");
          int tmp2869 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp2869++) { tmp2868.Append(", "); }
            tmp2868.Append("Success: ");
            Success.ToString(tmp2868);
          }
          tmp2868.Append(')');
          return tmp2868.ToString();
        }
      }

    }

  }
}
