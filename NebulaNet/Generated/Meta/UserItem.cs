/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class UserItem : TBase
  {
    private byte[] _account;
    private bool _is_lock;
    private int _max_queries_per_hour;
    private int _max_updates_per_hour;
    private int _max_connections_per_hour;
    private int _max_user_connections;

    public byte[] Account
    {
      get
      {
        return _account;
      }
      set
      {
        __isset.account = true;
        this._account = value;
      }
    }

    public bool Is_lock
    {
      get
      {
        return _is_lock;
      }
      set
      {
        __isset.is_lock = true;
        this._is_lock = value;
      }
    }

    public int Max_queries_per_hour
    {
      get
      {
        return _max_queries_per_hour;
      }
      set
      {
        __isset.max_queries_per_hour = true;
        this._max_queries_per_hour = value;
      }
    }

    public int Max_updates_per_hour
    {
      get
      {
        return _max_updates_per_hour;
      }
      set
      {
        __isset.max_updates_per_hour = true;
        this._max_updates_per_hour = value;
      }
    }

    public int Max_connections_per_hour
    {
      get
      {
        return _max_connections_per_hour;
      }
      set
      {
        __isset.max_connections_per_hour = true;
        this._max_connections_per_hour = value;
      }
    }

    public int Max_user_connections
    {
      get
      {
        return _max_user_connections;
      }
      set
      {
        __isset.max_user_connections = true;
        this._max_user_connections = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool account;
      public bool is_lock;
      public bool max_queries_per_hour;
      public bool max_updates_per_hour;
      public bool max_connections_per_hour;
      public bool max_user_connections;
    }

    public UserItem()
    {
    }

    public UserItem DeepCopy()
    {
      var tmp91 = new UserItem();
      if((Account != null) && __isset.account)
      {
        tmp91.Account = this.Account.ToArray();
      }
      tmp91.__isset.account = this.__isset.account;
      if(__isset.is_lock)
      {
        tmp91.Is_lock = this.Is_lock;
      }
      tmp91.__isset.is_lock = this.__isset.is_lock;
      if(__isset.max_queries_per_hour)
      {
        tmp91.Max_queries_per_hour = this.Max_queries_per_hour;
      }
      tmp91.__isset.max_queries_per_hour = this.__isset.max_queries_per_hour;
      if(__isset.max_updates_per_hour)
      {
        tmp91.Max_updates_per_hour = this.Max_updates_per_hour;
      }
      tmp91.__isset.max_updates_per_hour = this.__isset.max_updates_per_hour;
      if(__isset.max_connections_per_hour)
      {
        tmp91.Max_connections_per_hour = this.Max_connections_per_hour;
      }
      tmp91.__isset.max_connections_per_hour = this.__isset.max_connections_per_hour;
      if(__isset.max_user_connections)
      {
        tmp91.Max_user_connections = this.Max_user_connections;
      }
      tmp91.__isset.max_user_connections = this.__isset.max_user_connections;
      return tmp91;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Account = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                Is_lock = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Max_queries_per_hour = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Max_updates_per_hour = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Max_connections_per_hour = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                Max_user_connections = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp92 = new TStruct("UserItem");
        await oprot.WriteStructBeginAsync(tmp92, cancellationToken);
        var tmp93 = new TField();
        if((Account != null) && __isset.account)
        {
          tmp93.Name = "account";
          tmp93.Type = TType.String;
          tmp93.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp93, cancellationToken);
          await oprot.WriteBinaryAsync(Account, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.is_lock)
        {
          tmp93.Name = "is_lock";
          tmp93.Type = TType.Bool;
          tmp93.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp93, cancellationToken);
          await oprot.WriteBoolAsync(Is_lock, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.max_queries_per_hour)
        {
          tmp93.Name = "max_queries_per_hour";
          tmp93.Type = TType.I32;
          tmp93.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp93, cancellationToken);
          await oprot.WriteI32Async(Max_queries_per_hour, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.max_updates_per_hour)
        {
          tmp93.Name = "max_updates_per_hour";
          tmp93.Type = TType.I32;
          tmp93.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp93, cancellationToken);
          await oprot.WriteI32Async(Max_updates_per_hour, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.max_connections_per_hour)
        {
          tmp93.Name = "max_connections_per_hour";
          tmp93.Type = TType.I32;
          tmp93.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp93, cancellationToken);
          await oprot.WriteI32Async(Max_connections_per_hour, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.max_user_connections)
        {
          tmp93.Name = "max_user_connections";
          tmp93.Type = TType.I32;
          tmp93.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp93, cancellationToken);
          await oprot.WriteI32Async(Max_user_connections, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserItem other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.account == other.__isset.account) && ((!__isset.account) || (TCollections.Equals(Account, other.Account))))
        && ((__isset.is_lock == other.__isset.is_lock) && ((!__isset.is_lock) || (System.Object.Equals(Is_lock, other.Is_lock))))
        && ((__isset.max_queries_per_hour == other.__isset.max_queries_per_hour) && ((!__isset.max_queries_per_hour) || (System.Object.Equals(Max_queries_per_hour, other.Max_queries_per_hour))))
        && ((__isset.max_updates_per_hour == other.__isset.max_updates_per_hour) && ((!__isset.max_updates_per_hour) || (System.Object.Equals(Max_updates_per_hour, other.Max_updates_per_hour))))
        && ((__isset.max_connections_per_hour == other.__isset.max_connections_per_hour) && ((!__isset.max_connections_per_hour) || (System.Object.Equals(Max_connections_per_hour, other.Max_connections_per_hour))))
        && ((__isset.max_user_connections == other.__isset.max_user_connections) && ((!__isset.max_user_connections) || (System.Object.Equals(Max_user_connections, other.Max_user_connections))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Account != null) && __isset.account)
        {
          hashcode = (hashcode * 397) + Account.GetHashCode();
        }
        if(__isset.is_lock)
        {
          hashcode = (hashcode * 397) + Is_lock.GetHashCode();
        }
        if(__isset.max_queries_per_hour)
        {
          hashcode = (hashcode * 397) + Max_queries_per_hour.GetHashCode();
        }
        if(__isset.max_updates_per_hour)
        {
          hashcode = (hashcode * 397) + Max_updates_per_hour.GetHashCode();
        }
        if(__isset.max_connections_per_hour)
        {
          hashcode = (hashcode * 397) + Max_connections_per_hour.GetHashCode();
        }
        if(__isset.max_user_connections)
        {
          hashcode = (hashcode * 397) + Max_user_connections.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp94 = new StringBuilder("UserItem(");
      int tmp95 = 0;
      if((Account != null) && __isset.account)
      {
        if(0 < tmp95++) { tmp94.Append(", "); }
        tmp94.Append("Account: ");
        Account.ToString(tmp94);
      }
      if(__isset.is_lock)
      {
        if(0 < tmp95++) { tmp94.Append(", "); }
        tmp94.Append("Is_lock: ");
        Is_lock.ToString(tmp94);
      }
      if(__isset.max_queries_per_hour)
      {
        if(0 < tmp95++) { tmp94.Append(", "); }
        tmp94.Append("Max_queries_per_hour: ");
        Max_queries_per_hour.ToString(tmp94);
      }
      if(__isset.max_updates_per_hour)
      {
        if(0 < tmp95++) { tmp94.Append(", "); }
        tmp94.Append("Max_updates_per_hour: ");
        Max_updates_per_hour.ToString(tmp94);
      }
      if(__isset.max_connections_per_hour)
      {
        if(0 < tmp95++) { tmp94.Append(", "); }
        tmp94.Append("Max_connections_per_hour: ");
        Max_connections_per_hour.ToString(tmp94);
      }
      if(__isset.max_user_connections)
      {
        if(0 < tmp95++) { tmp94.Append(", "); }
        tmp94.Append("Max_user_connections: ");
        Max_user_connections.ToString(tmp94);
      }
      tmp94.Append(')');
      return tmp94.ToString();
    }
  }

}
