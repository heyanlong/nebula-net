/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class CreateSpaceReq : TBase
  {
    private global::Nebula.Meta.SpaceDesc _properties;
    private bool _if_not_exists;

    public global::Nebula.Meta.SpaceDesc Properties
    {
      get
      {
        return _properties;
      }
      set
      {
        __isset.properties = true;
        this._properties = value;
      }
    }

    public bool If_not_exists
    {
      get
      {
        return _if_not_exists;
      }
      set
      {
        __isset.if_not_exists = true;
        this._if_not_exists = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool properties;
      public bool if_not_exists;
    }

    public CreateSpaceReq()
    {
    }

    public CreateSpaceReq DeepCopy()
    {
      var tmp185 = new CreateSpaceReq();
      if((Properties != null) && __isset.properties)
      {
        tmp185.Properties = (global::Nebula.Meta.SpaceDesc)this.Properties.DeepCopy();
      }
      tmp185.__isset.properties = this.__isset.properties;
      if(__isset.if_not_exists)
      {
        tmp185.If_not_exists = this.If_not_exists;
      }
      tmp185.__isset.if_not_exists = this.__isset.if_not_exists;
      return tmp185;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Properties = new global::Nebula.Meta.SpaceDesc();
                await Properties.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                If_not_exists = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp186 = new TStruct("CreateSpaceReq");
        await oprot.WriteStructBeginAsync(tmp186, cancellationToken);
        var tmp187 = new TField();
        if((Properties != null) && __isset.properties)
        {
          tmp187.Name = "properties";
          tmp187.Type = TType.Struct;
          tmp187.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp187, cancellationToken);
          await Properties.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.if_not_exists)
        {
          tmp187.Name = "if_not_exists";
          tmp187.Type = TType.Bool;
          tmp187.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp187, cancellationToken);
          await oprot.WriteBoolAsync(If_not_exists, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is CreateSpaceReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.properties == other.__isset.properties) && ((!__isset.properties) || (System.Object.Equals(Properties, other.Properties))))
        && ((__isset.if_not_exists == other.__isset.if_not_exists) && ((!__isset.if_not_exists) || (System.Object.Equals(If_not_exists, other.If_not_exists))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Properties != null) && __isset.properties)
        {
          hashcode = (hashcode * 397) + Properties.GetHashCode();
        }
        if(__isset.if_not_exists)
        {
          hashcode = (hashcode * 397) + If_not_exists.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp188 = new StringBuilder("CreateSpaceReq(");
      int tmp189 = 0;
      if((Properties != null) && __isset.properties)
      {
        if(0 < tmp189++) { tmp188.Append(", "); }
        tmp188.Append("Properties: ");
        Properties.ToString(tmp188);
      }
      if(__isset.if_not_exists)
      {
        if(0 < tmp189++) { tmp188.Append(", "); }
        tmp188.Append("If_not_exists: ");
        If_not_exists.ToString(tmp188);
      }
      tmp188.Append(')');
      return tmp188.ToString();
    }
  }

}
