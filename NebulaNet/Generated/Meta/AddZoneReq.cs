/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class AddZoneReq : TBase
  {
    private byte[] _zone_name;
    private List<global::Nebula.Common.HostAddr> _nodes;

    public byte[] Zone_name
    {
      get
      {
        return _zone_name;
      }
      set
      {
        __isset.zone_name = true;
        this._zone_name = value;
      }
    }

    public List<global::Nebula.Common.HostAddr> Nodes
    {
      get
      {
        return _nodes;
      }
      set
      {
        __isset.nodes = true;
        this._nodes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool zone_name;
      public bool nodes;
    }

    public AddZoneReq()
    {
    }

    public AddZoneReq DeepCopy()
    {
      var tmp732 = new AddZoneReq();
      if((Zone_name != null) && __isset.zone_name)
      {
        tmp732.Zone_name = this.Zone_name.ToArray();
      }
      tmp732.__isset.zone_name = this.__isset.zone_name;
      if((Nodes != null) && __isset.nodes)
      {
        tmp732.Nodes = this.Nodes.DeepCopy();
      }
      tmp732.__isset.nodes = this.__isset.nodes;
      return tmp732;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Zone_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list733 = await iprot.ReadListBeginAsync(cancellationToken);
                  Nodes = new List<global::Nebula.Common.HostAddr>(_list733.Count);
                  for(int _i734 = 0; _i734 < _list733.Count; ++_i734)
                  {
                    global::Nebula.Common.HostAddr _elem735;
                    _elem735 = new global::Nebula.Common.HostAddr();
                    await _elem735.ReadAsync(iprot, cancellationToken);
                    Nodes.Add(_elem735);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp736 = new TStruct("AddZoneReq");
        await oprot.WriteStructBeginAsync(tmp736, cancellationToken);
        var tmp737 = new TField();
        if((Zone_name != null) && __isset.zone_name)
        {
          tmp737.Name = "zone_name";
          tmp737.Type = TType.String;
          tmp737.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp737, cancellationToken);
          await oprot.WriteBinaryAsync(Zone_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Nodes != null) && __isset.nodes)
        {
          tmp737.Name = "nodes";
          tmp737.Type = TType.List;
          tmp737.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp737, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Nodes.Count), cancellationToken);
            foreach (global::Nebula.Common.HostAddr _iter738 in Nodes)
            {
              await _iter738.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is AddZoneReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.zone_name == other.__isset.zone_name) && ((!__isset.zone_name) || (TCollections.Equals(Zone_name, other.Zone_name))))
        && ((__isset.nodes == other.__isset.nodes) && ((!__isset.nodes) || (TCollections.Equals(Nodes, other.Nodes))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Zone_name != null) && __isset.zone_name)
        {
          hashcode = (hashcode * 397) + Zone_name.GetHashCode();
        }
        if((Nodes != null) && __isset.nodes)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Nodes);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp739 = new StringBuilder("AddZoneReq(");
      int tmp740 = 0;
      if((Zone_name != null) && __isset.zone_name)
      {
        if(0 < tmp740++) { tmp739.Append(", "); }
        tmp739.Append("Zone_name: ");
        Zone_name.ToString(tmp739);
      }
      if((Nodes != null) && __isset.nodes)
      {
        if(0 < tmp740++) { tmp739.Append(", "); }
        tmp739.Append("Nodes: ");
        Nodes.ToString(tmp739);
      }
      tmp739.Append(')');
      return tmp739.ToString();
    }
  }

}
