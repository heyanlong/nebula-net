/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class RestoreMetaReq : TBase
  {
    private List<byte[]> _files;
    private List<global::Nebula.Meta.HostPair> _hosts;

    public List<byte[]> Files
    {
      get
      {
        return _files;
      }
      set
      {
        __isset.files = true;
        this._files = value;
      }
    }

    public List<global::Nebula.Meta.HostPair> Hosts
    {
      get
      {
        return _hosts;
      }
      set
      {
        __isset.hosts = true;
        this._hosts = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool files;
      public bool hosts;
    }

    public RestoreMetaReq()
    {
    }

    public RestoreMetaReq DeepCopy()
    {
      var tmp946 = new RestoreMetaReq();
      if((Files != null) && __isset.files)
      {
        tmp946.Files = this.Files.DeepCopy();
      }
      tmp946.__isset.files = this.__isset.files;
      if((Hosts != null) && __isset.hosts)
      {
        tmp946.Hosts = this.Hosts.DeepCopy();
      }
      tmp946.__isset.hosts = this.__isset.hosts;
      return tmp946;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list947 = await iprot.ReadListBeginAsync(cancellationToken);
                  Files = new List<byte[]>(_list947.Count);
                  for(int _i948 = 0; _i948 < _list947.Count; ++_i948)
                  {
                    byte[] _elem949;
                    _elem949 = await iprot.ReadBinaryAsync(cancellationToken);
                    Files.Add(_elem949);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list950 = await iprot.ReadListBeginAsync(cancellationToken);
                  Hosts = new List<global::Nebula.Meta.HostPair>(_list950.Count);
                  for(int _i951 = 0; _i951 < _list950.Count; ++_i951)
                  {
                    global::Nebula.Meta.HostPair _elem952;
                    _elem952 = new global::Nebula.Meta.HostPair();
                    await _elem952.ReadAsync(iprot, cancellationToken);
                    Hosts.Add(_elem952);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp953 = new TStruct("RestoreMetaReq");
        await oprot.WriteStructBeginAsync(tmp953, cancellationToken);
        var tmp954 = new TField();
        if((Files != null) && __isset.files)
        {
          tmp954.Name = "files";
          tmp954.Type = TType.List;
          tmp954.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp954, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Files.Count), cancellationToken);
            foreach (byte[] _iter955 in Files)
            {
              await oprot.WriteBinaryAsync(_iter955, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Hosts != null) && __isset.hosts)
        {
          tmp954.Name = "hosts";
          tmp954.Type = TType.List;
          tmp954.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp954, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Hosts.Count), cancellationToken);
            foreach (global::Nebula.Meta.HostPair _iter956 in Hosts)
            {
              await _iter956.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is RestoreMetaReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.files == other.__isset.files) && ((!__isset.files) || (TCollections.Equals(Files, other.Files))))
        && ((__isset.hosts == other.__isset.hosts) && ((!__isset.hosts) || (TCollections.Equals(Hosts, other.Hosts))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Files != null) && __isset.files)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Files);
        }
        if((Hosts != null) && __isset.hosts)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Hosts);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp957 = new StringBuilder("RestoreMetaReq(");
      int tmp958 = 0;
      if((Files != null) && __isset.files)
      {
        if(0 < tmp958++) { tmp957.Append(", "); }
        tmp957.Append("Files: ");
        Files.ToString(tmp957);
      }
      if((Hosts != null) && __isset.hosts)
      {
        if(0 < tmp958++) { tmp957.Append(", "); }
        tmp957.Append("Hosts: ");
        Hosts.ToString(tmp957);
      }
      tmp957.Append(')');
      return tmp957.ToString();
    }
  }

}
