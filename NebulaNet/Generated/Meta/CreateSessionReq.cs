/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class CreateSessionReq : TBase
  {
    private byte[] _user;
    private global::Nebula.Common.HostAddr _graph_addr;
    private byte[] _client_ip;

    public byte[] User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }

    public global::Nebula.Common.HostAddr Graph_addr
    {
      get
      {
        return _graph_addr;
      }
      set
      {
        __isset.graph_addr = true;
        this._graph_addr = value;
      }
    }

    public byte[] Client_ip
    {
      get
      {
        return _client_ip;
      }
      set
      {
        __isset.client_ip = true;
        this._client_ip = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool user;
      public bool graph_addr;
      public bool client_ip;
    }

    public CreateSessionReq()
    {
    }

    public CreateSessionReq DeepCopy()
    {
      var tmp1043 = new CreateSessionReq();
      if((User != null) && __isset.user)
      {
        tmp1043.User = this.User.ToArray();
      }
      tmp1043.__isset.user = this.__isset.user;
      if((Graph_addr != null) && __isset.graph_addr)
      {
        tmp1043.Graph_addr = (global::Nebula.Common.HostAddr)this.Graph_addr.DeepCopy();
      }
      tmp1043.__isset.graph_addr = this.__isset.graph_addr;
      if((Client_ip != null) && __isset.client_ip)
      {
        tmp1043.Client_ip = this.Client_ip.ToArray();
      }
      tmp1043.__isset.client_ip = this.__isset.client_ip;
      return tmp1043;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                User = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Graph_addr = new global::Nebula.Common.HostAddr();
                await Graph_addr.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Client_ip = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1044 = new TStruct("CreateSessionReq");
        await oprot.WriteStructBeginAsync(tmp1044, cancellationToken);
        var tmp1045 = new TField();
        if((User != null) && __isset.user)
        {
          tmp1045.Name = "user";
          tmp1045.Type = TType.String;
          tmp1045.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp1045, cancellationToken);
          await oprot.WriteBinaryAsync(User, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Graph_addr != null) && __isset.graph_addr)
        {
          tmp1045.Name = "graph_addr";
          tmp1045.Type = TType.Struct;
          tmp1045.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp1045, cancellationToken);
          await Graph_addr.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Client_ip != null) && __isset.client_ip)
        {
          tmp1045.Name = "client_ip";
          tmp1045.Type = TType.String;
          tmp1045.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp1045, cancellationToken);
          await oprot.WriteBinaryAsync(Client_ip, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is CreateSessionReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.user == other.__isset.user) && ((!__isset.user) || (TCollections.Equals(User, other.User))))
        && ((__isset.graph_addr == other.__isset.graph_addr) && ((!__isset.graph_addr) || (System.Object.Equals(Graph_addr, other.Graph_addr))))
        && ((__isset.client_ip == other.__isset.client_ip) && ((!__isset.client_ip) || (TCollections.Equals(Client_ip, other.Client_ip))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((User != null) && __isset.user)
        {
          hashcode = (hashcode * 397) + User.GetHashCode();
        }
        if((Graph_addr != null) && __isset.graph_addr)
        {
          hashcode = (hashcode * 397) + Graph_addr.GetHashCode();
        }
        if((Client_ip != null) && __isset.client_ip)
        {
          hashcode = (hashcode * 397) + Client_ip.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp1046 = new StringBuilder("CreateSessionReq(");
      int tmp1047 = 0;
      if((User != null) && __isset.user)
      {
        if(0 < tmp1047++) { tmp1046.Append(", "); }
        tmp1046.Append("User: ");
        User.ToString(tmp1046);
      }
      if((Graph_addr != null) && __isset.graph_addr)
      {
        if(0 < tmp1047++) { tmp1046.Append(", "); }
        tmp1046.Append("Graph_addr: ");
        Graph_addr.ToString(tmp1046);
      }
      if((Client_ip != null) && __isset.client_ip)
      {
        if(0 < tmp1047++) { tmp1046.Append(", "); }
        tmp1046.Append("Client_ip: ");
        Client_ip.ToString(tmp1046);
      }
      tmp1046.Append(')');
      return tmp1046.ToString();
    }
  }

}
