/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class MultiPutReq : TBase
  {
    private byte[] _segment;
    private List<global::Nebula.Common.KeyValue> _pairs;

    public byte[] Segment
    {
      get
      {
        return _segment;
      }
      set
      {
        __isset.segment = true;
        this._segment = value;
      }
    }

    public List<global::Nebula.Common.KeyValue> Pairs
    {
      get
      {
        return _pairs;
      }
      set
      {
        __isset.pairs = true;
        this._pairs = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool segment;
      public bool pairs;
    }

    public MultiPutReq()
    {
    }

    public MultiPutReq DeepCopy()
    {
      var tmp378 = new MultiPutReq();
      if((Segment != null) && __isset.segment)
      {
        tmp378.Segment = this.Segment.ToArray();
      }
      tmp378.__isset.segment = this.__isset.segment;
      if((Pairs != null) && __isset.pairs)
      {
        tmp378.Pairs = this.Pairs.DeepCopy();
      }
      tmp378.__isset.pairs = this.__isset.pairs;
      return tmp378;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Segment = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list379 = await iprot.ReadListBeginAsync(cancellationToken);
                  Pairs = new List<global::Nebula.Common.KeyValue>(_list379.Count);
                  for(int _i380 = 0; _i380 < _list379.Count; ++_i380)
                  {
                    global::Nebula.Common.KeyValue _elem381;
                    _elem381 = new global::Nebula.Common.KeyValue();
                    await _elem381.ReadAsync(iprot, cancellationToken);
                    Pairs.Add(_elem381);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp382 = new TStruct("MultiPutReq");
        await oprot.WriteStructBeginAsync(tmp382, cancellationToken);
        var tmp383 = new TField();
        if((Segment != null) && __isset.segment)
        {
          tmp383.Name = "segment";
          tmp383.Type = TType.String;
          tmp383.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp383, cancellationToken);
          await oprot.WriteBinaryAsync(Segment, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Pairs != null) && __isset.pairs)
        {
          tmp383.Name = "pairs";
          tmp383.Type = TType.List;
          tmp383.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp383, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Pairs.Count), cancellationToken);
            foreach (global::Nebula.Common.KeyValue _iter384 in Pairs)
            {
              await _iter384.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is MultiPutReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.segment == other.__isset.segment) && ((!__isset.segment) || (TCollections.Equals(Segment, other.Segment))))
        && ((__isset.pairs == other.__isset.pairs) && ((!__isset.pairs) || (TCollections.Equals(Pairs, other.Pairs))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Segment != null) && __isset.segment)
        {
          hashcode = (hashcode * 397) + Segment.GetHashCode();
        }
        if((Pairs != null) && __isset.pairs)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Pairs);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp385 = new StringBuilder("MultiPutReq(");
      int tmp386 = 0;
      if((Segment != null) && __isset.segment)
      {
        if(0 < tmp386++) { tmp385.Append(", "); }
        tmp385.Append("Segment: ");
        Segment.ToString(tmp385);
      }
      if((Pairs != null) && __isset.pairs)
      {
        if(0 < tmp386++) { tmp385.Append(", "); }
        tmp385.Append("Pairs: ");
        Pairs.ToString(tmp385);
      }
      tmp385.Append(')');
      return tmp385.ToString();
    }
  }

}
