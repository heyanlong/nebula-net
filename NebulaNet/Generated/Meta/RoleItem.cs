/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class RoleItem : TBase
  {
    private byte[] _user_id;
    private int _space_id;
    private global::Nebula.Meta.RoleType _role_type;

    public byte[] User_id
    {
      get
      {
        return _user_id;
      }
      set
      {
        __isset.user_id = true;
        this._user_id = value;
      }
    }

    public int Space_id
    {
      get
      {
        return _space_id;
      }
      set
      {
        __isset.space_id = true;
        this._space_id = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.RoleType"/>
    /// </summary>
    public global::Nebula.Meta.RoleType Role_type
    {
      get
      {
        return _role_type;
      }
      set
      {
        __isset.role_type = true;
        this._role_type = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool user_id;
      public bool space_id;
      public bool role_type;
    }

    public RoleItem()
    {
    }

    public RoleItem DeepCopy()
    {
      var tmp96 = new RoleItem();
      if((User_id != null) && __isset.user_id)
      {
        tmp96.User_id = this.User_id.ToArray();
      }
      tmp96.__isset.user_id = this.__isset.user_id;
      if(__isset.space_id)
      {
        tmp96.Space_id = this.Space_id;
      }
      tmp96.__isset.space_id = this.__isset.space_id;
      if(__isset.role_type)
      {
        tmp96.Role_type = this.Role_type;
      }
      tmp96.__isset.role_type = this.__isset.role_type;
      return tmp96;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                User_id = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Role_type = (global::Nebula.Meta.RoleType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp97 = new TStruct("RoleItem");
        await oprot.WriteStructBeginAsync(tmp97, cancellationToken);
        var tmp98 = new TField();
        if((User_id != null) && __isset.user_id)
        {
          tmp98.Name = "user_id";
          tmp98.Type = TType.String;
          tmp98.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp98, cancellationToken);
          await oprot.WriteBinaryAsync(User_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.space_id)
        {
          tmp98.Name = "space_id";
          tmp98.Type = TType.I32;
          tmp98.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp98, cancellationToken);
          await oprot.WriteI32Async(Space_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.role_type)
        {
          tmp98.Name = "role_type";
          tmp98.Type = TType.I32;
          tmp98.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp98, cancellationToken);
          await oprot.WriteI32Async((int)Role_type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is RoleItem other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.user_id == other.__isset.user_id) && ((!__isset.user_id) || (TCollections.Equals(User_id, other.User_id))))
        && ((__isset.space_id == other.__isset.space_id) && ((!__isset.space_id) || (System.Object.Equals(Space_id, other.Space_id))))
        && ((__isset.role_type == other.__isset.role_type) && ((!__isset.role_type) || (System.Object.Equals(Role_type, other.Role_type))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((User_id != null) && __isset.user_id)
        {
          hashcode = (hashcode * 397) + User_id.GetHashCode();
        }
        if(__isset.space_id)
        {
          hashcode = (hashcode * 397) + Space_id.GetHashCode();
        }
        if(__isset.role_type)
        {
          hashcode = (hashcode * 397) + Role_type.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp99 = new StringBuilder("RoleItem(");
      int tmp100 = 0;
      if((User_id != null) && __isset.user_id)
      {
        if(0 < tmp100++) { tmp99.Append(", "); }
        tmp99.Append("User_id: ");
        User_id.ToString(tmp99);
      }
      if(__isset.space_id)
      {
        if(0 < tmp100++) { tmp99.Append(", "); }
        tmp99.Append("Space_id: ");
        Space_id.ToString(tmp99);
      }
      if(__isset.role_type)
      {
        if(0 < tmp100++) { tmp99.Append(", "); }
        tmp99.Append("Role_type: ");
        Role_type.ToString(tmp99);
      }
      tmp99.Append(')');
      return tmp99.ToString();
    }
  }

}
