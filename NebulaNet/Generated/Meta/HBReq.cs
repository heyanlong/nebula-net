/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class HBReq : TBase
  {
    private global::Nebula.Meta.HostRole _role;
    private global::Nebula.Common.HostAddr _host;
    private long _cluster_id;
    private Dictionary<int, List<global::Nebula.Meta.LeaderInfo>> _leader_partIds;
    private byte[] _git_info_sha;
    private byte[] _version;

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.HostRole"/>
    /// </summary>
    public global::Nebula.Meta.HostRole Role
    {
      get
      {
        return _role;
      }
      set
      {
        __isset.role = true;
        this._role = value;
      }
    }

    public global::Nebula.Common.HostAddr Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    public long Cluster_id
    {
      get
      {
        return _cluster_id;
      }
      set
      {
        __isset.cluster_id = true;
        this._cluster_id = value;
      }
    }

    public Dictionary<int, List<global::Nebula.Meta.LeaderInfo>> Leader_partIds
    {
      get
      {
        return _leader_partIds;
      }
      set
      {
        __isset.leader_partIds = true;
        this._leader_partIds = value;
      }
    }

    public byte[] Git_info_sha
    {
      get
      {
        return _git_info_sha;
      }
      set
      {
        __isset.git_info_sha = true;
        this._git_info_sha = value;
      }
    }

    public byte[] Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool role;
      public bool host;
      public bool cluster_id;
      public bool leader_partIds;
      public bool git_info_sha;
      public bool version;
    }

    public HBReq()
    {
    }

    public HBReq DeepCopy()
    {
      var tmp449 = new HBReq();
      if(__isset.role)
      {
        tmp449.Role = this.Role;
      }
      tmp449.__isset.role = this.__isset.role;
      if((Host != null) && __isset.host)
      {
        tmp449.Host = (global::Nebula.Common.HostAddr)this.Host.DeepCopy();
      }
      tmp449.__isset.host = this.__isset.host;
      if(__isset.cluster_id)
      {
        tmp449.Cluster_id = this.Cluster_id;
      }
      tmp449.__isset.cluster_id = this.__isset.cluster_id;
      if((Leader_partIds != null) && __isset.leader_partIds)
      {
        tmp449.Leader_partIds = this.Leader_partIds.DeepCopy();
      }
      tmp449.__isset.leader_partIds = this.__isset.leader_partIds;
      if((Git_info_sha != null) && __isset.git_info_sha)
      {
        tmp449.Git_info_sha = this.Git_info_sha.ToArray();
      }
      tmp449.__isset.git_info_sha = this.__isset.git_info_sha;
      if((Version != null) && __isset.version)
      {
        tmp449.Version = this.Version.ToArray();
      }
      tmp449.__isset.version = this.__isset.version;
      return tmp449;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Role = (global::Nebula.Meta.HostRole)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Host = new global::Nebula.Common.HostAddr();
                await Host.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Cluster_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map450 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Leader_partIds = new Dictionary<int, List<global::Nebula.Meta.LeaderInfo>>(_map450.Count);
                  for(int _i451 = 0; _i451 < _map450.Count; ++_i451)
                  {
                    int _key452;
                    List<global::Nebula.Meta.LeaderInfo> _val453;
                    _key452 = await iprot.ReadI32Async(cancellationToken);
                    {
                      TList _list454 = await iprot.ReadListBeginAsync(cancellationToken);
                      _val453 = new List<global::Nebula.Meta.LeaderInfo>(_list454.Count);
                      for(int _i455 = 0; _i455 < _list454.Count; ++_i455)
                      {
                        global::Nebula.Meta.LeaderInfo _elem456;
                        _elem456 = new global::Nebula.Meta.LeaderInfo();
                        await _elem456.ReadAsync(iprot, cancellationToken);
                        _val453.Add(_elem456);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Leader_partIds[_key452] = _val453;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Git_info_sha = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Version = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp457 = new TStruct("HBReq");
        await oprot.WriteStructBeginAsync(tmp457, cancellationToken);
        var tmp458 = new TField();
        if(__isset.role)
        {
          tmp458.Name = "role";
          tmp458.Type = TType.I32;
          tmp458.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
          await oprot.WriteI32Async((int)Role, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Host != null) && __isset.host)
        {
          tmp458.Name = "host";
          tmp458.Type = TType.Struct;
          tmp458.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
          await Host.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.cluster_id)
        {
          tmp458.Name = "cluster_id";
          tmp458.Type = TType.I64;
          tmp458.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
          await oprot.WriteI64Async(Cluster_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Leader_partIds != null) && __isset.leader_partIds)
        {
          tmp458.Name = "leader_partIds";
          tmp458.Type = TType.Map;
          tmp458.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.List, Leader_partIds.Count), cancellationToken);
            foreach (int _iter459 in Leader_partIds.Keys)
            {
              await oprot.WriteI32Async(_iter459, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Leader_partIds[_iter459].Count), cancellationToken);
                foreach (global::Nebula.Meta.LeaderInfo _iter460 in Leader_partIds[_iter459])
                {
                  await _iter460.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Git_info_sha != null) && __isset.git_info_sha)
        {
          tmp458.Name = "git_info_sha";
          tmp458.Type = TType.String;
          tmp458.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
          await oprot.WriteBinaryAsync(Git_info_sha, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Version != null) && __isset.version)
        {
          tmp458.Name = "version";
          tmp458.Type = TType.String;
          tmp458.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
          await oprot.WriteBinaryAsync(Version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is HBReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.role == other.__isset.role) && ((!__isset.role) || (System.Object.Equals(Role, other.Role))))
        && ((__isset.host == other.__isset.host) && ((!__isset.host) || (System.Object.Equals(Host, other.Host))))
        && ((__isset.cluster_id == other.__isset.cluster_id) && ((!__isset.cluster_id) || (System.Object.Equals(Cluster_id, other.Cluster_id))))
        && ((__isset.leader_partIds == other.__isset.leader_partIds) && ((!__isset.leader_partIds) || (TCollections.Equals(Leader_partIds, other.Leader_partIds))))
        && ((__isset.git_info_sha == other.__isset.git_info_sha) && ((!__isset.git_info_sha) || (TCollections.Equals(Git_info_sha, other.Git_info_sha))))
        && ((__isset.version == other.__isset.version) && ((!__isset.version) || (TCollections.Equals(Version, other.Version))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.role)
        {
          hashcode = (hashcode * 397) + Role.GetHashCode();
        }
        if((Host != null) && __isset.host)
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        if(__isset.cluster_id)
        {
          hashcode = (hashcode * 397) + Cluster_id.GetHashCode();
        }
        if((Leader_partIds != null) && __isset.leader_partIds)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Leader_partIds);
        }
        if((Git_info_sha != null) && __isset.git_info_sha)
        {
          hashcode = (hashcode * 397) + Git_info_sha.GetHashCode();
        }
        if((Version != null) && __isset.version)
        {
          hashcode = (hashcode * 397) + Version.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp461 = new StringBuilder("HBReq(");
      int tmp462 = 0;
      if(__isset.role)
      {
        if(0 < tmp462++) { tmp461.Append(", "); }
        tmp461.Append("Role: ");
        Role.ToString(tmp461);
      }
      if((Host != null) && __isset.host)
      {
        if(0 < tmp462++) { tmp461.Append(", "); }
        tmp461.Append("Host: ");
        Host.ToString(tmp461);
      }
      if(__isset.cluster_id)
      {
        if(0 < tmp462++) { tmp461.Append(", "); }
        tmp461.Append("Cluster_id: ");
        Cluster_id.ToString(tmp461);
      }
      if((Leader_partIds != null) && __isset.leader_partIds)
      {
        if(0 < tmp462++) { tmp461.Append(", "); }
        tmp461.Append("Leader_partIds: ");
        Leader_partIds.ToString(tmp461);
      }
      if((Git_info_sha != null) && __isset.git_info_sha)
      {
        if(0 < tmp462++) { tmp461.Append(", "); }
        tmp461.Append("Git_info_sha: ");
        Git_info_sha.ToString(tmp461);
      }
      if((Version != null) && __isset.version)
      {
        if(0 < tmp462++) { tmp461.Append(", "); }
        tmp461.Append("Version: ");
        Version.ToString(tmp461);
      }
      tmp461.Append(')');
      return tmp461.ToString();
    }
  }

}
