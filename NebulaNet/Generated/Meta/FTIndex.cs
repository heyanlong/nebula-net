/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class FTIndex : TBase
  {
    private int _space_id;
    private global::Nebula.Common.SchemaID _depend_schema;
    private List<byte[]> _fields;

    public int Space_id
    {
      get
      {
        return _space_id;
      }
      set
      {
        __isset.space_id = true;
        this._space_id = value;
      }
    }

    public global::Nebula.Common.SchemaID Depend_schema
    {
      get
      {
        return _depend_schema;
      }
      set
      {
        __isset.depend_schema = true;
        this._depend_schema = value;
      }
    }

    public List<byte[]> Fields
    {
      get
      {
        return _fields;
      }
      set
      {
        __isset.fields = true;
        this._fields = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space_id;
      public bool depend_schema;
      public bool fields;
    }

    public FTIndex()
    {
    }

    public FTIndex DeepCopy()
    {
      var tmp990 = new FTIndex();
      if(__isset.space_id)
      {
        tmp990.Space_id = this.Space_id;
      }
      tmp990.__isset.space_id = this.__isset.space_id;
      if((Depend_schema != null) && __isset.depend_schema)
      {
        tmp990.Depend_schema = (global::Nebula.Common.SchemaID)this.Depend_schema.DeepCopy();
      }
      tmp990.__isset.depend_schema = this.__isset.depend_schema;
      if((Fields != null) && __isset.fields)
      {
        tmp990.Fields = this.Fields.DeepCopy();
      }
      tmp990.__isset.fields = this.__isset.fields;
      return tmp990;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Depend_schema = new global::Nebula.Common.SchemaID();
                await Depend_schema.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list991 = await iprot.ReadListBeginAsync(cancellationToken);
                  Fields = new List<byte[]>(_list991.Count);
                  for(int _i992 = 0; _i992 < _list991.Count; ++_i992)
                  {
                    byte[] _elem993;
                    _elem993 = await iprot.ReadBinaryAsync(cancellationToken);
                    Fields.Add(_elem993);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp994 = new TStruct("FTIndex");
        await oprot.WriteStructBeginAsync(tmp994, cancellationToken);
        var tmp995 = new TField();
        if(__isset.space_id)
        {
          tmp995.Name = "space_id";
          tmp995.Type = TType.I32;
          tmp995.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
          await oprot.WriteI32Async(Space_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Depend_schema != null) && __isset.depend_schema)
        {
          tmp995.Name = "depend_schema";
          tmp995.Type = TType.Struct;
          tmp995.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
          await Depend_schema.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Fields != null) && __isset.fields)
        {
          tmp995.Name = "fields";
          tmp995.Type = TType.List;
          tmp995.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Fields.Count), cancellationToken);
            foreach (byte[] _iter996 in Fields)
            {
              await oprot.WriteBinaryAsync(_iter996, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is FTIndex other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space_id == other.__isset.space_id) && ((!__isset.space_id) || (System.Object.Equals(Space_id, other.Space_id))))
        && ((__isset.depend_schema == other.__isset.depend_schema) && ((!__isset.depend_schema) || (System.Object.Equals(Depend_schema, other.Depend_schema))))
        && ((__isset.fields == other.__isset.fields) && ((!__isset.fields) || (TCollections.Equals(Fields, other.Fields))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.space_id)
        {
          hashcode = (hashcode * 397) + Space_id.GetHashCode();
        }
        if((Depend_schema != null) && __isset.depend_schema)
        {
          hashcode = (hashcode * 397) + Depend_schema.GetHashCode();
        }
        if((Fields != null) && __isset.fields)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Fields);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp997 = new StringBuilder("FTIndex(");
      int tmp998 = 0;
      if(__isset.space_id)
      {
        if(0 < tmp998++) { tmp997.Append(", "); }
        tmp997.Append("Space_id: ");
        Space_id.ToString(tmp997);
      }
      if((Depend_schema != null) && __isset.depend_schema)
      {
        if(0 < tmp998++) { tmp997.Append(", "); }
        tmp997.Append("Depend_schema: ");
        Depend_schema.ToString(tmp997);
      }
      if((Fields != null) && __isset.fields)
      {
        if(0 < tmp998++) { tmp997.Append(", "); }
        tmp997.Append("Fields: ");
        Fields.ToString(tmp997);
      }
      tmp997.Append(')');
      return tmp997.ToString();
    }
  }

}
