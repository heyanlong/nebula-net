/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class ColumnTypeDef : TBase
  {
    private short _type_length;
    private global::Nebula.Meta.GeoShape _geo_shape;

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Common.PropertyType"/>
    /// </summary>
    public global::Nebula.Common.PropertyType Type { get; set; }

    public short Type_length
    {
      get
      {
        return _type_length;
      }
      set
      {
        __isset.type_length = true;
        this._type_length = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.GeoShape"/>
    /// </summary>
    public global::Nebula.Meta.GeoShape Geo_shape
    {
      get
      {
        return _geo_shape;
      }
      set
      {
        __isset.geo_shape = true;
        this._geo_shape = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool type_length;
      public bool geo_shape;
    }

    public ColumnTypeDef()
    {
      this._type_length = 0;
      this.__isset.type_length = true;
    }

    public ColumnTypeDef(global::Nebula.Common.PropertyType type) : this()
    {
      this.Type = type;
    }

    public ColumnTypeDef DeepCopy()
    {
      var tmp5 = new ColumnTypeDef();
      tmp5.Type = this.Type;
      if(__isset.type_length)
      {
        tmp5.Type_length = this.Type_length;
      }
      tmp5.__isset.type_length = this.__isset.type_length;
      if(__isset.geo_shape)
      {
        tmp5.Geo_shape = this.Geo_shape;
      }
      tmp5.__isset.geo_shape = this.__isset.geo_shape;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_type = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (global::Nebula.Common.PropertyType)await iprot.ReadI32Async(cancellationToken);
                isset_type = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                Type_length = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Geo_shape = (global::Nebula.Meta.GeoShape)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_type)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp6 = new TStruct("ColumnTypeDef");
        await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
        var tmp7 = new TField();
        tmp7.Name = "type";
        tmp7.Type = TType.I32;
        tmp7.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteI32Async((int)Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if(__isset.type_length)
        {
          tmp7.Name = "type_length";
          tmp7.Type = TType.I16;
          tmp7.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteI16Async(Type_length, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.geo_shape)
        {
          tmp7.Name = "geo_shape";
          tmp7.Type = TType.I32;
          tmp7.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteI32Async((int)Geo_shape, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ColumnTypeDef other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Type, other.Type)
        && ((__isset.type_length == other.__isset.type_length) && ((!__isset.type_length) || (System.Object.Equals(Type_length, other.Type_length))))
        && ((__isset.geo_shape == other.__isset.geo_shape) && ((!__isset.geo_shape) || (System.Object.Equals(Geo_shape, other.Geo_shape))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Type.GetHashCode();
        if(__isset.type_length)
        {
          hashcode = (hashcode * 397) + Type_length.GetHashCode();
        }
        if(__isset.geo_shape)
        {
          hashcode = (hashcode * 397) + Geo_shape.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp8 = new StringBuilder("ColumnTypeDef(");
      tmp8.Append(", Type: ");
      Type.ToString(tmp8);
      if(__isset.type_length)
      {
        tmp8.Append(", Type_length: ");
        Type_length.ToString(tmp8);
      }
      if(__isset.geo_shape)
      {
        tmp8.Append(", Geo_shape: ");
        Geo_shape.ToString(tmp8);
      }
      tmp8.Append(')');
      return tmp8.ToString();
    }
  }

}
