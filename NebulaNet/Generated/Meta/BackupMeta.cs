/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class BackupMeta : TBase
  {
    private Dictionary<int, global::Nebula.Meta.SpaceBackupInfo> _backup_info;
    private List<byte[]> _meta_files;
    private byte[] _backup_name;
    private bool _full;
    private bool _include_system_space;
    private long _create_time;

    public Dictionary<int, global::Nebula.Meta.SpaceBackupInfo> Backup_info
    {
      get
      {
        return _backup_info;
      }
      set
      {
        __isset.backup_info = true;
        this._backup_info = value;
      }
    }

    public List<byte[]> Meta_files
    {
      get
      {
        return _meta_files;
      }
      set
      {
        __isset.meta_files = true;
        this._meta_files = value;
      }
    }

    public byte[] Backup_name
    {
      get
      {
        return _backup_name;
      }
      set
      {
        __isset.backup_name = true;
        this._backup_name = value;
      }
    }

    public bool Full
    {
      get
      {
        return _full;
      }
      set
      {
        __isset.full = true;
        this._full = value;
      }
    }

    public bool Include_system_space
    {
      get
      {
        return _include_system_space;
      }
      set
      {
        __isset.include_system_space = true;
        this._include_system_space = value;
      }
    }

    public long Create_time
    {
      get
      {
        return _create_time;
      }
      set
      {
        __isset.create_time = true;
        this._create_time = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool backup_info;
      public bool meta_files;
      public bool backup_name;
      public bool full;
      public bool include_system_space;
      public bool create_time;
    }

    public BackupMeta()
    {
    }

    public BackupMeta DeepCopy()
    {
      var tmp913 = new BackupMeta();
      if((Backup_info != null) && __isset.backup_info)
      {
        tmp913.Backup_info = this.Backup_info.DeepCopy();
      }
      tmp913.__isset.backup_info = this.__isset.backup_info;
      if((Meta_files != null) && __isset.meta_files)
      {
        tmp913.Meta_files = this.Meta_files.DeepCopy();
      }
      tmp913.__isset.meta_files = this.__isset.meta_files;
      if((Backup_name != null) && __isset.backup_name)
      {
        tmp913.Backup_name = this.Backup_name.ToArray();
      }
      tmp913.__isset.backup_name = this.__isset.backup_name;
      if(__isset.full)
      {
        tmp913.Full = this.Full;
      }
      tmp913.__isset.full = this.__isset.full;
      if(__isset.include_system_space)
      {
        tmp913.Include_system_space = this.Include_system_space;
      }
      tmp913.__isset.include_system_space = this.__isset.include_system_space;
      if(__isset.create_time)
      {
        tmp913.Create_time = this.Create_time;
      }
      tmp913.__isset.create_time = this.__isset.create_time;
      return tmp913;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map914 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Backup_info = new Dictionary<int, global::Nebula.Meta.SpaceBackupInfo>(_map914.Count);
                  for(int _i915 = 0; _i915 < _map914.Count; ++_i915)
                  {
                    int _key916;
                    global::Nebula.Meta.SpaceBackupInfo _val917;
                    _key916 = await iprot.ReadI32Async(cancellationToken);
                    _val917 = new global::Nebula.Meta.SpaceBackupInfo();
                    await _val917.ReadAsync(iprot, cancellationToken);
                    Backup_info[_key916] = _val917;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list918 = await iprot.ReadListBeginAsync(cancellationToken);
                  Meta_files = new List<byte[]>(_list918.Count);
                  for(int _i919 = 0; _i919 < _list918.Count; ++_i919)
                  {
                    byte[] _elem920;
                    _elem920 = await iprot.ReadBinaryAsync(cancellationToken);
                    Meta_files.Add(_elem920);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Backup_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                Full = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                Include_system_space = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Create_time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp921 = new TStruct("BackupMeta");
        await oprot.WriteStructBeginAsync(tmp921, cancellationToken);
        var tmp922 = new TField();
        if((Backup_info != null) && __isset.backup_info)
        {
          tmp922.Name = "backup_info";
          tmp922.Type = TType.Map;
          tmp922.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.Struct, Backup_info.Count), cancellationToken);
            foreach (int _iter923 in Backup_info.Keys)
            {
              await oprot.WriteI32Async(_iter923, cancellationToken);
              await Backup_info[_iter923].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Meta_files != null) && __isset.meta_files)
        {
          tmp922.Name = "meta_files";
          tmp922.Type = TType.List;
          tmp922.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Meta_files.Count), cancellationToken);
            foreach (byte[] _iter924 in Meta_files)
            {
              await oprot.WriteBinaryAsync(_iter924, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Backup_name != null) && __isset.backup_name)
        {
          tmp922.Name = "backup_name";
          tmp922.Type = TType.String;
          tmp922.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
          await oprot.WriteBinaryAsync(Backup_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.full)
        {
          tmp922.Name = "full";
          tmp922.Type = TType.Bool;
          tmp922.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
          await oprot.WriteBoolAsync(Full, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.include_system_space)
        {
          tmp922.Name = "include_system_space";
          tmp922.Type = TType.Bool;
          tmp922.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
          await oprot.WriteBoolAsync(Include_system_space, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.create_time)
        {
          tmp922.Name = "create_time";
          tmp922.Type = TType.I64;
          tmp922.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
          await oprot.WriteI64Async(Create_time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BackupMeta other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.backup_info == other.__isset.backup_info) && ((!__isset.backup_info) || (TCollections.Equals(Backup_info, other.Backup_info))))
        && ((__isset.meta_files == other.__isset.meta_files) && ((!__isset.meta_files) || (TCollections.Equals(Meta_files, other.Meta_files))))
        && ((__isset.backup_name == other.__isset.backup_name) && ((!__isset.backup_name) || (TCollections.Equals(Backup_name, other.Backup_name))))
        && ((__isset.full == other.__isset.full) && ((!__isset.full) || (System.Object.Equals(Full, other.Full))))
        && ((__isset.include_system_space == other.__isset.include_system_space) && ((!__isset.include_system_space) || (System.Object.Equals(Include_system_space, other.Include_system_space))))
        && ((__isset.create_time == other.__isset.create_time) && ((!__isset.create_time) || (System.Object.Equals(Create_time, other.Create_time))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Backup_info != null) && __isset.backup_info)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Backup_info);
        }
        if((Meta_files != null) && __isset.meta_files)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Meta_files);
        }
        if((Backup_name != null) && __isset.backup_name)
        {
          hashcode = (hashcode * 397) + Backup_name.GetHashCode();
        }
        if(__isset.full)
        {
          hashcode = (hashcode * 397) + Full.GetHashCode();
        }
        if(__isset.include_system_space)
        {
          hashcode = (hashcode * 397) + Include_system_space.GetHashCode();
        }
        if(__isset.create_time)
        {
          hashcode = (hashcode * 397) + Create_time.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp925 = new StringBuilder("BackupMeta(");
      int tmp926 = 0;
      if((Backup_info != null) && __isset.backup_info)
      {
        if(0 < tmp926++) { tmp925.Append(", "); }
        tmp925.Append("Backup_info: ");
        Backup_info.ToString(tmp925);
      }
      if((Meta_files != null) && __isset.meta_files)
      {
        if(0 < tmp926++) { tmp925.Append(", "); }
        tmp925.Append("Meta_files: ");
        Meta_files.ToString(tmp925);
      }
      if((Backup_name != null) && __isset.backup_name)
      {
        if(0 < tmp926++) { tmp925.Append(", "); }
        tmp925.Append("Backup_name: ");
        Backup_name.ToString(tmp925);
      }
      if(__isset.full)
      {
        if(0 < tmp926++) { tmp925.Append(", "); }
        tmp925.Append("Full: ");
        Full.ToString(tmp925);
      }
      if(__isset.include_system_space)
      {
        if(0 < tmp926++) { tmp925.Append(", "); }
        tmp925.Append("Include_system_space: ");
        Include_system_space.ToString(tmp925);
      }
      if(__isset.create_time)
      {
        if(0 < tmp926++) { tmp925.Append(", "); }
        tmp925.Append("Create_time: ");
        Create_time.ToString(tmp925);
      }
      tmp925.Append(')');
      return tmp925.ToString();
    }
  }

}
