/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class SpaceDesc : TBase
  {
    private byte[] _space_name;
    private int _partition_num;
    private int _replica_factor;
    private byte[] _charset_name;
    private byte[] _collate_name;
    private global::Nebula.Meta.ColumnTypeDef _vid_type;
    private byte[] _group_name;
    private global::Nebula.Meta.IsolationLevel _isolation_level;
    private byte[] _comment;

    public byte[] Space_name
    {
      get
      {
        return _space_name;
      }
      set
      {
        __isset.space_name = true;
        this._space_name = value;
      }
    }

    public int Partition_num
    {
      get
      {
        return _partition_num;
      }
      set
      {
        __isset.partition_num = true;
        this._partition_num = value;
      }
    }

    public int Replica_factor
    {
      get
      {
        return _replica_factor;
      }
      set
      {
        __isset.replica_factor = true;
        this._replica_factor = value;
      }
    }

    public byte[] Charset_name
    {
      get
      {
        return _charset_name;
      }
      set
      {
        __isset.charset_name = true;
        this._charset_name = value;
      }
    }

    public byte[] Collate_name
    {
      get
      {
        return _collate_name;
      }
      set
      {
        __isset.collate_name = true;
        this._collate_name = value;
      }
    }

    public global::Nebula.Meta.ColumnTypeDef Vid_type
    {
      get
      {
        return _vid_type;
      }
      set
      {
        __isset.vid_type = true;
        this._vid_type = value;
      }
    }

    public byte[] Group_name
    {
      get
      {
        return _group_name;
      }
      set
      {
        __isset.group_name = true;
        this._group_name = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.IsolationLevel"/>
    /// </summary>
    public global::Nebula.Meta.IsolationLevel Isolation_level
    {
      get
      {
        return _isolation_level;
      }
      set
      {
        __isset.isolation_level = true;
        this._isolation_level = value;
      }
    }

    public byte[] Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space_name;
      public bool partition_num;
      public bool replica_factor;
      public bool charset_name;
      public bool collate_name;
      public bool vid_type;
      public bool group_name;
      public bool isolation_level;
      public bool comment;
    }

    public SpaceDesc()
    {
      this._partition_num = 0;
      this.__isset.partition_num = true;
      this._replica_factor = 0;
      this.__isset.replica_factor = true;
      this._vid_type = new global::Nebula.Meta.ColumnTypeDef();
      this._vid_type.Type = global::Nebula.Common.PropertyType.FIXED_STRING;
      this._vid_type.Type_length = 8;
      this.__isset.vid_type = true;
    }

    public SpaceDesc DeepCopy()
    {
      var tmp34 = new SpaceDesc();
      if((Space_name != null) && __isset.space_name)
      {
        tmp34.Space_name = this.Space_name.ToArray();
      }
      tmp34.__isset.space_name = this.__isset.space_name;
      if(__isset.partition_num)
      {
        tmp34.Partition_num = this.Partition_num;
      }
      tmp34.__isset.partition_num = this.__isset.partition_num;
      if(__isset.replica_factor)
      {
        tmp34.Replica_factor = this.Replica_factor;
      }
      tmp34.__isset.replica_factor = this.__isset.replica_factor;
      if((Charset_name != null) && __isset.charset_name)
      {
        tmp34.Charset_name = this.Charset_name.ToArray();
      }
      tmp34.__isset.charset_name = this.__isset.charset_name;
      if((Collate_name != null) && __isset.collate_name)
      {
        tmp34.Collate_name = this.Collate_name.ToArray();
      }
      tmp34.__isset.collate_name = this.__isset.collate_name;
      if((Vid_type != null) && __isset.vid_type)
      {
        tmp34.Vid_type = (global::Nebula.Meta.ColumnTypeDef)this.Vid_type.DeepCopy();
      }
      tmp34.__isset.vid_type = this.__isset.vid_type;
      if((Group_name != null) && __isset.group_name)
      {
        tmp34.Group_name = this.Group_name.ToArray();
      }
      tmp34.__isset.group_name = this.__isset.group_name;
      if(__isset.isolation_level)
      {
        tmp34.Isolation_level = this.Isolation_level;
      }
      tmp34.__isset.isolation_level = this.__isset.isolation_level;
      if((Comment != null) && __isset.comment)
      {
        tmp34.Comment = this.Comment.ToArray();
      }
      tmp34.__isset.comment = this.__isset.comment;
      return tmp34;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Space_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Partition_num = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Replica_factor = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Charset_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Collate_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Vid_type = new global::Nebula.Meta.ColumnTypeDef();
                await Vid_type.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                Group_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                Isolation_level = (global::Nebula.Meta.IsolationLevel)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                Comment = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp35 = new TStruct("SpaceDesc");
        await oprot.WriteStructBeginAsync(tmp35, cancellationToken);
        var tmp36 = new TField();
        if((Space_name != null) && __isset.space_name)
        {
          tmp36.Name = "space_name";
          tmp36.Type = TType.String;
          tmp36.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteBinaryAsync(Space_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.partition_num)
        {
          tmp36.Name = "partition_num";
          tmp36.Type = TType.I32;
          tmp36.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteI32Async(Partition_num, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.replica_factor)
        {
          tmp36.Name = "replica_factor";
          tmp36.Type = TType.I32;
          tmp36.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteI32Async(Replica_factor, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Charset_name != null) && __isset.charset_name)
        {
          tmp36.Name = "charset_name";
          tmp36.Type = TType.String;
          tmp36.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteBinaryAsync(Charset_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Collate_name != null) && __isset.collate_name)
        {
          tmp36.Name = "collate_name";
          tmp36.Type = TType.String;
          tmp36.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteBinaryAsync(Collate_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Vid_type != null) && __isset.vid_type)
        {
          tmp36.Name = "vid_type";
          tmp36.Type = TType.Struct;
          tmp36.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await Vid_type.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Group_name != null) && __isset.group_name)
        {
          tmp36.Name = "group_name";
          tmp36.Type = TType.String;
          tmp36.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteBinaryAsync(Group_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.isolation_level)
        {
          tmp36.Name = "isolation_level";
          tmp36.Type = TType.I32;
          tmp36.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteI32Async((int)Isolation_level, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Comment != null) && __isset.comment)
        {
          tmp36.Name = "comment";
          tmp36.Type = TType.String;
          tmp36.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteBinaryAsync(Comment, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SpaceDesc other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space_name == other.__isset.space_name) && ((!__isset.space_name) || (TCollections.Equals(Space_name, other.Space_name))))
        && ((__isset.partition_num == other.__isset.partition_num) && ((!__isset.partition_num) || (System.Object.Equals(Partition_num, other.Partition_num))))
        && ((__isset.replica_factor == other.__isset.replica_factor) && ((!__isset.replica_factor) || (System.Object.Equals(Replica_factor, other.Replica_factor))))
        && ((__isset.charset_name == other.__isset.charset_name) && ((!__isset.charset_name) || (TCollections.Equals(Charset_name, other.Charset_name))))
        && ((__isset.collate_name == other.__isset.collate_name) && ((!__isset.collate_name) || (TCollections.Equals(Collate_name, other.Collate_name))))
        && ((__isset.vid_type == other.__isset.vid_type) && ((!__isset.vid_type) || (System.Object.Equals(Vid_type, other.Vid_type))))
        && ((__isset.group_name == other.__isset.group_name) && ((!__isset.group_name) || (TCollections.Equals(Group_name, other.Group_name))))
        && ((__isset.isolation_level == other.__isset.isolation_level) && ((!__isset.isolation_level) || (System.Object.Equals(Isolation_level, other.Isolation_level))))
        && ((__isset.comment == other.__isset.comment) && ((!__isset.comment) || (TCollections.Equals(Comment, other.Comment))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Space_name != null) && __isset.space_name)
        {
          hashcode = (hashcode * 397) + Space_name.GetHashCode();
        }
        if(__isset.partition_num)
        {
          hashcode = (hashcode * 397) + Partition_num.GetHashCode();
        }
        if(__isset.replica_factor)
        {
          hashcode = (hashcode * 397) + Replica_factor.GetHashCode();
        }
        if((Charset_name != null) && __isset.charset_name)
        {
          hashcode = (hashcode * 397) + Charset_name.GetHashCode();
        }
        if((Collate_name != null) && __isset.collate_name)
        {
          hashcode = (hashcode * 397) + Collate_name.GetHashCode();
        }
        if((Vid_type != null) && __isset.vid_type)
        {
          hashcode = (hashcode * 397) + Vid_type.GetHashCode();
        }
        if((Group_name != null) && __isset.group_name)
        {
          hashcode = (hashcode * 397) + Group_name.GetHashCode();
        }
        if(__isset.isolation_level)
        {
          hashcode = (hashcode * 397) + Isolation_level.GetHashCode();
        }
        if((Comment != null) && __isset.comment)
        {
          hashcode = (hashcode * 397) + Comment.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp37 = new StringBuilder("SpaceDesc(");
      int tmp38 = 0;
      if((Space_name != null) && __isset.space_name)
      {
        if(0 < tmp38++) { tmp37.Append(", "); }
        tmp37.Append("Space_name: ");
        Space_name.ToString(tmp37);
      }
      if(__isset.partition_num)
      {
        if(0 < tmp38++) { tmp37.Append(", "); }
        tmp37.Append("Partition_num: ");
        Partition_num.ToString(tmp37);
      }
      if(__isset.replica_factor)
      {
        if(0 < tmp38++) { tmp37.Append(", "); }
        tmp37.Append("Replica_factor: ");
        Replica_factor.ToString(tmp37);
      }
      if((Charset_name != null) && __isset.charset_name)
      {
        if(0 < tmp38++) { tmp37.Append(", "); }
        tmp37.Append("Charset_name: ");
        Charset_name.ToString(tmp37);
      }
      if((Collate_name != null) && __isset.collate_name)
      {
        if(0 < tmp38++) { tmp37.Append(", "); }
        tmp37.Append("Collate_name: ");
        Collate_name.ToString(tmp37);
      }
      if((Vid_type != null) && __isset.vid_type)
      {
        if(0 < tmp38++) { tmp37.Append(", "); }
        tmp37.Append("Vid_type: ");
        Vid_type.ToString(tmp37);
      }
      if((Group_name != null) && __isset.group_name)
      {
        if(0 < tmp38++) { tmp37.Append(", "); }
        tmp37.Append("Group_name: ");
        Group_name.ToString(tmp37);
      }
      if(__isset.isolation_level)
      {
        if(0 < tmp38++) { tmp37.Append(", "); }
        tmp37.Append("Isolation_level: ");
        Isolation_level.ToString(tmp37);
      }
      if((Comment != null) && __isset.comment)
      {
        if(0 < tmp38++) { tmp37.Append(", "); }
        tmp37.Append("Comment: ");
        Comment.ToString(tmp37);
      }
      tmp37.Append(')');
      return tmp37.ToString();
    }
  }

}
