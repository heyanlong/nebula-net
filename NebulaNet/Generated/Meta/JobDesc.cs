/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class JobDesc : TBase
  {
    private int _id;
    private global::Nebula.Meta.AdminCmd _cmd;
    private List<string> _paras;
    private global::Nebula.Meta.JobStatus _status;
    private long _start_time;
    private long _stop_time;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.AdminCmd"/>
    /// </summary>
    public global::Nebula.Meta.AdminCmd Cmd
    {
      get
      {
        return _cmd;
      }
      set
      {
        __isset.cmd = true;
        this._cmd = value;
      }
    }

    public List<string> Paras
    {
      get
      {
        return _paras;
      }
      set
      {
        __isset.paras = true;
        this._paras = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.JobStatus"/>
    /// </summary>
    public global::Nebula.Meta.JobStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public long Start_time
    {
      get
      {
        return _start_time;
      }
      set
      {
        __isset.start_time = true;
        this._start_time = value;
      }
    }

    public long Stop_time
    {
      get
      {
        return _stop_time;
      }
      set
      {
        __isset.stop_time = true;
        this._stop_time = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool id;
      public bool cmd;
      public bool paras;
      public bool status;
      public bool start_time;
      public bool stop_time;
    }

    public JobDesc()
    {
    }

    public JobDesc DeepCopy()
    {
      var tmp115 = new JobDesc();
      if(__isset.id)
      {
        tmp115.Id = this.Id;
      }
      tmp115.__isset.id = this.__isset.id;
      if(__isset.cmd)
      {
        tmp115.Cmd = this.Cmd;
      }
      tmp115.__isset.cmd = this.__isset.cmd;
      if((Paras != null) && __isset.paras)
      {
        tmp115.Paras = this.Paras.DeepCopy();
      }
      tmp115.__isset.paras = this.__isset.paras;
      if(__isset.status)
      {
        tmp115.Status = this.Status;
      }
      tmp115.__isset.status = this.__isset.status;
      if(__isset.start_time)
      {
        tmp115.Start_time = this.Start_time;
      }
      tmp115.__isset.start_time = this.__isset.start_time;
      if(__isset.stop_time)
      {
        tmp115.Stop_time = this.Stop_time;
      }
      tmp115.__isset.stop_time = this.__isset.stop_time;
      return tmp115;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Cmd = (global::Nebula.Meta.AdminCmd)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list116 = await iprot.ReadListBeginAsync(cancellationToken);
                  Paras = new List<string>(_list116.Count);
                  for(int _i117 = 0; _i117 < _list116.Count; ++_i117)
                  {
                    string _elem118;
                    _elem118 = await iprot.ReadStringAsync(cancellationToken);
                    Paras.Add(_elem118);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Status = (global::Nebula.Meta.JobStatus)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Start_time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Stop_time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp119 = new TStruct("JobDesc");
        await oprot.WriteStructBeginAsync(tmp119, cancellationToken);
        var tmp120 = new TField();
        if(__isset.id)
        {
          tmp120.Name = "id";
          tmp120.Type = TType.I32;
          tmp120.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.cmd)
        {
          tmp120.Name = "cmd";
          tmp120.Type = TType.I32;
          tmp120.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
          await oprot.WriteI32Async((int)Cmd, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Paras != null) && __isset.paras)
        {
          tmp120.Name = "paras";
          tmp120.Type = TType.List;
          tmp120.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Paras.Count), cancellationToken);
            foreach (string _iter121 in Paras)
            {
              await oprot.WriteStringAsync(_iter121, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.status)
        {
          tmp120.Name = "status";
          tmp120.Type = TType.I32;
          tmp120.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
          await oprot.WriteI32Async((int)Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.start_time)
        {
          tmp120.Name = "start_time";
          tmp120.Type = TType.I64;
          tmp120.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
          await oprot.WriteI64Async(Start_time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.stop_time)
        {
          tmp120.Name = "stop_time";
          tmp120.Type = TType.I64;
          tmp120.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
          await oprot.WriteI64Async(Stop_time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is JobDesc other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))))
        && ((__isset.cmd == other.__isset.cmd) && ((!__isset.cmd) || (System.Object.Equals(Cmd, other.Cmd))))
        && ((__isset.paras == other.__isset.paras) && ((!__isset.paras) || (TCollections.Equals(Paras, other.Paras))))
        && ((__isset.status == other.__isset.status) && ((!__isset.status) || (System.Object.Equals(Status, other.Status))))
        && ((__isset.start_time == other.__isset.start_time) && ((!__isset.start_time) || (System.Object.Equals(Start_time, other.Start_time))))
        && ((__isset.stop_time == other.__isset.stop_time) && ((!__isset.stop_time) || (System.Object.Equals(Stop_time, other.Stop_time))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.id)
        {
          hashcode = (hashcode * 397) + Id.GetHashCode();
        }
        if(__isset.cmd)
        {
          hashcode = (hashcode * 397) + Cmd.GetHashCode();
        }
        if((Paras != null) && __isset.paras)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Paras);
        }
        if(__isset.status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if(__isset.start_time)
        {
          hashcode = (hashcode * 397) + Start_time.GetHashCode();
        }
        if(__isset.stop_time)
        {
          hashcode = (hashcode * 397) + Stop_time.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp122 = new StringBuilder("JobDesc(");
      int tmp123 = 0;
      if(__isset.id)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Id: ");
        Id.ToString(tmp122);
      }
      if(__isset.cmd)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Cmd: ");
        Cmd.ToString(tmp122);
      }
      if((Paras != null) && __isset.paras)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Paras: ");
        Paras.ToString(tmp122);
      }
      if(__isset.status)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Status: ");
        Status.ToString(tmp122);
      }
      if(__isset.start_time)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Start_time: ");
        Start_time.ToString(tmp122);
      }
      if(__isset.stop_time)
      {
        if(0 < tmp123++) { tmp122.Append(", "); }
        tmp122.Append("Stop_time: ");
        Stop_time.ToString(tmp122);
      }
      tmp122.Append(')');
      return tmp122.ToString();
    }
  }

}
