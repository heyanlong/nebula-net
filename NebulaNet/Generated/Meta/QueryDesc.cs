/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class QueryDesc : TBase
  {
    private long _start_time;
    private global::Nebula.Meta.QueryStatus _status;
    private long _duration;
    private byte[] _query;
    private global::Nebula.Common.HostAddr _graph_addr;

    public long Start_time
    {
      get
      {
        return _start_time;
      }
      set
      {
        __isset.start_time = true;
        this._start_time = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.QueryStatus"/>
    /// </summary>
    public global::Nebula.Meta.QueryStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public long Duration
    {
      get
      {
        return _duration;
      }
      set
      {
        __isset.duration = true;
        this._duration = value;
      }
    }

    public byte[] Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }

    public global::Nebula.Common.HostAddr Graph_addr
    {
      get
      {
        return _graph_addr;
      }
      set
      {
        __isset.graph_addr = true;
        this._graph_addr = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool start_time;
      public bool status;
      public bool duration;
      public bool query;
      public bool graph_addr;
    }

    public QueryDesc()
    {
    }

    public QueryDesc DeepCopy()
    {
      var tmp1023 = new QueryDesc();
      if(__isset.start_time)
      {
        tmp1023.Start_time = this.Start_time;
      }
      tmp1023.__isset.start_time = this.__isset.start_time;
      if(__isset.status)
      {
        tmp1023.Status = this.Status;
      }
      tmp1023.__isset.status = this.__isset.status;
      if(__isset.duration)
      {
        tmp1023.Duration = this.Duration;
      }
      tmp1023.__isset.duration = this.__isset.duration;
      if((Query != null) && __isset.query)
      {
        tmp1023.Query = this.Query.ToArray();
      }
      tmp1023.__isset.query = this.__isset.query;
      if((Graph_addr != null) && __isset.graph_addr)
      {
        tmp1023.Graph_addr = (global::Nebula.Common.HostAddr)this.Graph_addr.DeepCopy();
      }
      tmp1023.__isset.graph_addr = this.__isset.graph_addr;
      return tmp1023;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Start_time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Status = (global::Nebula.Meta.QueryStatus)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Duration = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Query = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Graph_addr = new global::Nebula.Common.HostAddr();
                await Graph_addr.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1024 = new TStruct("QueryDesc");
        await oprot.WriteStructBeginAsync(tmp1024, cancellationToken);
        var tmp1025 = new TField();
        if(__isset.start_time)
        {
          tmp1025.Name = "start_time";
          tmp1025.Type = TType.I64;
          tmp1025.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp1025, cancellationToken);
          await oprot.WriteI64Async(Start_time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.status)
        {
          tmp1025.Name = "status";
          tmp1025.Type = TType.I32;
          tmp1025.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp1025, cancellationToken);
          await oprot.WriteI32Async((int)Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.duration)
        {
          tmp1025.Name = "duration";
          tmp1025.Type = TType.I64;
          tmp1025.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp1025, cancellationToken);
          await oprot.WriteI64Async(Duration, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Query != null) && __isset.query)
        {
          tmp1025.Name = "query";
          tmp1025.Type = TType.String;
          tmp1025.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp1025, cancellationToken);
          await oprot.WriteBinaryAsync(Query, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Graph_addr != null) && __isset.graph_addr)
        {
          tmp1025.Name = "graph_addr";
          tmp1025.Type = TType.Struct;
          tmp1025.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp1025, cancellationToken);
          await Graph_addr.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is QueryDesc other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.start_time == other.__isset.start_time) && ((!__isset.start_time) || (System.Object.Equals(Start_time, other.Start_time))))
        && ((__isset.status == other.__isset.status) && ((!__isset.status) || (System.Object.Equals(Status, other.Status))))
        && ((__isset.duration == other.__isset.duration) && ((!__isset.duration) || (System.Object.Equals(Duration, other.Duration))))
        && ((__isset.query == other.__isset.query) && ((!__isset.query) || (TCollections.Equals(Query, other.Query))))
        && ((__isset.graph_addr == other.__isset.graph_addr) && ((!__isset.graph_addr) || (System.Object.Equals(Graph_addr, other.Graph_addr))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.start_time)
        {
          hashcode = (hashcode * 397) + Start_time.GetHashCode();
        }
        if(__isset.status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if(__isset.duration)
        {
          hashcode = (hashcode * 397) + Duration.GetHashCode();
        }
        if((Query != null) && __isset.query)
        {
          hashcode = (hashcode * 397) + Query.GetHashCode();
        }
        if((Graph_addr != null) && __isset.graph_addr)
        {
          hashcode = (hashcode * 397) + Graph_addr.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp1026 = new StringBuilder("QueryDesc(");
      int tmp1027 = 0;
      if(__isset.start_time)
      {
        if(0 < tmp1027++) { tmp1026.Append(", "); }
        tmp1026.Append("Start_time: ");
        Start_time.ToString(tmp1026);
      }
      if(__isset.status)
      {
        if(0 < tmp1027++) { tmp1026.Append(", "); }
        tmp1026.Append("Status: ");
        Status.ToString(tmp1026);
      }
      if(__isset.duration)
      {
        if(0 < tmp1027++) { tmp1026.Append(", "); }
        tmp1026.Append("Duration: ");
        Duration.ToString(tmp1026);
      }
      if((Query != null) && __isset.query)
      {
        if(0 < tmp1027++) { tmp1026.Append(", "); }
        tmp1026.Append("Query: ");
        Query.ToString(tmp1026);
      }
      if((Graph_addr != null) && __isset.graph_addr)
      {
        if(0 < tmp1027++) { tmp1026.Append(", "); }
        tmp1026.Append("Graph_addr: ");
        Graph_addr.ToString(tmp1026);
      }
      tmp1026.Append(')');
      return tmp1026.ToString();
    }
  }

}
