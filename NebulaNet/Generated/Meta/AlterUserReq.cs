/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class AlterUserReq : TBase
  {
    private byte[] _account;
    private byte[] _encoded_pwd;

    public byte[] Account
    {
      get
      {
        return _account;
      }
      set
      {
        __isset.account = true;
        this._account = value;
      }
    }

    public byte[] Encoded_pwd
    {
      get
      {
        return _encoded_pwd;
      }
      set
      {
        __isset.encoded_pwd = true;
        this._encoded_pwd = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool account;
      public bool encoded_pwd;
    }

    public AlterUserReq()
    {
    }

    public AlterUserReq DeepCopy()
    {
      var tmp559 = new AlterUserReq();
      if((Account != null) && __isset.account)
      {
        tmp559.Account = this.Account.ToArray();
      }
      tmp559.__isset.account = this.__isset.account;
      if((Encoded_pwd != null) && __isset.encoded_pwd)
      {
        tmp559.Encoded_pwd = this.Encoded_pwd.ToArray();
      }
      tmp559.__isset.encoded_pwd = this.__isset.encoded_pwd;
      return tmp559;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Account = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Encoded_pwd = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp560 = new TStruct("AlterUserReq");
        await oprot.WriteStructBeginAsync(tmp560, cancellationToken);
        var tmp561 = new TField();
        if((Account != null) && __isset.account)
        {
          tmp561.Name = "account";
          tmp561.Type = TType.String;
          tmp561.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp561, cancellationToken);
          await oprot.WriteBinaryAsync(Account, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Encoded_pwd != null) && __isset.encoded_pwd)
        {
          tmp561.Name = "encoded_pwd";
          tmp561.Type = TType.String;
          tmp561.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp561, cancellationToken);
          await oprot.WriteBinaryAsync(Encoded_pwd, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is AlterUserReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.account == other.__isset.account) && ((!__isset.account) || (TCollections.Equals(Account, other.Account))))
        && ((__isset.encoded_pwd == other.__isset.encoded_pwd) && ((!__isset.encoded_pwd) || (TCollections.Equals(Encoded_pwd, other.Encoded_pwd))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Account != null) && __isset.account)
        {
          hashcode = (hashcode * 397) + Account.GetHashCode();
        }
        if((Encoded_pwd != null) && __isset.encoded_pwd)
        {
          hashcode = (hashcode * 397) + Encoded_pwd.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp562 = new StringBuilder("AlterUserReq(");
      int tmp563 = 0;
      if((Account != null) && __isset.account)
      {
        if(0 < tmp563++) { tmp562.Append(", "); }
        tmp562.Append("Account: ");
        Account.ToString(tmp562);
      }
      if((Encoded_pwd != null) && __isset.encoded_pwd)
      {
        if(0 < tmp563++) { tmp562.Append(", "); }
        tmp562.Append("Encoded_pwd: ");
        Encoded_pwd.ToString(tmp562);
      }
      tmp562.Append(')');
      return tmp562.ToString();
    }
  }

}
