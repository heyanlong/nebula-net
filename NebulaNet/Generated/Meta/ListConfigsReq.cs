/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class ListConfigsReq : TBase
  {
    private byte[] _space;
    private global::Nebula.Meta.ConfigModule _ConfigModule;

    public byte[] Space
    {
      get
      {
        return _space;
      }
      set
      {
        __isset.space = true;
        this._space = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.ConfigModule"/>
    /// </summary>
    public global::Nebula.Meta.ConfigModule ConfigModule
    {
      get
      {
        return _ConfigModule;
      }
      set
      {
        __isset.ConfigModule = true;
        this._ConfigModule = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space;
      public bool ConfigModule;
    }

    public ListConfigsReq()
    {
    }

    public ListConfigsReq DeepCopy()
    {
      var tmp672 = new ListConfigsReq();
      if((Space != null) && __isset.space)
      {
        tmp672.Space = this.Space.ToArray();
      }
      tmp672.__isset.space = this.__isset.space;
      if(__isset.ConfigModule)
      {
        tmp672.ConfigModule = this.ConfigModule;
      }
      tmp672.__isset.ConfigModule = this.__isset.ConfigModule;
      return tmp672;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Space = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                ConfigModule = (global::Nebula.Meta.ConfigModule)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp673 = new TStruct("ListConfigsReq");
        await oprot.WriteStructBeginAsync(tmp673, cancellationToken);
        var tmp674 = new TField();
        if((Space != null) && __isset.space)
        {
          tmp674.Name = "space";
          tmp674.Type = TType.String;
          tmp674.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp674, cancellationToken);
          await oprot.WriteBinaryAsync(Space, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.ConfigModule)
        {
          tmp674.Name = "ConfigModule";
          tmp674.Type = TType.I32;
          tmp674.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp674, cancellationToken);
          await oprot.WriteI32Async((int)ConfigModule, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ListConfigsReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space == other.__isset.space) && ((!__isset.space) || (TCollections.Equals(Space, other.Space))))
        && ((__isset.ConfigModule == other.__isset.ConfigModule) && ((!__isset.ConfigModule) || (System.Object.Equals(ConfigModule, other.ConfigModule))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Space != null) && __isset.space)
        {
          hashcode = (hashcode * 397) + Space.GetHashCode();
        }
        if(__isset.ConfigModule)
        {
          hashcode = (hashcode * 397) + ConfigModule.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp675 = new StringBuilder("ListConfigsReq(");
      int tmp676 = 0;
      if((Space != null) && __isset.space)
      {
        if(0 < tmp676++) { tmp675.Append(", "); }
        tmp675.Append("Space: ");
        Space.ToString(tmp675);
      }
      if(__isset.ConfigModule)
      {
        if(0 < tmp676++) { tmp675.Append(", "); }
        tmp675.Append("ConfigModule: ");
        ConfigModule.ToString(tmp675);
      }
      tmp675.Append(')');
      return tmp675.ToString();
    }
  }

}
