/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class AdminJobResult : TBase
  {
    private int _job_id;
    private List<global::Nebula.Meta.JobDesc> _job_desc;
    private List<global::Nebula.Meta.TaskDesc> _task_desc;
    private int _recovered_job_num;

    public int Job_id
    {
      get
      {
        return _job_id;
      }
      set
      {
        __isset.job_id = true;
        this._job_id = value;
      }
    }

    public List<global::Nebula.Meta.JobDesc> Job_desc
    {
      get
      {
        return _job_desc;
      }
      set
      {
        __isset.job_desc = true;
        this._job_desc = value;
      }
    }

    public List<global::Nebula.Meta.TaskDesc> Task_desc
    {
      get
      {
        return _task_desc;
      }
      set
      {
        __isset.task_desc = true;
        this._task_desc = value;
      }
    }

    public int Recovered_job_num
    {
      get
      {
        return _recovered_job_num;
      }
      set
      {
        __isset.recovered_job_num = true;
        this._recovered_job_num = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool job_id;
      public bool job_desc;
      public bool task_desc;
      public bool recovered_job_num;
    }

    public AdminJobResult()
    {
    }

    public AdminJobResult DeepCopy()
    {
      var tmp129 = new AdminJobResult();
      if(__isset.job_id)
      {
        tmp129.Job_id = this.Job_id;
      }
      tmp129.__isset.job_id = this.__isset.job_id;
      if((Job_desc != null) && __isset.job_desc)
      {
        tmp129.Job_desc = this.Job_desc.DeepCopy();
      }
      tmp129.__isset.job_desc = this.__isset.job_desc;
      if((Task_desc != null) && __isset.task_desc)
      {
        tmp129.Task_desc = this.Task_desc.DeepCopy();
      }
      tmp129.__isset.task_desc = this.__isset.task_desc;
      if(__isset.recovered_job_num)
      {
        tmp129.Recovered_job_num = this.Recovered_job_num;
      }
      tmp129.__isset.recovered_job_num = this.__isset.recovered_job_num;
      return tmp129;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Job_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list130 = await iprot.ReadListBeginAsync(cancellationToken);
                  Job_desc = new List<global::Nebula.Meta.JobDesc>(_list130.Count);
                  for(int _i131 = 0; _i131 < _list130.Count; ++_i131)
                  {
                    global::Nebula.Meta.JobDesc _elem132;
                    _elem132 = new global::Nebula.Meta.JobDesc();
                    await _elem132.ReadAsync(iprot, cancellationToken);
                    Job_desc.Add(_elem132);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list133 = await iprot.ReadListBeginAsync(cancellationToken);
                  Task_desc = new List<global::Nebula.Meta.TaskDesc>(_list133.Count);
                  for(int _i134 = 0; _i134 < _list133.Count; ++_i134)
                  {
                    global::Nebula.Meta.TaskDesc _elem135;
                    _elem135 = new global::Nebula.Meta.TaskDesc();
                    await _elem135.ReadAsync(iprot, cancellationToken);
                    Task_desc.Add(_elem135);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Recovered_job_num = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp136 = new TStruct("AdminJobResult");
        await oprot.WriteStructBeginAsync(tmp136, cancellationToken);
        var tmp137 = new TField();
        if(__isset.job_id)
        {
          tmp137.Name = "job_id";
          tmp137.Type = TType.I32;
          tmp137.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteI32Async(Job_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Job_desc != null) && __isset.job_desc)
        {
          tmp137.Name = "job_desc";
          tmp137.Type = TType.List;
          tmp137.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Job_desc.Count), cancellationToken);
            foreach (global::Nebula.Meta.JobDesc _iter138 in Job_desc)
            {
              await _iter138.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Task_desc != null) && __isset.task_desc)
        {
          tmp137.Name = "task_desc";
          tmp137.Type = TType.List;
          tmp137.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Task_desc.Count), cancellationToken);
            foreach (global::Nebula.Meta.TaskDesc _iter139 in Task_desc)
            {
              await _iter139.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.recovered_job_num)
        {
          tmp137.Name = "recovered_job_num";
          tmp137.Type = TType.I32;
          tmp137.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
          await oprot.WriteI32Async(Recovered_job_num, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is AdminJobResult other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.job_id == other.__isset.job_id) && ((!__isset.job_id) || (System.Object.Equals(Job_id, other.Job_id))))
        && ((__isset.job_desc == other.__isset.job_desc) && ((!__isset.job_desc) || (TCollections.Equals(Job_desc, other.Job_desc))))
        && ((__isset.task_desc == other.__isset.task_desc) && ((!__isset.task_desc) || (TCollections.Equals(Task_desc, other.Task_desc))))
        && ((__isset.recovered_job_num == other.__isset.recovered_job_num) && ((!__isset.recovered_job_num) || (System.Object.Equals(Recovered_job_num, other.Recovered_job_num))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.job_id)
        {
          hashcode = (hashcode * 397) + Job_id.GetHashCode();
        }
        if((Job_desc != null) && __isset.job_desc)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Job_desc);
        }
        if((Task_desc != null) && __isset.task_desc)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Task_desc);
        }
        if(__isset.recovered_job_num)
        {
          hashcode = (hashcode * 397) + Recovered_job_num.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp140 = new StringBuilder("AdminJobResult(");
      int tmp141 = 0;
      if(__isset.job_id)
      {
        if(0 < tmp141++) { tmp140.Append(", "); }
        tmp140.Append("Job_id: ");
        Job_id.ToString(tmp140);
      }
      if((Job_desc != null) && __isset.job_desc)
      {
        if(0 < tmp141++) { tmp140.Append(", "); }
        tmp140.Append("Job_desc: ");
        Job_desc.ToString(tmp140);
      }
      if((Task_desc != null) && __isset.task_desc)
      {
        if(0 < tmp141++) { tmp140.Append(", "); }
        tmp140.Append("Task_desc: ");
        Task_desc.ToString(tmp140);
      }
      if(__isset.recovered_job_num)
      {
        if(0 < tmp141++) { tmp140.Append(", "); }
        tmp140.Append("Recovered_job_num: ");
        Recovered_job_num.ToString(tmp140);
      }
      tmp140.Append(')');
      return tmp140.ToString();
    }
  }

}
