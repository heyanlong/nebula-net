/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class Schema : TBase
  {
    private List<global::Nebula.Meta.ColumnDef> _columns;
    private global::Nebula.Meta.SchemaProp _schema_prop;

    public List<global::Nebula.Meta.ColumnDef> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public global::Nebula.Meta.SchemaProp Schema_prop
    {
      get
      {
        return _schema_prop;
      }
      set
      {
        __isset.schema_prop = true;
        this._schema_prop = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool columns;
      public bool schema_prop;
    }

    public Schema()
    {
    }

    public Schema DeepCopy()
    {
      var tmp20 = new Schema();
      if((Columns != null) && __isset.columns)
      {
        tmp20.Columns = this.Columns.DeepCopy();
      }
      tmp20.__isset.columns = this.__isset.columns;
      if((Schema_prop != null) && __isset.schema_prop)
      {
        tmp20.Schema_prop = (global::Nebula.Meta.SchemaProp)this.Schema_prop.DeepCopy();
      }
      tmp20.__isset.schema_prop = this.__isset.schema_prop;
      return tmp20;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list21 = await iprot.ReadListBeginAsync(cancellationToken);
                  Columns = new List<global::Nebula.Meta.ColumnDef>(_list21.Count);
                  for(int _i22 = 0; _i22 < _list21.Count; ++_i22)
                  {
                    global::Nebula.Meta.ColumnDef _elem23;
                    _elem23 = new global::Nebula.Meta.ColumnDef();
                    await _elem23.ReadAsync(iprot, cancellationToken);
                    Columns.Add(_elem23);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Schema_prop = new global::Nebula.Meta.SchemaProp();
                await Schema_prop.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp24 = new TStruct("Schema");
        await oprot.WriteStructBeginAsync(tmp24, cancellationToken);
        var tmp25 = new TField();
        if((Columns != null) && __isset.columns)
        {
          tmp25.Name = "columns";
          tmp25.Type = TType.List;
          tmp25.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns.Count), cancellationToken);
            foreach (global::Nebula.Meta.ColumnDef _iter26 in Columns)
            {
              await _iter26.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Schema_prop != null) && __isset.schema_prop)
        {
          tmp25.Name = "schema_prop";
          tmp25.Type = TType.Struct;
          tmp25.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await Schema_prop.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Schema other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.columns == other.__isset.columns) && ((!__isset.columns) || (TCollections.Equals(Columns, other.Columns))))
        && ((__isset.schema_prop == other.__isset.schema_prop) && ((!__isset.schema_prop) || (System.Object.Equals(Schema_prop, other.Schema_prop))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Columns != null) && __isset.columns)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Columns);
        }
        if((Schema_prop != null) && __isset.schema_prop)
        {
          hashcode = (hashcode * 397) + Schema_prop.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp27 = new StringBuilder("Schema(");
      int tmp28 = 0;
      if((Columns != null) && __isset.columns)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Columns: ");
        Columns.ToString(tmp27);
      }
      if((Schema_prop != null) && __isset.schema_prop)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Schema_prop: ");
        Schema_prop.ToString(tmp27);
      }
      tmp27.Append(')');
      return tmp27.ToString();
    }
  }

}
