/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class ScanReq : TBase
  {
    private byte[] _segment;
    private byte[] _start;
    private byte[] _endScan;

    public byte[] Segment
    {
      get
      {
        return _segment;
      }
      set
      {
        __isset.segment = true;
        this._segment = value;
      }
    }

    public byte[] Start
    {
      get
      {
        return _start;
      }
      set
      {
        __isset.start = true;
        this._start = value;
      }
    }

    public byte[] EndScan
    {
      get
      {
        return _endScan;
      }
      set
      {
        __isset.endScan = true;
        this._endScan = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool segment;
      public bool start;
      public bool endScan;
    }

    public ScanReq()
    {
    }

    public ScanReq DeepCopy()
    {
      var tmp425 = new ScanReq();
      if((Segment != null) && __isset.segment)
      {
        tmp425.Segment = this.Segment.ToArray();
      }
      tmp425.__isset.segment = this.__isset.segment;
      if((Start != null) && __isset.start)
      {
        tmp425.Start = this.Start.ToArray();
      }
      tmp425.__isset.start = this.__isset.start;
      if((EndScan != null) && __isset.endScan)
      {
        tmp425.EndScan = this.EndScan.ToArray();
      }
      tmp425.__isset.endScan = this.__isset.endScan;
      return tmp425;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Segment = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Start = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                EndScan = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp426 = new TStruct("ScanReq");
        await oprot.WriteStructBeginAsync(tmp426, cancellationToken);
        var tmp427 = new TField();
        if((Segment != null) && __isset.segment)
        {
          tmp427.Name = "segment";
          tmp427.Type = TType.String;
          tmp427.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp427, cancellationToken);
          await oprot.WriteBinaryAsync(Segment, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Start != null) && __isset.start)
        {
          tmp427.Name = "start";
          tmp427.Type = TType.String;
          tmp427.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp427, cancellationToken);
          await oprot.WriteBinaryAsync(Start, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((EndScan != null) && __isset.endScan)
        {
          tmp427.Name = "endScan";
          tmp427.Type = TType.String;
          tmp427.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp427, cancellationToken);
          await oprot.WriteBinaryAsync(EndScan, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ScanReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.segment == other.__isset.segment) && ((!__isset.segment) || (TCollections.Equals(Segment, other.Segment))))
        && ((__isset.start == other.__isset.start) && ((!__isset.start) || (TCollections.Equals(Start, other.Start))))
        && ((__isset.endScan == other.__isset.endScan) && ((!__isset.endScan) || (TCollections.Equals(EndScan, other.EndScan))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Segment != null) && __isset.segment)
        {
          hashcode = (hashcode * 397) + Segment.GetHashCode();
        }
        if((Start != null) && __isset.start)
        {
          hashcode = (hashcode * 397) + Start.GetHashCode();
        }
        if((EndScan != null) && __isset.endScan)
        {
          hashcode = (hashcode * 397) + EndScan.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp428 = new StringBuilder("ScanReq(");
      int tmp429 = 0;
      if((Segment != null) && __isset.segment)
      {
        if(0 < tmp429++) { tmp428.Append(", "); }
        tmp428.Append("Segment: ");
        Segment.ToString(tmp428);
      }
      if((Start != null) && __isset.start)
      {
        if(0 < tmp429++) { tmp428.Append(", "); }
        tmp428.Append("Start: ");
        Start.ToString(tmp428);
      }
      if((EndScan != null) && __isset.endScan)
      {
        if(0 < tmp429++) { tmp428.Append(", "); }
        tmp428.Append("EndScan: ");
        EndScan.ToString(tmp428);
      }
      tmp428.Append(')');
      return tmp428.ToString();
    }
  }

}
