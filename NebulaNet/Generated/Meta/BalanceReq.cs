/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class BalanceReq : TBase
  {
    private int _space_id;
    private long _id;
    private List<global::Nebula.Common.HostAddr> _host_del;
    private bool _stop;
    private bool _reset;

    public int Space_id
    {
      get
      {
        return _space_id;
      }
      set
      {
        __isset.space_id = true;
        this._space_id = value;
      }
    }

    public long Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public List<global::Nebula.Common.HostAddr> Host_del
    {
      get
      {
        return _host_del;
      }
      set
      {
        __isset.host_del = true;
        this._host_del = value;
      }
    }

    public bool Stop
    {
      get
      {
        return _stop;
      }
      set
      {
        __isset.stop = true;
        this._stop = value;
      }
    }

    public bool Reset
    {
      get
      {
        return _reset;
      }
      set
      {
        __isset.reset = true;
        this._reset = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space_id;
      public bool id;
      public bool host_del;
      public bool stop;
      public bool reset;
    }

    public BalanceReq()
    {
    }

    public BalanceReq DeepCopy()
    {
      var tmp612 = new BalanceReq();
      if(__isset.space_id)
      {
        tmp612.Space_id = this.Space_id;
      }
      tmp612.__isset.space_id = this.__isset.space_id;
      if(__isset.id)
      {
        tmp612.Id = this.Id;
      }
      tmp612.__isset.id = this.__isset.id;
      if((Host_del != null) && __isset.host_del)
      {
        tmp612.Host_del = this.Host_del.DeepCopy();
      }
      tmp612.__isset.host_del = this.__isset.host_del;
      if(__isset.stop)
      {
        tmp612.Stop = this.Stop;
      }
      tmp612.__isset.stop = this.__isset.stop;
      if(__isset.reset)
      {
        tmp612.Reset = this.Reset;
      }
      tmp612.__isset.reset = this.__isset.reset;
      return tmp612;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list613 = await iprot.ReadListBeginAsync(cancellationToken);
                  Host_del = new List<global::Nebula.Common.HostAddr>(_list613.Count);
                  for(int _i614 = 0; _i614 < _list613.Count; ++_i614)
                  {
                    global::Nebula.Common.HostAddr _elem615;
                    _elem615 = new global::Nebula.Common.HostAddr();
                    await _elem615.ReadAsync(iprot, cancellationToken);
                    Host_del.Add(_elem615);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                Stop = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                Reset = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp616 = new TStruct("BalanceReq");
        await oprot.WriteStructBeginAsync(tmp616, cancellationToken);
        var tmp617 = new TField();
        if(__isset.space_id)
        {
          tmp617.Name = "space_id";
          tmp617.Type = TType.I32;
          tmp617.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp617, cancellationToken);
          await oprot.WriteI32Async(Space_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.id)
        {
          tmp617.Name = "id";
          tmp617.Type = TType.I64;
          tmp617.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp617, cancellationToken);
          await oprot.WriteI64Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Host_del != null) && __isset.host_del)
        {
          tmp617.Name = "host_del";
          tmp617.Type = TType.List;
          tmp617.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp617, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Host_del.Count), cancellationToken);
            foreach (global::Nebula.Common.HostAddr _iter618 in Host_del)
            {
              await _iter618.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.stop)
        {
          tmp617.Name = "stop";
          tmp617.Type = TType.Bool;
          tmp617.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp617, cancellationToken);
          await oprot.WriteBoolAsync(Stop, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.reset)
        {
          tmp617.Name = "reset";
          tmp617.Type = TType.Bool;
          tmp617.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp617, cancellationToken);
          await oprot.WriteBoolAsync(Reset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BalanceReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space_id == other.__isset.space_id) && ((!__isset.space_id) || (System.Object.Equals(Space_id, other.Space_id))))
        && ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))))
        && ((__isset.host_del == other.__isset.host_del) && ((!__isset.host_del) || (TCollections.Equals(Host_del, other.Host_del))))
        && ((__isset.stop == other.__isset.stop) && ((!__isset.stop) || (System.Object.Equals(Stop, other.Stop))))
        && ((__isset.reset == other.__isset.reset) && ((!__isset.reset) || (System.Object.Equals(Reset, other.Reset))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.space_id)
        {
          hashcode = (hashcode * 397) + Space_id.GetHashCode();
        }
        if(__isset.id)
        {
          hashcode = (hashcode * 397) + Id.GetHashCode();
        }
        if((Host_del != null) && __isset.host_del)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Host_del);
        }
        if(__isset.stop)
        {
          hashcode = (hashcode * 397) + Stop.GetHashCode();
        }
        if(__isset.reset)
        {
          hashcode = (hashcode * 397) + Reset.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp619 = new StringBuilder("BalanceReq(");
      int tmp620 = 0;
      if(__isset.space_id)
      {
        if(0 < tmp620++) { tmp619.Append(", "); }
        tmp619.Append("Space_id: ");
        Space_id.ToString(tmp619);
      }
      if(__isset.id)
      {
        if(0 < tmp620++) { tmp619.Append(", "); }
        tmp619.Append("Id: ");
        Id.ToString(tmp619);
      }
      if((Host_del != null) && __isset.host_del)
      {
        if(0 < tmp620++) { tmp619.Append(", "); }
        tmp619.Append("Host_del: ");
        Host_del.ToString(tmp619);
      }
      if(__isset.stop)
      {
        if(0 < tmp620++) { tmp619.Append(", "); }
        tmp619.Append("Stop: ");
        Stop.ToString(tmp619);
      }
      if(__isset.reset)
      {
        if(0 < tmp620++) { tmp619.Append(", "); }
        tmp619.Append("Reset: ");
        Reset.ToString(tmp619);
      }
      tmp619.Append(')');
      return tmp619.ToString();
    }
  }

}
