/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class FTClient : TBase
  {
    private byte[] _user;
    private byte[] _pwd;

    public global::Nebula.Common.HostAddr Host { get; set; }

    public byte[] User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }

    public byte[] Pwd
    {
      get
      {
        return _pwd;
      }
      set
      {
        __isset.pwd = true;
        this._pwd = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool user;
      public bool pwd;
    }

    public FTClient()
    {
    }

    public FTClient(global::Nebula.Common.HostAddr host) : this()
    {
      this.Host = host;
    }

    public FTClient DeepCopy()
    {
      var tmp959 = new FTClient();
      if((Host != null))
      {
        tmp959.Host = (global::Nebula.Common.HostAddr)this.Host.DeepCopy();
      }
      if((User != null) && __isset.user)
      {
        tmp959.User = this.User.ToArray();
      }
      tmp959.__isset.user = this.__isset.user;
      if((Pwd != null) && __isset.pwd)
      {
        tmp959.Pwd = this.Pwd.ToArray();
      }
      tmp959.__isset.pwd = this.__isset.pwd;
      return tmp959;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_host = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Host = new global::Nebula.Common.HostAddr();
                await Host.ReadAsync(iprot, cancellationToken);
                isset_host = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                User = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Pwd = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_host)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp960 = new TStruct("FTClient");
        await oprot.WriteStructBeginAsync(tmp960, cancellationToken);
        var tmp961 = new TField();
        if((Host != null))
        {
          tmp961.Name = "host";
          tmp961.Type = TType.Struct;
          tmp961.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp961, cancellationToken);
          await Host.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((User != null) && __isset.user)
        {
          tmp961.Name = "user";
          tmp961.Type = TType.String;
          tmp961.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp961, cancellationToken);
          await oprot.WriteBinaryAsync(User, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Pwd != null) && __isset.pwd)
        {
          tmp961.Name = "pwd";
          tmp961.Type = TType.String;
          tmp961.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp961, cancellationToken);
          await oprot.WriteBinaryAsync(Pwd, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is FTClient other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Host, other.Host)
        && ((__isset.user == other.__isset.user) && ((!__isset.user) || (TCollections.Equals(User, other.User))))
        && ((__isset.pwd == other.__isset.pwd) && ((!__isset.pwd) || (TCollections.Equals(Pwd, other.Pwd))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Host != null))
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        if((User != null) && __isset.user)
        {
          hashcode = (hashcode * 397) + User.GetHashCode();
        }
        if((Pwd != null) && __isset.pwd)
        {
          hashcode = (hashcode * 397) + Pwd.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp962 = new StringBuilder("FTClient(");
      if((Host != null))
      {
        tmp962.Append(", Host: ");
        Host.ToString(tmp962);
      }
      if((User != null) && __isset.user)
      {
        tmp962.Append(", User: ");
        User.ToString(tmp962);
      }
      if((Pwd != null) && __isset.pwd)
      {
        tmp962.Append(", Pwd: ");
        Pwd.ToString(tmp962);
      }
      tmp962.Append(')');
      return tmp962.ToString();
    }
  }

}
