/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class TaskDesc : TBase
  {
    private int _task_id;
    private global::Nebula.Common.HostAddr _host;
    private global::Nebula.Meta.JobStatus _status;
    private long _start_time;
    private long _stop_time;
    private int _job_id;

    public int Task_id
    {
      get
      {
        return _task_id;
      }
      set
      {
        __isset.task_id = true;
        this._task_id = value;
      }
    }

    public global::Nebula.Common.HostAddr Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.JobStatus"/>
    /// </summary>
    public global::Nebula.Meta.JobStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public long Start_time
    {
      get
      {
        return _start_time;
      }
      set
      {
        __isset.start_time = true;
        this._start_time = value;
      }
    }

    public long Stop_time
    {
      get
      {
        return _stop_time;
      }
      set
      {
        __isset.stop_time = true;
        this._stop_time = value;
      }
    }

    public int Job_id
    {
      get
      {
        return _job_id;
      }
      set
      {
        __isset.job_id = true;
        this._job_id = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool task_id;
      public bool host;
      public bool status;
      public bool start_time;
      public bool stop_time;
      public bool job_id;
    }

    public TaskDesc()
    {
    }

    public TaskDesc DeepCopy()
    {
      var tmp124 = new TaskDesc();
      if(__isset.task_id)
      {
        tmp124.Task_id = this.Task_id;
      }
      tmp124.__isset.task_id = this.__isset.task_id;
      if((Host != null) && __isset.host)
      {
        tmp124.Host = (global::Nebula.Common.HostAddr)this.Host.DeepCopy();
      }
      tmp124.__isset.host = this.__isset.host;
      if(__isset.status)
      {
        tmp124.Status = this.Status;
      }
      tmp124.__isset.status = this.__isset.status;
      if(__isset.start_time)
      {
        tmp124.Start_time = this.Start_time;
      }
      tmp124.__isset.start_time = this.__isset.start_time;
      if(__isset.stop_time)
      {
        tmp124.Stop_time = this.Stop_time;
      }
      tmp124.__isset.stop_time = this.__isset.stop_time;
      if(__isset.job_id)
      {
        tmp124.Job_id = this.Job_id;
      }
      tmp124.__isset.job_id = this.__isset.job_id;
      return tmp124;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Task_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Host = new global::Nebula.Common.HostAddr();
                await Host.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Status = (global::Nebula.Meta.JobStatus)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Start_time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Stop_time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                Job_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp125 = new TStruct("TaskDesc");
        await oprot.WriteStructBeginAsync(tmp125, cancellationToken);
        var tmp126 = new TField();
        if(__isset.task_id)
        {
          tmp126.Name = "task_id";
          tmp126.Type = TType.I32;
          tmp126.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp126, cancellationToken);
          await oprot.WriteI32Async(Task_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Host != null) && __isset.host)
        {
          tmp126.Name = "host";
          tmp126.Type = TType.Struct;
          tmp126.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp126, cancellationToken);
          await Host.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.status)
        {
          tmp126.Name = "status";
          tmp126.Type = TType.I32;
          tmp126.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp126, cancellationToken);
          await oprot.WriteI32Async((int)Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.start_time)
        {
          tmp126.Name = "start_time";
          tmp126.Type = TType.I64;
          tmp126.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp126, cancellationToken);
          await oprot.WriteI64Async(Start_time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.stop_time)
        {
          tmp126.Name = "stop_time";
          tmp126.Type = TType.I64;
          tmp126.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp126, cancellationToken);
          await oprot.WriteI64Async(Stop_time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.job_id)
        {
          tmp126.Name = "job_id";
          tmp126.Type = TType.I32;
          tmp126.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp126, cancellationToken);
          await oprot.WriteI32Async(Job_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TaskDesc other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.task_id == other.__isset.task_id) && ((!__isset.task_id) || (System.Object.Equals(Task_id, other.Task_id))))
        && ((__isset.host == other.__isset.host) && ((!__isset.host) || (System.Object.Equals(Host, other.Host))))
        && ((__isset.status == other.__isset.status) && ((!__isset.status) || (System.Object.Equals(Status, other.Status))))
        && ((__isset.start_time == other.__isset.start_time) && ((!__isset.start_time) || (System.Object.Equals(Start_time, other.Start_time))))
        && ((__isset.stop_time == other.__isset.stop_time) && ((!__isset.stop_time) || (System.Object.Equals(Stop_time, other.Stop_time))))
        && ((__isset.job_id == other.__isset.job_id) && ((!__isset.job_id) || (System.Object.Equals(Job_id, other.Job_id))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.task_id)
        {
          hashcode = (hashcode * 397) + Task_id.GetHashCode();
        }
        if((Host != null) && __isset.host)
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        if(__isset.status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if(__isset.start_time)
        {
          hashcode = (hashcode * 397) + Start_time.GetHashCode();
        }
        if(__isset.stop_time)
        {
          hashcode = (hashcode * 397) + Stop_time.GetHashCode();
        }
        if(__isset.job_id)
        {
          hashcode = (hashcode * 397) + Job_id.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp127 = new StringBuilder("TaskDesc(");
      int tmp128 = 0;
      if(__isset.task_id)
      {
        if(0 < tmp128++) { tmp127.Append(", "); }
        tmp127.Append("Task_id: ");
        Task_id.ToString(tmp127);
      }
      if((Host != null) && __isset.host)
      {
        if(0 < tmp128++) { tmp127.Append(", "); }
        tmp127.Append("Host: ");
        Host.ToString(tmp127);
      }
      if(__isset.status)
      {
        if(0 < tmp128++) { tmp127.Append(", "); }
        tmp127.Append("Status: ");
        Status.ToString(tmp127);
      }
      if(__isset.start_time)
      {
        if(0 < tmp128++) { tmp127.Append(", "); }
        tmp127.Append("Start_time: ");
        Start_time.ToString(tmp127);
      }
      if(__isset.stop_time)
      {
        if(0 < tmp128++) { tmp127.Append(", "); }
        tmp127.Append("Stop_time: ");
        Stop_time.ToString(tmp127);
      }
      if(__isset.job_id)
      {
        if(0 < tmp128++) { tmp127.Append(", "); }
        tmp127.Append("Job_id: ");
        Job_id.ToString(tmp127);
      }
      tmp127.Append(')');
      return tmp127.ToString();
    }
  }

}
