/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class NMap : TBase
  {
    private Dictionary<byte[], global::Nebula.Common.@Value> _kvs;

    public Dictionary<byte[], global::Nebula.Common.@Value> Kvs
    {
      get
      {
        return _kvs;
      }
      set
      {
        __isset.kvs = true;
        this._kvs = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool kvs;
    }

    public NMap()
    {
    }

    public NMap DeepCopy()
    {
      var tmp34 = new NMap();
      if((Kvs != null) && __isset.kvs)
      {
        tmp34.Kvs = this.Kvs.DeepCopy();
      }
      tmp34.__isset.kvs = this.__isset.kvs;
      return tmp34;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map35 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Kvs = new Dictionary<byte[], global::Nebula.Common.@Value>(_map35.Count);
                  for(int _i36 = 0; _i36 < _map35.Count; ++_i36)
                  {
                    byte[] _key37;
                    global::Nebula.Common.@Value _val38;
                    _key37 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val38 = new global::Nebula.Common.@Value();
                    await _val38.ReadAsync(iprot, cancellationToken);
                    Kvs[_key37] = _val38;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp39 = new TStruct("NMap");
        await oprot.WriteStructBeginAsync(tmp39, cancellationToken);
        var tmp40 = new TField();
        if((Kvs != null) && __isset.kvs)
        {
          tmp40.Name = "kvs";
          tmp40.Type = TType.Map;
          tmp40.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Kvs.Count), cancellationToken);
            foreach (byte[] _iter41 in Kvs.Keys)
            {
              await oprot.WriteBinaryAsync(_iter41, cancellationToken);
              await Kvs[_iter41].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NMap other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.kvs == other.__isset.kvs) && ((!__isset.kvs) || (TCollections.Equals(Kvs, other.Kvs))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Kvs != null) && __isset.kvs)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Kvs);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp42 = new StringBuilder("NMap(");
      int tmp43 = 0;
      if((Kvs != null) && __isset.kvs)
      {
        if(0 < tmp43++) { tmp42.Append(", "); }
        tmp42.Append("Kvs: ");
        Kvs.ToString(tmp42);
      }
      tmp42.Append(')');
      return tmp42.ToString();
    }
  }

}
