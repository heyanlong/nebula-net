/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class DateTime : TBase
  {
    private short _year;
    private sbyte _month;
    private sbyte _day;
    private sbyte _hour;
    private sbyte _minute;
    private sbyte _sec;
    private int _microsec;

    public short Year
    {
      get
      {
        return _year;
      }
      set
      {
        __isset.year = true;
        this._year = value;
      }
    }

    public sbyte Month
    {
      get
      {
        return _month;
      }
      set
      {
        __isset.month = true;
        this._month = value;
      }
    }

    public sbyte Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }

    public sbyte Hour
    {
      get
      {
        return _hour;
      }
      set
      {
        __isset.hour = true;
        this._hour = value;
      }
    }

    public sbyte Minute
    {
      get
      {
        return _minute;
      }
      set
      {
        __isset.minute = true;
        this._minute = value;
      }
    }

    public sbyte Sec
    {
      get
      {
        return _sec;
      }
      set
      {
        __isset.sec = true;
        this._sec = value;
      }
    }

    public int Microsec
    {
      get
      {
        return _microsec;
      }
      set
      {
        __isset.microsec = true;
        this._microsec = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool year;
      public bool month;
      public bool day;
      public bool hour;
      public bool minute;
      public bool sec;
      public bool microsec;
    }

    public DateTime()
    {
    }

    public DateTime DeepCopy()
    {
      var tmp15 = new DateTime();
      if(__isset.year)
      {
        tmp15.Year = this.Year;
      }
      tmp15.__isset.year = this.__isset.year;
      if(__isset.month)
      {
        tmp15.Month = this.Month;
      }
      tmp15.__isset.month = this.__isset.month;
      if(__isset.day)
      {
        tmp15.Day = this.Day;
      }
      tmp15.__isset.day = this.__isset.day;
      if(__isset.hour)
      {
        tmp15.Hour = this.Hour;
      }
      tmp15.__isset.hour = this.__isset.hour;
      if(__isset.minute)
      {
        tmp15.Minute = this.Minute;
      }
      tmp15.__isset.minute = this.__isset.minute;
      if(__isset.sec)
      {
        tmp15.Sec = this.Sec;
      }
      tmp15.__isset.sec = this.__isset.sec;
      if(__isset.microsec)
      {
        tmp15.Microsec = this.Microsec;
      }
      tmp15.__isset.microsec = this.__isset.microsec;
      return tmp15;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16)
              {
                Year = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Byte)
              {
                Month = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Byte)
              {
                Day = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Byte)
              {
                Hour = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Byte)
              {
                Minute = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Byte)
              {
                Sec = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Microsec = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp16 = new TStruct("DateTime");
        await oprot.WriteStructBeginAsync(tmp16, cancellationToken);
        var tmp17 = new TField();
        if(__isset.year)
        {
          tmp17.Name = "year";
          tmp17.Type = TType.I16;
          tmp17.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteI16Async(Year, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.month)
        {
          tmp17.Name = "month";
          tmp17.Type = TType.Byte;
          tmp17.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteByteAsync(Month, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.day)
        {
          tmp17.Name = "day";
          tmp17.Type = TType.Byte;
          tmp17.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteByteAsync(Day, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.hour)
        {
          tmp17.Name = "hour";
          tmp17.Type = TType.Byte;
          tmp17.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteByteAsync(Hour, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.minute)
        {
          tmp17.Name = "minute";
          tmp17.Type = TType.Byte;
          tmp17.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteByteAsync(Minute, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.sec)
        {
          tmp17.Name = "sec";
          tmp17.Type = TType.Byte;
          tmp17.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteByteAsync(Sec, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.microsec)
        {
          tmp17.Name = "microsec";
          tmp17.Type = TType.I32;
          tmp17.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteI32Async(Microsec, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is DateTime other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.year == other.__isset.year) && ((!__isset.year) || (System.Object.Equals(Year, other.Year))))
        && ((__isset.month == other.__isset.month) && ((!__isset.month) || (System.Object.Equals(Month, other.Month))))
        && ((__isset.day == other.__isset.day) && ((!__isset.day) || (System.Object.Equals(Day, other.Day))))
        && ((__isset.hour == other.__isset.hour) && ((!__isset.hour) || (System.Object.Equals(Hour, other.Hour))))
        && ((__isset.minute == other.__isset.minute) && ((!__isset.minute) || (System.Object.Equals(Minute, other.Minute))))
        && ((__isset.sec == other.__isset.sec) && ((!__isset.sec) || (System.Object.Equals(Sec, other.Sec))))
        && ((__isset.microsec == other.__isset.microsec) && ((!__isset.microsec) || (System.Object.Equals(Microsec, other.Microsec))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.year)
        {
          hashcode = (hashcode * 397) + Year.GetHashCode();
        }
        if(__isset.month)
        {
          hashcode = (hashcode * 397) + Month.GetHashCode();
        }
        if(__isset.day)
        {
          hashcode = (hashcode * 397) + Day.GetHashCode();
        }
        if(__isset.hour)
        {
          hashcode = (hashcode * 397) + Hour.GetHashCode();
        }
        if(__isset.minute)
        {
          hashcode = (hashcode * 397) + Minute.GetHashCode();
        }
        if(__isset.sec)
        {
          hashcode = (hashcode * 397) + Sec.GetHashCode();
        }
        if(__isset.microsec)
        {
          hashcode = (hashcode * 397) + Microsec.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp18 = new StringBuilder("DateTime(");
      int tmp19 = 0;
      if(__isset.year)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Year: ");
        Year.ToString(tmp18);
      }
      if(__isset.month)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Month: ");
        Month.ToString(tmp18);
      }
      if(__isset.day)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Day: ");
        Day.ToString(tmp18);
      }
      if(__isset.hour)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Hour: ");
        Hour.ToString(tmp18);
      }
      if(__isset.minute)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Minute: ");
        Minute.ToString(tmp18);
      }
      if(__isset.sec)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Sec: ");
        Sec.ToString(tmp18);
      }
      if(__isset.microsec)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Microsec: ");
        Microsec.ToString(tmp18);
      }
      tmp18.Append(')');
      return tmp18.ToString();
    }
  }

}
