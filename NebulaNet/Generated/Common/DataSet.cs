/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class DataSet : TBase
  {
    private List<byte[]> _column_names;
    private List<global::Nebula.Common.Row> _rows;

    public List<byte[]> Column_names
    {
      get
      {
        return _column_names;
      }
      set
      {
        __isset.column_names = true;
        this._column_names = value;
      }
    }

    public List<global::Nebula.Common.Row> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool column_names;
      public bool rows;
    }

    public DataSet()
    {
    }

    public DataSet DeepCopy()
    {
      var tmp62 = new DataSet();
      if((Column_names != null) && __isset.column_names)
      {
        tmp62.Column_names = this.Column_names.DeepCopy();
      }
      tmp62.__isset.column_names = this.__isset.column_names;
      if((Rows != null) && __isset.rows)
      {
        tmp62.Rows = this.Rows.DeepCopy();
      }
      tmp62.__isset.rows = this.__isset.rows;
      return tmp62;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list63 = await iprot.ReadListBeginAsync(cancellationToken);
                  Column_names = new List<byte[]>(_list63.Count);
                  for(int _i64 = 0; _i64 < _list63.Count; ++_i64)
                  {
                    byte[] _elem65;
                    _elem65 = await iprot.ReadBinaryAsync(cancellationToken);
                    Column_names.Add(_elem65);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list66 = await iprot.ReadListBeginAsync(cancellationToken);
                  Rows = new List<global::Nebula.Common.Row>(_list66.Count);
                  for(int _i67 = 0; _i67 < _list66.Count; ++_i67)
                  {
                    global::Nebula.Common.Row _elem68;
                    _elem68 = new global::Nebula.Common.Row();
                    await _elem68.ReadAsync(iprot, cancellationToken);
                    Rows.Add(_elem68);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp69 = new TStruct("DataSet");
        await oprot.WriteStructBeginAsync(tmp69, cancellationToken);
        var tmp70 = new TField();
        if((Column_names != null) && __isset.column_names)
        {
          tmp70.Name = "column_names";
          tmp70.Type = TType.List;
          tmp70.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp70, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Column_names.Count), cancellationToken);
            foreach (byte[] _iter71 in Column_names)
            {
              await oprot.WriteBinaryAsync(_iter71, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Rows != null) && __isset.rows)
        {
          tmp70.Name = "rows";
          tmp70.Type = TType.List;
          tmp70.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp70, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Rows.Count), cancellationToken);
            foreach (global::Nebula.Common.Row _iter72 in Rows)
            {
              await _iter72.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is DataSet other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.column_names == other.__isset.column_names) && ((!__isset.column_names) || (TCollections.Equals(Column_names, other.Column_names))))
        && ((__isset.rows == other.__isset.rows) && ((!__isset.rows) || (TCollections.Equals(Rows, other.Rows))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Column_names != null) && __isset.column_names)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Column_names);
        }
        if((Rows != null) && __isset.rows)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Rows);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp73 = new StringBuilder("DataSet(");
      int tmp74 = 0;
      if((Column_names != null) && __isset.column_names)
      {
        if(0 < tmp74++) { tmp73.Append(", "); }
        tmp73.Append("Column_names: ");
        Column_names.ToString(tmp73);
      }
      if((Rows != null) && __isset.rows)
      {
        if(0 < tmp74++) { tmp73.Append(", "); }
        tmp73.Append("Rows: ");
        Rows.ToString(tmp73);
      }
      tmp73.Append(')');
      return tmp73.ToString();
    }
  }

}
