/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class Step : TBase
  {
    private global::Nebula.Common.Vertex _dst;
    private int _type;
    private byte[] _name;
    private long _ranking;
    private Dictionary<byte[], global::Nebula.Common.@Value> _props;

    public global::Nebula.Common.Vertex Dst
    {
      get
      {
        return _dst;
      }
      set
      {
        __isset.dst = true;
        this._dst = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public byte[] Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public long Ranking
    {
      get
      {
        return _ranking;
      }
      set
      {
        __isset.ranking = true;
        this._ranking = value;
      }
    }

    public Dictionary<byte[], global::Nebula.Common.@Value> Props
    {
      get
      {
        return _props;
      }
      set
      {
        __isset.props = true;
        this._props = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool dst;
      public bool type;
      public bool name;
      public bool ranking;
      public bool props;
    }

    public Step()
    {
    }

    public Step DeepCopy()
    {
      var tmp141 = new Step();
      if((Dst != null) && __isset.dst)
      {
        tmp141.Dst = (global::Nebula.Common.Vertex)this.Dst.DeepCopy();
      }
      tmp141.__isset.dst = this.__isset.dst;
      if(__isset.type)
      {
        tmp141.Type = this.Type;
      }
      tmp141.__isset.type = this.__isset.type;
      if((Name != null) && __isset.name)
      {
        tmp141.Name = this.Name.ToArray();
      }
      tmp141.__isset.name = this.__isset.name;
      if(__isset.ranking)
      {
        tmp141.Ranking = this.Ranking;
      }
      tmp141.__isset.ranking = this.__isset.ranking;
      if((Props != null) && __isset.props)
      {
        tmp141.Props = this.Props.DeepCopy();
      }
      tmp141.__isset.props = this.__isset.props;
      return tmp141;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Dst = new global::Nebula.Common.Vertex();
                await Dst.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Type = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Ranking = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map142 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Props = new Dictionary<byte[], global::Nebula.Common.@Value>(_map142.Count);
                  for(int _i143 = 0; _i143 < _map142.Count; ++_i143)
                  {
                    byte[] _key144;
                    global::Nebula.Common.@Value _val145;
                    _key144 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val145 = new global::Nebula.Common.@Value();
                    await _val145.ReadAsync(iprot, cancellationToken);
                    Props[_key144] = _val145;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp146 = new TStruct("Step");
        await oprot.WriteStructBeginAsync(tmp146, cancellationToken);
        var tmp147 = new TField();
        if((Dst != null) && __isset.dst)
        {
          tmp147.Name = "dst";
          tmp147.Type = TType.Struct;
          tmp147.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp147, cancellationToken);
          await Dst.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.type)
        {
          tmp147.Name = "type";
          tmp147.Type = TType.I32;
          tmp147.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp147, cancellationToken);
          await oprot.WriteI32Async(Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp147.Name = "name";
          tmp147.Type = TType.String;
          tmp147.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp147, cancellationToken);
          await oprot.WriteBinaryAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.ranking)
        {
          tmp147.Name = "ranking";
          tmp147.Type = TType.I64;
          tmp147.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp147, cancellationToken);
          await oprot.WriteI64Async(Ranking, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Props != null) && __isset.props)
        {
          tmp147.Name = "props";
          tmp147.Type = TType.Map;
          tmp147.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp147, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Props.Count), cancellationToken);
            foreach (byte[] _iter148 in Props.Keys)
            {
              await oprot.WriteBinaryAsync(_iter148, cancellationToken);
              await Props[_iter148].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Step other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.dst == other.__isset.dst) && ((!__isset.dst) || (System.Object.Equals(Dst, other.Dst))))
        && ((__isset.type == other.__isset.type) && ((!__isset.type) || (System.Object.Equals(Type, other.Type))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (TCollections.Equals(Name, other.Name))))
        && ((__isset.ranking == other.__isset.ranking) && ((!__isset.ranking) || (System.Object.Equals(Ranking, other.Ranking))))
        && ((__isset.props == other.__isset.props) && ((!__isset.props) || (TCollections.Equals(Props, other.Props))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Dst != null) && __isset.dst)
        {
          hashcode = (hashcode * 397) + Dst.GetHashCode();
        }
        if(__isset.type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if(__isset.ranking)
        {
          hashcode = (hashcode * 397) + Ranking.GetHashCode();
        }
        if((Props != null) && __isset.props)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Props);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp149 = new StringBuilder("Step(");
      int tmp150 = 0;
      if((Dst != null) && __isset.dst)
      {
        if(0 < tmp150++) { tmp149.Append(", "); }
        tmp149.Append("Dst: ");
        Dst.ToString(tmp149);
      }
      if(__isset.type)
      {
        if(0 < tmp150++) { tmp149.Append(", "); }
        tmp149.Append("Type: ");
        Type.ToString(tmp149);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp150++) { tmp149.Append(", "); }
        tmp149.Append("Name: ");
        Name.ToString(tmp149);
      }
      if(__isset.ranking)
      {
        if(0 < tmp150++) { tmp149.Append(", "); }
        tmp149.Append("Ranking: ");
        Ranking.ToString(tmp149);
      }
      if((Props != null) && __isset.props)
      {
        if(0 < tmp150++) { tmp149.Append(", "); }
        tmp149.Append("Props: ");
        Props.ToString(tmp149);
      }
      tmp149.Append(')');
      return tmp149.ToString();
    }
  }

}
