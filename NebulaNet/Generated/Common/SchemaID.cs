/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class SchemaID : TBase
  {
    private int _tag_id;
    private int _edge_type;

    public int Tag_id
    {
      get
      {
        return _tag_id;
      }
      set
      {
        __isset.tag_id = true;
        this._tag_id = value;
      }
    }

    public int Edge_type
    {
      get
      {
        return _edge_type;
      }
      set
      {
        __isset.edge_type = true;
        this._edge_type = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tag_id;
      public bool edge_type;
    }

    public SchemaID()
    {
    }

    public SchemaID DeepCopy()
    {
      var tmp0 = new SchemaID();
      if(__isset.tag_id)
      {
        tmp0.Tag_id = this.Tag_id;
      }
      tmp0.__isset.tag_id = this.__isset.tag_id;
      if(__isset.edge_type)
      {
        tmp0.Edge_type = this.Edge_type;
      }
      tmp0.__isset.edge_type = this.__isset.edge_type;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Tag_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Edge_type = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1 = new TStruct("SchemaID");
        await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
        var tmp2 = new TField();
        if(__isset.tag_id)
        {
          tmp2.Name = "tag_id";
          tmp2.Type = TType.I32;
          tmp2.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI32Async(Tag_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.edge_type)
        {
          tmp2.Name = "edge_type";
          tmp2.Type = TType.I32;
          tmp2.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI32Async(Edge_type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SchemaID other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.tag_id == other.__isset.tag_id) && ((!__isset.tag_id) || (System.Object.Equals(Tag_id, other.Tag_id))))
        && ((__isset.edge_type == other.__isset.edge_type) && ((!__isset.edge_type) || (System.Object.Equals(Edge_type, other.Edge_type))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.tag_id)
        {
          hashcode = (hashcode * 397) + Tag_id.GetHashCode();
        }
        if(__isset.edge_type)
        {
          hashcode = (hashcode * 397) + Edge_type.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp3 = new StringBuilder("SchemaID(");
      int tmp4 = 0;
      if(__isset.tag_id)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Tag_id: ");
        Tag_id.ToString(tmp3);
      }
      if(__isset.edge_type)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Edge_type: ");
        Edge_type.ToString(tmp3);
      }
      tmp3.Append(')');
      return tmp3.ToString();
    }
  }

}
