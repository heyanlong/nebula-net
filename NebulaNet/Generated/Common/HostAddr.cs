/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class HostAddr : TBase
  {
    private string _host;
    private int _port;

    public string Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    public int Port
    {
      get
      {
        return _port;
      }
      set
      {
        __isset.port = true;
        this._port = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool host;
      public bool port;
    }

    public HostAddr()
    {
    }

    public HostAddr DeepCopy()
    {
      var tmp160 = new HostAddr();
      if((Host != null) && __isset.host)
      {
        tmp160.Host = this.Host;
      }
      tmp160.__isset.host = this.__isset.host;
      if(__isset.port)
      {
        tmp160.Port = this.Port;
      }
      tmp160.__isset.port = this.__isset.port;
      return tmp160;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Host = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Port = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp161 = new TStruct("HostAddr");
        await oprot.WriteStructBeginAsync(tmp161, cancellationToken);
        var tmp162 = new TField();
        if((Host != null) && __isset.host)
        {
          tmp162.Name = "host";
          tmp162.Type = TType.String;
          tmp162.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp162, cancellationToken);
          await oprot.WriteStringAsync(Host, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.port)
        {
          tmp162.Name = "port";
          tmp162.Type = TType.I32;
          tmp162.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp162, cancellationToken);
          await oprot.WriteI32Async(Port, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is HostAddr other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.host == other.__isset.host) && ((!__isset.host) || (System.Object.Equals(Host, other.Host))))
        && ((__isset.port == other.__isset.port) && ((!__isset.port) || (System.Object.Equals(Port, other.Port))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Host != null) && __isset.host)
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        if(__isset.port)
        {
          hashcode = (hashcode * 397) + Port.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp163 = new StringBuilder("HostAddr(");
      int tmp164 = 0;
      if((Host != null) && __isset.host)
      {
        if(0 < tmp164++) { tmp163.Append(", "); }
        tmp163.Append("Host: ");
        Host.ToString(tmp163);
      }
      if(__isset.port)
      {
        if(0 < tmp164++) { tmp163.Append(", "); }
        tmp163.Append("Port: ");
        Port.ToString(tmp163);
      }
      tmp163.Append(')');
      return tmp163.ToString();
    }
  }

}
