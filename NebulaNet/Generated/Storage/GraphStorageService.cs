/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{
  public partial class GraphStorageService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Nebula.Storage.GetNeighborsResponse> getNeighbors(global::Nebula.Storage.GetNeighborsRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.GetPropResponse> getProps(global::Nebula.Storage.GetPropRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> addVertices(global::Nebula.Storage.AddVerticesRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> addEdges(global::Nebula.Storage.AddEdgesRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> deleteEdges(global::Nebula.Storage.DeleteEdgesRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> deleteVertices(global::Nebula.Storage.DeleteVerticesRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> deleteTags(global::Nebula.Storage.DeleteTagsRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.UpdateResponse> updateVertex(global::Nebula.Storage.UpdateVertexRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.UpdateResponse> updateEdge(global::Nebula.Storage.UpdateEdgeRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.ScanVertexResponse> scanVertex(global::Nebula.Storage.ScanVertexRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.ScanEdgeResponse> scanEdge(global::Nebula.Storage.ScanEdgeRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.GetUUIDResp> getUUID(global::Nebula.Storage.GetUUIDReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.LookupIndexResp> lookupIndex(global::Nebula.Storage.LookupIndexRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.GetNeighborsResponse> lookupAndTraverse(global::Nebula.Storage.LookupAndTraverseRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.UpdateResponse> chainUpdateEdge(global::Nebula.Storage.UpdateEdgeRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> chainAddEdges(global::Nebula.Storage.AddEdgesRequest req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetNeighborsResponse> getNeighbors(global::Nebula.Storage.GetNeighborsRequest req, CancellationToken cancellationToken = default)
      {
        await send_getNeighbors(req, cancellationToken);
        return await recv_getNeighbors(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNeighbors(global::Nebula.Storage.GetNeighborsRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNeighbors", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp618 = new InternalStructs.getNeighbors_args() {
          Req = req,
        };
        
        await tmp618.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetNeighborsResponse> recv_getNeighbors(CancellationToken cancellationToken = default)
      {
        
        var tmp619 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp619.Type == TMessageType.Exception)
        {
          var tmp620 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp620;
        }

        var tmp621 = new InternalStructs.getNeighbors_result();
        await tmp621.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp621.__isset.success)
        {
          return tmp621.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNeighbors failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetPropResponse> getProps(global::Nebula.Storage.GetPropRequest req, CancellationToken cancellationToken = default)
      {
        await send_getProps(req, cancellationToken);
        return await recv_getProps(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getProps(global::Nebula.Storage.GetPropRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getProps", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp622 = new InternalStructs.getProps_args() {
          Req = req,
        };
        
        await tmp622.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetPropResponse> recv_getProps(CancellationToken cancellationToken = default)
      {
        
        var tmp623 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp623.Type == TMessageType.Exception)
        {
          var tmp624 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp624;
        }

        var tmp625 = new InternalStructs.getProps_result();
        await tmp625.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp625.__isset.success)
        {
          return tmp625.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProps failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> addVertices(global::Nebula.Storage.AddVerticesRequest req, CancellationToken cancellationToken = default)
      {
        await send_addVertices(req, cancellationToken);
        return await recv_addVertices(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addVertices(global::Nebula.Storage.AddVerticesRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addVertices", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp626 = new InternalStructs.addVertices_args() {
          Req = req,
        };
        
        await tmp626.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> recv_addVertices(CancellationToken cancellationToken = default)
      {
        
        var tmp627 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp627.Type == TMessageType.Exception)
        {
          var tmp628 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp628;
        }

        var tmp629 = new InternalStructs.addVertices_result();
        await tmp629.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp629.__isset.success)
        {
          return tmp629.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addVertices failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> addEdges(global::Nebula.Storage.AddEdgesRequest req, CancellationToken cancellationToken = default)
      {
        await send_addEdges(req, cancellationToken);
        return await recv_addEdges(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addEdges(global::Nebula.Storage.AddEdgesRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addEdges", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp630 = new InternalStructs.addEdges_args() {
          Req = req,
        };
        
        await tmp630.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> recv_addEdges(CancellationToken cancellationToken = default)
      {
        
        var tmp631 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp631.Type == TMessageType.Exception)
        {
          var tmp632 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp632;
        }

        var tmp633 = new InternalStructs.addEdges_result();
        await tmp633.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp633.__isset.success)
        {
          return tmp633.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addEdges failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> deleteEdges(global::Nebula.Storage.DeleteEdgesRequest req, CancellationToken cancellationToken = default)
      {
        await send_deleteEdges(req, cancellationToken);
        return await recv_deleteEdges(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteEdges(global::Nebula.Storage.DeleteEdgesRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteEdges", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp634 = new InternalStructs.deleteEdges_args() {
          Req = req,
        };
        
        await tmp634.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> recv_deleteEdges(CancellationToken cancellationToken = default)
      {
        
        var tmp635 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp635.Type == TMessageType.Exception)
        {
          var tmp636 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp636;
        }

        var tmp637 = new InternalStructs.deleteEdges_result();
        await tmp637.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp637.__isset.success)
        {
          return tmp637.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteEdges failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> deleteVertices(global::Nebula.Storage.DeleteVerticesRequest req, CancellationToken cancellationToken = default)
      {
        await send_deleteVertices(req, cancellationToken);
        return await recv_deleteVertices(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteVertices(global::Nebula.Storage.DeleteVerticesRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteVertices", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp638 = new InternalStructs.deleteVertices_args() {
          Req = req,
        };
        
        await tmp638.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> recv_deleteVertices(CancellationToken cancellationToken = default)
      {
        
        var tmp639 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp639.Type == TMessageType.Exception)
        {
          var tmp640 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp640;
        }

        var tmp641 = new InternalStructs.deleteVertices_result();
        await tmp641.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp641.__isset.success)
        {
          return tmp641.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteVertices failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> deleteTags(global::Nebula.Storage.DeleteTagsRequest req, CancellationToken cancellationToken = default)
      {
        await send_deleteTags(req, cancellationToken);
        return await recv_deleteTags(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteTags(global::Nebula.Storage.DeleteTagsRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteTags", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp642 = new InternalStructs.deleteTags_args() {
          Req = req,
        };
        
        await tmp642.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> recv_deleteTags(CancellationToken cancellationToken = default)
      {
        
        var tmp643 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp643.Type == TMessageType.Exception)
        {
          var tmp644 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp644;
        }

        var tmp645 = new InternalStructs.deleteTags_result();
        await tmp645.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp645.__isset.success)
        {
          return tmp645.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteTags failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.UpdateResponse> updateVertex(global::Nebula.Storage.UpdateVertexRequest req, CancellationToken cancellationToken = default)
      {
        await send_updateVertex(req, cancellationToken);
        return await recv_updateVertex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateVertex(global::Nebula.Storage.UpdateVertexRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateVertex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp646 = new InternalStructs.updateVertex_args() {
          Req = req,
        };
        
        await tmp646.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.UpdateResponse> recv_updateVertex(CancellationToken cancellationToken = default)
      {
        
        var tmp647 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp647.Type == TMessageType.Exception)
        {
          var tmp648 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp648;
        }

        var tmp649 = new InternalStructs.updateVertex_result();
        await tmp649.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp649.__isset.success)
        {
          return tmp649.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateVertex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.UpdateResponse> updateEdge(global::Nebula.Storage.UpdateEdgeRequest req, CancellationToken cancellationToken = default)
      {
        await send_updateEdge(req, cancellationToken);
        return await recv_updateEdge(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateEdge(global::Nebula.Storage.UpdateEdgeRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateEdge", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp650 = new InternalStructs.updateEdge_args() {
          Req = req,
        };
        
        await tmp650.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.UpdateResponse> recv_updateEdge(CancellationToken cancellationToken = default)
      {
        
        var tmp651 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp651.Type == TMessageType.Exception)
        {
          var tmp652 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp652;
        }

        var tmp653 = new InternalStructs.updateEdge_result();
        await tmp653.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp653.__isset.success)
        {
          return tmp653.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateEdge failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ScanVertexResponse> scanVertex(global::Nebula.Storage.ScanVertexRequest req, CancellationToken cancellationToken = default)
      {
        await send_scanVertex(req, cancellationToken);
        return await recv_scanVertex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_scanVertex(global::Nebula.Storage.ScanVertexRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("scanVertex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp654 = new InternalStructs.scanVertex_args() {
          Req = req,
        };
        
        await tmp654.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ScanVertexResponse> recv_scanVertex(CancellationToken cancellationToken = default)
      {
        
        var tmp655 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp655.Type == TMessageType.Exception)
        {
          var tmp656 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp656;
        }

        var tmp657 = new InternalStructs.scanVertex_result();
        await tmp657.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp657.__isset.success)
        {
          return tmp657.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanVertex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ScanEdgeResponse> scanEdge(global::Nebula.Storage.ScanEdgeRequest req, CancellationToken cancellationToken = default)
      {
        await send_scanEdge(req, cancellationToken);
        return await recv_scanEdge(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_scanEdge(global::Nebula.Storage.ScanEdgeRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("scanEdge", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp658 = new InternalStructs.scanEdge_args() {
          Req = req,
        };
        
        await tmp658.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ScanEdgeResponse> recv_scanEdge(CancellationToken cancellationToken = default)
      {
        
        var tmp659 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp659.Type == TMessageType.Exception)
        {
          var tmp660 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp660;
        }

        var tmp661 = new InternalStructs.scanEdge_result();
        await tmp661.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp661.__isset.success)
        {
          return tmp661.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scanEdge failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetUUIDResp> getUUID(global::Nebula.Storage.GetUUIDReq req, CancellationToken cancellationToken = default)
      {
        await send_getUUID(req, cancellationToken);
        return await recv_getUUID(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getUUID(global::Nebula.Storage.GetUUIDReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getUUID", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp662 = new InternalStructs.getUUID_args() {
          Req = req,
        };
        
        await tmp662.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetUUIDResp> recv_getUUID(CancellationToken cancellationToken = default)
      {
        
        var tmp663 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp663.Type == TMessageType.Exception)
        {
          var tmp664 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp664;
        }

        var tmp665 = new InternalStructs.getUUID_result();
        await tmp665.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp665.__isset.success)
        {
          return tmp665.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUUID failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.LookupIndexResp> lookupIndex(global::Nebula.Storage.LookupIndexRequest req, CancellationToken cancellationToken = default)
      {
        await send_lookupIndex(req, cancellationToken);
        return await recv_lookupIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_lookupIndex(global::Nebula.Storage.LookupIndexRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("lookupIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp666 = new InternalStructs.lookupIndex_args() {
          Req = req,
        };
        
        await tmp666.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.LookupIndexResp> recv_lookupIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp667 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp667.Type == TMessageType.Exception)
        {
          var tmp668 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp668;
        }

        var tmp669 = new InternalStructs.lookupIndex_result();
        await tmp669.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp669.__isset.success)
        {
          return tmp669.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lookupIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetNeighborsResponse> lookupAndTraverse(global::Nebula.Storage.LookupAndTraverseRequest req, CancellationToken cancellationToken = default)
      {
        await send_lookupAndTraverse(req, cancellationToken);
        return await recv_lookupAndTraverse(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_lookupAndTraverse(global::Nebula.Storage.LookupAndTraverseRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("lookupAndTraverse", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp670 = new InternalStructs.lookupAndTraverse_args() {
          Req = req,
        };
        
        await tmp670.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetNeighborsResponse> recv_lookupAndTraverse(CancellationToken cancellationToken = default)
      {
        
        var tmp671 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp671.Type == TMessageType.Exception)
        {
          var tmp672 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp672;
        }

        var tmp673 = new InternalStructs.lookupAndTraverse_result();
        await tmp673.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp673.__isset.success)
        {
          return tmp673.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lookupAndTraverse failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.UpdateResponse> chainUpdateEdge(global::Nebula.Storage.UpdateEdgeRequest req, CancellationToken cancellationToken = default)
      {
        await send_chainUpdateEdge(req, cancellationToken);
        return await recv_chainUpdateEdge(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_chainUpdateEdge(global::Nebula.Storage.UpdateEdgeRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("chainUpdateEdge", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp674 = new InternalStructs.chainUpdateEdge_args() {
          Req = req,
        };
        
        await tmp674.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.UpdateResponse> recv_chainUpdateEdge(CancellationToken cancellationToken = default)
      {
        
        var tmp675 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp675.Type == TMessageType.Exception)
        {
          var tmp676 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp676;
        }

        var tmp677 = new InternalStructs.chainUpdateEdge_result();
        await tmp677.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp677.__isset.success)
        {
          return tmp677.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "chainUpdateEdge failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> chainAddEdges(global::Nebula.Storage.AddEdgesRequest req, CancellationToken cancellationToken = default)
      {
        await send_chainAddEdges(req, cancellationToken);
        return await recv_chainAddEdges(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_chainAddEdges(global::Nebula.Storage.AddEdgesRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("chainAddEdges", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp678 = new InternalStructs.chainAddEdges_args() {
          Req = req,
        };
        
        await tmp678.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ExecResponse> recv_chainAddEdges(CancellationToken cancellationToken = default)
      {
        
        var tmp679 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp679.Type == TMessageType.Exception)
        {
          var tmp680 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp680;
        }

        var tmp681 = new InternalStructs.chainAddEdges_result();
        await tmp681.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp681.__isset.success)
        {
          return tmp681.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "chainAddEdges failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["getNeighbors"] = getNeighbors_ProcessAsync;
        processMap_["getProps"] = getProps_ProcessAsync;
        processMap_["addVertices"] = addVertices_ProcessAsync;
        processMap_["addEdges"] = addEdges_ProcessAsync;
        processMap_["deleteEdges"] = deleteEdges_ProcessAsync;
        processMap_["deleteVertices"] = deleteVertices_ProcessAsync;
        processMap_["deleteTags"] = deleteTags_ProcessAsync;
        processMap_["updateVertex"] = updateVertex_ProcessAsync;
        processMap_["updateEdge"] = updateEdge_ProcessAsync;
        processMap_["scanVertex"] = scanVertex_ProcessAsync;
        processMap_["scanEdge"] = scanEdge_ProcessAsync;
        processMap_["getUUID"] = getUUID_ProcessAsync;
        processMap_["lookupIndex"] = lookupIndex_ProcessAsync;
        processMap_["lookupAndTraverse"] = lookupAndTraverse_ProcessAsync;
        processMap_["chainUpdateEdge"] = chainUpdateEdge_ProcessAsync;
        processMap_["chainAddEdges"] = chainAddEdges_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task getNeighbors_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp682 = new InternalStructs.getNeighbors_args();
        await tmp682.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp683 = new InternalStructs.getNeighbors_result();
        try
        {
          tmp683.Success = await _iAsync.getNeighbors(tmp682.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getNeighbors", TMessageType.Reply, seqid), cancellationToken); 
          await tmp683.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp684)
        {
          var tmp685 = $"Error occurred in {GetType().FullName}: {tmp684.Message}";
          if(_logger != null)
            _logger.LogError(tmp684, tmp685);
          else
            Console.Error.WriteLine(tmp685);
          var tmp686 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNeighbors", TMessageType.Exception, seqid), cancellationToken);
          await tmp686.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getProps_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp687 = new InternalStructs.getProps_args();
        await tmp687.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp688 = new InternalStructs.getProps_result();
        try
        {
          tmp688.Success = await _iAsync.getProps(tmp687.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getProps", TMessageType.Reply, seqid), cancellationToken); 
          await tmp688.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp689)
        {
          var tmp690 = $"Error occurred in {GetType().FullName}: {tmp689.Message}";
          if(_logger != null)
            _logger.LogError(tmp689, tmp690);
          else
            Console.Error.WriteLine(tmp690);
          var tmp691 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getProps", TMessageType.Exception, seqid), cancellationToken);
          await tmp691.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addVertices_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp692 = new InternalStructs.addVertices_args();
        await tmp692.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp693 = new InternalStructs.addVertices_result();
        try
        {
          tmp693.Success = await _iAsync.addVertices(tmp692.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addVertices", TMessageType.Reply, seqid), cancellationToken); 
          await tmp693.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp694)
        {
          var tmp695 = $"Error occurred in {GetType().FullName}: {tmp694.Message}";
          if(_logger != null)
            _logger.LogError(tmp694, tmp695);
          else
            Console.Error.WriteLine(tmp695);
          var tmp696 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addVertices", TMessageType.Exception, seqid), cancellationToken);
          await tmp696.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addEdges_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp697 = new InternalStructs.addEdges_args();
        await tmp697.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp698 = new InternalStructs.addEdges_result();
        try
        {
          tmp698.Success = await _iAsync.addEdges(tmp697.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addEdges", TMessageType.Reply, seqid), cancellationToken); 
          await tmp698.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp699)
        {
          var tmp700 = $"Error occurred in {GetType().FullName}: {tmp699.Message}";
          if(_logger != null)
            _logger.LogError(tmp699, tmp700);
          else
            Console.Error.WriteLine(tmp700);
          var tmp701 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addEdges", TMessageType.Exception, seqid), cancellationToken);
          await tmp701.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteEdges_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp702 = new InternalStructs.deleteEdges_args();
        await tmp702.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp703 = new InternalStructs.deleteEdges_result();
        try
        {
          tmp703.Success = await _iAsync.deleteEdges(tmp702.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("deleteEdges", TMessageType.Reply, seqid), cancellationToken); 
          await tmp703.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp704)
        {
          var tmp705 = $"Error occurred in {GetType().FullName}: {tmp704.Message}";
          if(_logger != null)
            _logger.LogError(tmp704, tmp705);
          else
            Console.Error.WriteLine(tmp705);
          var tmp706 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteEdges", TMessageType.Exception, seqid), cancellationToken);
          await tmp706.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteVertices_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp707 = new InternalStructs.deleteVertices_args();
        await tmp707.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp708 = new InternalStructs.deleteVertices_result();
        try
        {
          tmp708.Success = await _iAsync.deleteVertices(tmp707.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("deleteVertices", TMessageType.Reply, seqid), cancellationToken); 
          await tmp708.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp709)
        {
          var tmp710 = $"Error occurred in {GetType().FullName}: {tmp709.Message}";
          if(_logger != null)
            _logger.LogError(tmp709, tmp710);
          else
            Console.Error.WriteLine(tmp710);
          var tmp711 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteVertices", TMessageType.Exception, seqid), cancellationToken);
          await tmp711.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteTags_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp712 = new InternalStructs.deleteTags_args();
        await tmp712.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp713 = new InternalStructs.deleteTags_result();
        try
        {
          tmp713.Success = await _iAsync.deleteTags(tmp712.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("deleteTags", TMessageType.Reply, seqid), cancellationToken); 
          await tmp713.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp714)
        {
          var tmp715 = $"Error occurred in {GetType().FullName}: {tmp714.Message}";
          if(_logger != null)
            _logger.LogError(tmp714, tmp715);
          else
            Console.Error.WriteLine(tmp715);
          var tmp716 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteTags", TMessageType.Exception, seqid), cancellationToken);
          await tmp716.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateVertex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp717 = new InternalStructs.updateVertex_args();
        await tmp717.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp718 = new InternalStructs.updateVertex_result();
        try
        {
          tmp718.Success = await _iAsync.updateVertex(tmp717.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("updateVertex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp718.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp719)
        {
          var tmp720 = $"Error occurred in {GetType().FullName}: {tmp719.Message}";
          if(_logger != null)
            _logger.LogError(tmp719, tmp720);
          else
            Console.Error.WriteLine(tmp720);
          var tmp721 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateVertex", TMessageType.Exception, seqid), cancellationToken);
          await tmp721.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateEdge_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp722 = new InternalStructs.updateEdge_args();
        await tmp722.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp723 = new InternalStructs.updateEdge_result();
        try
        {
          tmp723.Success = await _iAsync.updateEdge(tmp722.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("updateEdge", TMessageType.Reply, seqid), cancellationToken); 
          await tmp723.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp724)
        {
          var tmp725 = $"Error occurred in {GetType().FullName}: {tmp724.Message}";
          if(_logger != null)
            _logger.LogError(tmp724, tmp725);
          else
            Console.Error.WriteLine(tmp725);
          var tmp726 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateEdge", TMessageType.Exception, seqid), cancellationToken);
          await tmp726.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task scanVertex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp727 = new InternalStructs.scanVertex_args();
        await tmp727.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp728 = new InternalStructs.scanVertex_result();
        try
        {
          tmp728.Success = await _iAsync.scanVertex(tmp727.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("scanVertex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp728.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp729)
        {
          var tmp730 = $"Error occurred in {GetType().FullName}: {tmp729.Message}";
          if(_logger != null)
            _logger.LogError(tmp729, tmp730);
          else
            Console.Error.WriteLine(tmp730);
          var tmp731 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("scanVertex", TMessageType.Exception, seqid), cancellationToken);
          await tmp731.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task scanEdge_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp732 = new InternalStructs.scanEdge_args();
        await tmp732.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp733 = new InternalStructs.scanEdge_result();
        try
        {
          tmp733.Success = await _iAsync.scanEdge(tmp732.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("scanEdge", TMessageType.Reply, seqid), cancellationToken); 
          await tmp733.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp734)
        {
          var tmp735 = $"Error occurred in {GetType().FullName}: {tmp734.Message}";
          if(_logger != null)
            _logger.LogError(tmp734, tmp735);
          else
            Console.Error.WriteLine(tmp735);
          var tmp736 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("scanEdge", TMessageType.Exception, seqid), cancellationToken);
          await tmp736.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getUUID_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp737 = new InternalStructs.getUUID_args();
        await tmp737.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp738 = new InternalStructs.getUUID_result();
        try
        {
          tmp738.Success = await _iAsync.getUUID(tmp737.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getUUID", TMessageType.Reply, seqid), cancellationToken); 
          await tmp738.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp739)
        {
          var tmp740 = $"Error occurred in {GetType().FullName}: {tmp739.Message}";
          if(_logger != null)
            _logger.LogError(tmp739, tmp740);
          else
            Console.Error.WriteLine(tmp740);
          var tmp741 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getUUID", TMessageType.Exception, seqid), cancellationToken);
          await tmp741.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task lookupIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp742 = new InternalStructs.lookupIndex_args();
        await tmp742.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp743 = new InternalStructs.lookupIndex_result();
        try
        {
          tmp743.Success = await _iAsync.lookupIndex(tmp742.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("lookupIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp743.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp744)
        {
          var tmp745 = $"Error occurred in {GetType().FullName}: {tmp744.Message}";
          if(_logger != null)
            _logger.LogError(tmp744, tmp745);
          else
            Console.Error.WriteLine(tmp745);
          var tmp746 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("lookupIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp746.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task lookupAndTraverse_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp747 = new InternalStructs.lookupAndTraverse_args();
        await tmp747.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp748 = new InternalStructs.lookupAndTraverse_result();
        try
        {
          tmp748.Success = await _iAsync.lookupAndTraverse(tmp747.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("lookupAndTraverse", TMessageType.Reply, seqid), cancellationToken); 
          await tmp748.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp749)
        {
          var tmp750 = $"Error occurred in {GetType().FullName}: {tmp749.Message}";
          if(_logger != null)
            _logger.LogError(tmp749, tmp750);
          else
            Console.Error.WriteLine(tmp750);
          var tmp751 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("lookupAndTraverse", TMessageType.Exception, seqid), cancellationToken);
          await tmp751.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task chainUpdateEdge_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp752 = new InternalStructs.chainUpdateEdge_args();
        await tmp752.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp753 = new InternalStructs.chainUpdateEdge_result();
        try
        {
          tmp753.Success = await _iAsync.chainUpdateEdge(tmp752.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("chainUpdateEdge", TMessageType.Reply, seqid), cancellationToken); 
          await tmp753.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp754)
        {
          var tmp755 = $"Error occurred in {GetType().FullName}: {tmp754.Message}";
          if(_logger != null)
            _logger.LogError(tmp754, tmp755);
          else
            Console.Error.WriteLine(tmp755);
          var tmp756 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("chainUpdateEdge", TMessageType.Exception, seqid), cancellationToken);
          await tmp756.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task chainAddEdges_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp757 = new InternalStructs.chainAddEdges_args();
        await tmp757.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp758 = new InternalStructs.chainAddEdges_result();
        try
        {
          tmp758.Success = await _iAsync.chainAddEdges(tmp757.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("chainAddEdges", TMessageType.Reply, seqid), cancellationToken); 
          await tmp758.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp759)
        {
          var tmp760 = $"Error occurred in {GetType().FullName}: {tmp759.Message}";
          if(_logger != null)
            _logger.LogError(tmp759, tmp760);
          else
            Console.Error.WriteLine(tmp760);
          var tmp761 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("chainAddEdges", TMessageType.Exception, seqid), cancellationToken);
          await tmp761.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class getNeighbors_args : TBase
      {
        private global::Nebula.Storage.GetNeighborsRequest _req;

        public global::Nebula.Storage.GetNeighborsRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getNeighbors_args()
        {
        }

        public getNeighbors_args DeepCopy()
        {
          var tmp762 = new getNeighbors_args();
          if((Req != null) && __isset.req)
          {
            tmp762.Req = (global::Nebula.Storage.GetNeighborsRequest)this.Req.DeepCopy();
          }
          tmp762.__isset.req = this.__isset.req;
          return tmp762;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.GetNeighborsRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp763 = new TStruct("getNeighbors_args");
            await oprot.WriteStructBeginAsync(tmp763, cancellationToken);
            var tmp764 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp764.Name = "req";
              tmp764.Type = TType.Struct;
              tmp764.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp764, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNeighbors_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp765 = new StringBuilder("getNeighbors_args(");
          int tmp766 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp766++) { tmp765.Append(", "); }
            tmp765.Append("Req: ");
            Req.ToString(tmp765);
          }
          tmp765.Append(')');
          return tmp765.ToString();
        }
      }


      public partial class getNeighbors_result : TBase
      {
        private global::Nebula.Storage.GetNeighborsResponse _success;

        public global::Nebula.Storage.GetNeighborsResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getNeighbors_result()
        {
        }

        public getNeighbors_result DeepCopy()
        {
          var tmp767 = new getNeighbors_result();
          if((Success != null) && __isset.success)
          {
            tmp767.Success = (global::Nebula.Storage.GetNeighborsResponse)this.Success.DeepCopy();
          }
          tmp767.__isset.success = this.__isset.success;
          return tmp767;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.GetNeighborsResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp768 = new TStruct("getNeighbors_result");
            await oprot.WriteStructBeginAsync(tmp768, cancellationToken);
            var tmp769 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp769.Name = "Success";
                tmp769.Type = TType.Struct;
                tmp769.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp769, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNeighbors_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp770 = new StringBuilder("getNeighbors_result(");
          int tmp771 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp771++) { tmp770.Append(", "); }
            tmp770.Append("Success: ");
            Success.ToString(tmp770);
          }
          tmp770.Append(')');
          return tmp770.ToString();
        }
      }


      public partial class getProps_args : TBase
      {
        private global::Nebula.Storage.GetPropRequest _req;

        public global::Nebula.Storage.GetPropRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getProps_args()
        {
        }

        public getProps_args DeepCopy()
        {
          var tmp772 = new getProps_args();
          if((Req != null) && __isset.req)
          {
            tmp772.Req = (global::Nebula.Storage.GetPropRequest)this.Req.DeepCopy();
          }
          tmp772.__isset.req = this.__isset.req;
          return tmp772;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.GetPropRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp773 = new TStruct("getProps_args");
            await oprot.WriteStructBeginAsync(tmp773, cancellationToken);
            var tmp774 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp774.Name = "req";
              tmp774.Type = TType.Struct;
              tmp774.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp774, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getProps_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp775 = new StringBuilder("getProps_args(");
          int tmp776 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp776++) { tmp775.Append(", "); }
            tmp775.Append("Req: ");
            Req.ToString(tmp775);
          }
          tmp775.Append(')');
          return tmp775.ToString();
        }
      }


      public partial class getProps_result : TBase
      {
        private global::Nebula.Storage.GetPropResponse _success;

        public global::Nebula.Storage.GetPropResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getProps_result()
        {
        }

        public getProps_result DeepCopy()
        {
          var tmp777 = new getProps_result();
          if((Success != null) && __isset.success)
          {
            tmp777.Success = (global::Nebula.Storage.GetPropResponse)this.Success.DeepCopy();
          }
          tmp777.__isset.success = this.__isset.success;
          return tmp777;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.GetPropResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp778 = new TStruct("getProps_result");
            await oprot.WriteStructBeginAsync(tmp778, cancellationToken);
            var tmp779 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp779.Name = "Success";
                tmp779.Type = TType.Struct;
                tmp779.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp779, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getProps_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp780 = new StringBuilder("getProps_result(");
          int tmp781 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp781++) { tmp780.Append(", "); }
            tmp780.Append("Success: ");
            Success.ToString(tmp780);
          }
          tmp780.Append(')');
          return tmp780.ToString();
        }
      }


      public partial class addVertices_args : TBase
      {
        private global::Nebula.Storage.AddVerticesRequest _req;

        public global::Nebula.Storage.AddVerticesRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addVertices_args()
        {
        }

        public addVertices_args DeepCopy()
        {
          var tmp782 = new addVertices_args();
          if((Req != null) && __isset.req)
          {
            tmp782.Req = (global::Nebula.Storage.AddVerticesRequest)this.Req.DeepCopy();
          }
          tmp782.__isset.req = this.__isset.req;
          return tmp782;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.AddVerticesRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp783 = new TStruct("addVertices_args");
            await oprot.WriteStructBeginAsync(tmp783, cancellationToken);
            var tmp784 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp784.Name = "req";
              tmp784.Type = TType.Struct;
              tmp784.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp784, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addVertices_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp785 = new StringBuilder("addVertices_args(");
          int tmp786 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp786++) { tmp785.Append(", "); }
            tmp785.Append("Req: ");
            Req.ToString(tmp785);
          }
          tmp785.Append(')');
          return tmp785.ToString();
        }
      }


      public partial class addVertices_result : TBase
      {
        private global::Nebula.Storage.ExecResponse _success;

        public global::Nebula.Storage.ExecResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addVertices_result()
        {
        }

        public addVertices_result DeepCopy()
        {
          var tmp787 = new addVertices_result();
          if((Success != null) && __isset.success)
          {
            tmp787.Success = (global::Nebula.Storage.ExecResponse)this.Success.DeepCopy();
          }
          tmp787.__isset.success = this.__isset.success;
          return tmp787;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.ExecResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp788 = new TStruct("addVertices_result");
            await oprot.WriteStructBeginAsync(tmp788, cancellationToken);
            var tmp789 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp789.Name = "Success";
                tmp789.Type = TType.Struct;
                tmp789.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp789, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addVertices_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp790 = new StringBuilder("addVertices_result(");
          int tmp791 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp791++) { tmp790.Append(", "); }
            tmp790.Append("Success: ");
            Success.ToString(tmp790);
          }
          tmp790.Append(')');
          return tmp790.ToString();
        }
      }


      public partial class addEdges_args : TBase
      {
        private global::Nebula.Storage.AddEdgesRequest _req;

        public global::Nebula.Storage.AddEdgesRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addEdges_args()
        {
        }

        public addEdges_args DeepCopy()
        {
          var tmp792 = new addEdges_args();
          if((Req != null) && __isset.req)
          {
            tmp792.Req = (global::Nebula.Storage.AddEdgesRequest)this.Req.DeepCopy();
          }
          tmp792.__isset.req = this.__isset.req;
          return tmp792;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.AddEdgesRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp793 = new TStruct("addEdges_args");
            await oprot.WriteStructBeginAsync(tmp793, cancellationToken);
            var tmp794 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp794.Name = "req";
              tmp794.Type = TType.Struct;
              tmp794.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp794, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addEdges_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp795 = new StringBuilder("addEdges_args(");
          int tmp796 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp796++) { tmp795.Append(", "); }
            tmp795.Append("Req: ");
            Req.ToString(tmp795);
          }
          tmp795.Append(')');
          return tmp795.ToString();
        }
      }


      public partial class addEdges_result : TBase
      {
        private global::Nebula.Storage.ExecResponse _success;

        public global::Nebula.Storage.ExecResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addEdges_result()
        {
        }

        public addEdges_result DeepCopy()
        {
          var tmp797 = new addEdges_result();
          if((Success != null) && __isset.success)
          {
            tmp797.Success = (global::Nebula.Storage.ExecResponse)this.Success.DeepCopy();
          }
          tmp797.__isset.success = this.__isset.success;
          return tmp797;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.ExecResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp798 = new TStruct("addEdges_result");
            await oprot.WriteStructBeginAsync(tmp798, cancellationToken);
            var tmp799 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp799.Name = "Success";
                tmp799.Type = TType.Struct;
                tmp799.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp799, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addEdges_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp800 = new StringBuilder("addEdges_result(");
          int tmp801 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp801++) { tmp800.Append(", "); }
            tmp800.Append("Success: ");
            Success.ToString(tmp800);
          }
          tmp800.Append(')');
          return tmp800.ToString();
        }
      }


      public partial class deleteEdges_args : TBase
      {
        private global::Nebula.Storage.DeleteEdgesRequest _req;

        public global::Nebula.Storage.DeleteEdgesRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public deleteEdges_args()
        {
        }

        public deleteEdges_args DeepCopy()
        {
          var tmp802 = new deleteEdges_args();
          if((Req != null) && __isset.req)
          {
            tmp802.Req = (global::Nebula.Storage.DeleteEdgesRequest)this.Req.DeepCopy();
          }
          tmp802.__isset.req = this.__isset.req;
          return tmp802;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.DeleteEdgesRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp803 = new TStruct("deleteEdges_args");
            await oprot.WriteStructBeginAsync(tmp803, cancellationToken);
            var tmp804 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp804.Name = "req";
              tmp804.Type = TType.Struct;
              tmp804.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp804, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteEdges_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp805 = new StringBuilder("deleteEdges_args(");
          int tmp806 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp806++) { tmp805.Append(", "); }
            tmp805.Append("Req: ");
            Req.ToString(tmp805);
          }
          tmp805.Append(')');
          return tmp805.ToString();
        }
      }


      public partial class deleteEdges_result : TBase
      {
        private global::Nebula.Storage.ExecResponse _success;

        public global::Nebula.Storage.ExecResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public deleteEdges_result()
        {
        }

        public deleteEdges_result DeepCopy()
        {
          var tmp807 = new deleteEdges_result();
          if((Success != null) && __isset.success)
          {
            tmp807.Success = (global::Nebula.Storage.ExecResponse)this.Success.DeepCopy();
          }
          tmp807.__isset.success = this.__isset.success;
          return tmp807;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.ExecResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp808 = new TStruct("deleteEdges_result");
            await oprot.WriteStructBeginAsync(tmp808, cancellationToken);
            var tmp809 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp809.Name = "Success";
                tmp809.Type = TType.Struct;
                tmp809.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp809, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteEdges_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp810 = new StringBuilder("deleteEdges_result(");
          int tmp811 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp811++) { tmp810.Append(", "); }
            tmp810.Append("Success: ");
            Success.ToString(tmp810);
          }
          tmp810.Append(')');
          return tmp810.ToString();
        }
      }


      public partial class deleteVertices_args : TBase
      {
        private global::Nebula.Storage.DeleteVerticesRequest _req;

        public global::Nebula.Storage.DeleteVerticesRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public deleteVertices_args()
        {
        }

        public deleteVertices_args DeepCopy()
        {
          var tmp812 = new deleteVertices_args();
          if((Req != null) && __isset.req)
          {
            tmp812.Req = (global::Nebula.Storage.DeleteVerticesRequest)this.Req.DeepCopy();
          }
          tmp812.__isset.req = this.__isset.req;
          return tmp812;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.DeleteVerticesRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp813 = new TStruct("deleteVertices_args");
            await oprot.WriteStructBeginAsync(tmp813, cancellationToken);
            var tmp814 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp814.Name = "req";
              tmp814.Type = TType.Struct;
              tmp814.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp814, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteVertices_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp815 = new StringBuilder("deleteVertices_args(");
          int tmp816 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp816++) { tmp815.Append(", "); }
            tmp815.Append("Req: ");
            Req.ToString(tmp815);
          }
          tmp815.Append(')');
          return tmp815.ToString();
        }
      }


      public partial class deleteVertices_result : TBase
      {
        private global::Nebula.Storage.ExecResponse _success;

        public global::Nebula.Storage.ExecResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public deleteVertices_result()
        {
        }

        public deleteVertices_result DeepCopy()
        {
          var tmp817 = new deleteVertices_result();
          if((Success != null) && __isset.success)
          {
            tmp817.Success = (global::Nebula.Storage.ExecResponse)this.Success.DeepCopy();
          }
          tmp817.__isset.success = this.__isset.success;
          return tmp817;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.ExecResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp818 = new TStruct("deleteVertices_result");
            await oprot.WriteStructBeginAsync(tmp818, cancellationToken);
            var tmp819 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp819.Name = "Success";
                tmp819.Type = TType.Struct;
                tmp819.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp819, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteVertices_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp820 = new StringBuilder("deleteVertices_result(");
          int tmp821 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp821++) { tmp820.Append(", "); }
            tmp820.Append("Success: ");
            Success.ToString(tmp820);
          }
          tmp820.Append(')');
          return tmp820.ToString();
        }
      }


      public partial class deleteTags_args : TBase
      {
        private global::Nebula.Storage.DeleteTagsRequest _req;

        public global::Nebula.Storage.DeleteTagsRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public deleteTags_args()
        {
        }

        public deleteTags_args DeepCopy()
        {
          var tmp822 = new deleteTags_args();
          if((Req != null) && __isset.req)
          {
            tmp822.Req = (global::Nebula.Storage.DeleteTagsRequest)this.Req.DeepCopy();
          }
          tmp822.__isset.req = this.__isset.req;
          return tmp822;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.DeleteTagsRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp823 = new TStruct("deleteTags_args");
            await oprot.WriteStructBeginAsync(tmp823, cancellationToken);
            var tmp824 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp824.Name = "req";
              tmp824.Type = TType.Struct;
              tmp824.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp824, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteTags_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp825 = new StringBuilder("deleteTags_args(");
          int tmp826 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp826++) { tmp825.Append(", "); }
            tmp825.Append("Req: ");
            Req.ToString(tmp825);
          }
          tmp825.Append(')');
          return tmp825.ToString();
        }
      }


      public partial class deleteTags_result : TBase
      {
        private global::Nebula.Storage.ExecResponse _success;

        public global::Nebula.Storage.ExecResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public deleteTags_result()
        {
        }

        public deleteTags_result DeepCopy()
        {
          var tmp827 = new deleteTags_result();
          if((Success != null) && __isset.success)
          {
            tmp827.Success = (global::Nebula.Storage.ExecResponse)this.Success.DeepCopy();
          }
          tmp827.__isset.success = this.__isset.success;
          return tmp827;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.ExecResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp828 = new TStruct("deleteTags_result");
            await oprot.WriteStructBeginAsync(tmp828, cancellationToken);
            var tmp829 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp829.Name = "Success";
                tmp829.Type = TType.Struct;
                tmp829.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp829, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteTags_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp830 = new StringBuilder("deleteTags_result(");
          int tmp831 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp831++) { tmp830.Append(", "); }
            tmp830.Append("Success: ");
            Success.ToString(tmp830);
          }
          tmp830.Append(')');
          return tmp830.ToString();
        }
      }


      public partial class updateVertex_args : TBase
      {
        private global::Nebula.Storage.UpdateVertexRequest _req;

        public global::Nebula.Storage.UpdateVertexRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public updateVertex_args()
        {
        }

        public updateVertex_args DeepCopy()
        {
          var tmp832 = new updateVertex_args();
          if((Req != null) && __isset.req)
          {
            tmp832.Req = (global::Nebula.Storage.UpdateVertexRequest)this.Req.DeepCopy();
          }
          tmp832.__isset.req = this.__isset.req;
          return tmp832;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.UpdateVertexRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp833 = new TStruct("updateVertex_args");
            await oprot.WriteStructBeginAsync(tmp833, cancellationToken);
            var tmp834 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp834.Name = "req";
              tmp834.Type = TType.Struct;
              tmp834.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp834, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateVertex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp835 = new StringBuilder("updateVertex_args(");
          int tmp836 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp836++) { tmp835.Append(", "); }
            tmp835.Append("Req: ");
            Req.ToString(tmp835);
          }
          tmp835.Append(')');
          return tmp835.ToString();
        }
      }


      public partial class updateVertex_result : TBase
      {
        private global::Nebula.Storage.UpdateResponse _success;

        public global::Nebula.Storage.UpdateResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public updateVertex_result()
        {
        }

        public updateVertex_result DeepCopy()
        {
          var tmp837 = new updateVertex_result();
          if((Success != null) && __isset.success)
          {
            tmp837.Success = (global::Nebula.Storage.UpdateResponse)this.Success.DeepCopy();
          }
          tmp837.__isset.success = this.__isset.success;
          return tmp837;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.UpdateResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp838 = new TStruct("updateVertex_result");
            await oprot.WriteStructBeginAsync(tmp838, cancellationToken);
            var tmp839 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp839.Name = "Success";
                tmp839.Type = TType.Struct;
                tmp839.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp839, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateVertex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp840 = new StringBuilder("updateVertex_result(");
          int tmp841 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp841++) { tmp840.Append(", "); }
            tmp840.Append("Success: ");
            Success.ToString(tmp840);
          }
          tmp840.Append(')');
          return tmp840.ToString();
        }
      }


      public partial class updateEdge_args : TBase
      {
        private global::Nebula.Storage.UpdateEdgeRequest _req;

        public global::Nebula.Storage.UpdateEdgeRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public updateEdge_args()
        {
        }

        public updateEdge_args DeepCopy()
        {
          var tmp842 = new updateEdge_args();
          if((Req != null) && __isset.req)
          {
            tmp842.Req = (global::Nebula.Storage.UpdateEdgeRequest)this.Req.DeepCopy();
          }
          tmp842.__isset.req = this.__isset.req;
          return tmp842;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.UpdateEdgeRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp843 = new TStruct("updateEdge_args");
            await oprot.WriteStructBeginAsync(tmp843, cancellationToken);
            var tmp844 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp844.Name = "req";
              tmp844.Type = TType.Struct;
              tmp844.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp844, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateEdge_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp845 = new StringBuilder("updateEdge_args(");
          int tmp846 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp846++) { tmp845.Append(", "); }
            tmp845.Append("Req: ");
            Req.ToString(tmp845);
          }
          tmp845.Append(')');
          return tmp845.ToString();
        }
      }


      public partial class updateEdge_result : TBase
      {
        private global::Nebula.Storage.UpdateResponse _success;

        public global::Nebula.Storage.UpdateResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public updateEdge_result()
        {
        }

        public updateEdge_result DeepCopy()
        {
          var tmp847 = new updateEdge_result();
          if((Success != null) && __isset.success)
          {
            tmp847.Success = (global::Nebula.Storage.UpdateResponse)this.Success.DeepCopy();
          }
          tmp847.__isset.success = this.__isset.success;
          return tmp847;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.UpdateResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp848 = new TStruct("updateEdge_result");
            await oprot.WriteStructBeginAsync(tmp848, cancellationToken);
            var tmp849 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp849.Name = "Success";
                tmp849.Type = TType.Struct;
                tmp849.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp849, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateEdge_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp850 = new StringBuilder("updateEdge_result(");
          int tmp851 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp851++) { tmp850.Append(", "); }
            tmp850.Append("Success: ");
            Success.ToString(tmp850);
          }
          tmp850.Append(')');
          return tmp850.ToString();
        }
      }


      public partial class scanVertex_args : TBase
      {
        private global::Nebula.Storage.ScanVertexRequest _req;

        public global::Nebula.Storage.ScanVertexRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public scanVertex_args()
        {
        }

        public scanVertex_args DeepCopy()
        {
          var tmp852 = new scanVertex_args();
          if((Req != null) && __isset.req)
          {
            tmp852.Req = (global::Nebula.Storage.ScanVertexRequest)this.Req.DeepCopy();
          }
          tmp852.__isset.req = this.__isset.req;
          return tmp852;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.ScanVertexRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp853 = new TStruct("scanVertex_args");
            await oprot.WriteStructBeginAsync(tmp853, cancellationToken);
            var tmp854 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp854.Name = "req";
              tmp854.Type = TType.Struct;
              tmp854.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp854, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is scanVertex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp855 = new StringBuilder("scanVertex_args(");
          int tmp856 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp856++) { tmp855.Append(", "); }
            tmp855.Append("Req: ");
            Req.ToString(tmp855);
          }
          tmp855.Append(')');
          return tmp855.ToString();
        }
      }


      public partial class scanVertex_result : TBase
      {
        private global::Nebula.Storage.ScanVertexResponse _success;

        public global::Nebula.Storage.ScanVertexResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public scanVertex_result()
        {
        }

        public scanVertex_result DeepCopy()
        {
          var tmp857 = new scanVertex_result();
          if((Success != null) && __isset.success)
          {
            tmp857.Success = (global::Nebula.Storage.ScanVertexResponse)this.Success.DeepCopy();
          }
          tmp857.__isset.success = this.__isset.success;
          return tmp857;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.ScanVertexResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp858 = new TStruct("scanVertex_result");
            await oprot.WriteStructBeginAsync(tmp858, cancellationToken);
            var tmp859 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp859.Name = "Success";
                tmp859.Type = TType.Struct;
                tmp859.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp859, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is scanVertex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp860 = new StringBuilder("scanVertex_result(");
          int tmp861 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp861++) { tmp860.Append(", "); }
            tmp860.Append("Success: ");
            Success.ToString(tmp860);
          }
          tmp860.Append(')');
          return tmp860.ToString();
        }
      }


      public partial class scanEdge_args : TBase
      {
        private global::Nebula.Storage.ScanEdgeRequest _req;

        public global::Nebula.Storage.ScanEdgeRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public scanEdge_args()
        {
        }

        public scanEdge_args DeepCopy()
        {
          var tmp862 = new scanEdge_args();
          if((Req != null) && __isset.req)
          {
            tmp862.Req = (global::Nebula.Storage.ScanEdgeRequest)this.Req.DeepCopy();
          }
          tmp862.__isset.req = this.__isset.req;
          return tmp862;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.ScanEdgeRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp863 = new TStruct("scanEdge_args");
            await oprot.WriteStructBeginAsync(tmp863, cancellationToken);
            var tmp864 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp864.Name = "req";
              tmp864.Type = TType.Struct;
              tmp864.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp864, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is scanEdge_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp865 = new StringBuilder("scanEdge_args(");
          int tmp866 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp866++) { tmp865.Append(", "); }
            tmp865.Append("Req: ");
            Req.ToString(tmp865);
          }
          tmp865.Append(')');
          return tmp865.ToString();
        }
      }


      public partial class scanEdge_result : TBase
      {
        private global::Nebula.Storage.ScanEdgeResponse _success;

        public global::Nebula.Storage.ScanEdgeResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public scanEdge_result()
        {
        }

        public scanEdge_result DeepCopy()
        {
          var tmp867 = new scanEdge_result();
          if((Success != null) && __isset.success)
          {
            tmp867.Success = (global::Nebula.Storage.ScanEdgeResponse)this.Success.DeepCopy();
          }
          tmp867.__isset.success = this.__isset.success;
          return tmp867;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.ScanEdgeResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp868 = new TStruct("scanEdge_result");
            await oprot.WriteStructBeginAsync(tmp868, cancellationToken);
            var tmp869 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp869.Name = "Success";
                tmp869.Type = TType.Struct;
                tmp869.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp869, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is scanEdge_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp870 = new StringBuilder("scanEdge_result(");
          int tmp871 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp871++) { tmp870.Append(", "); }
            tmp870.Append("Success: ");
            Success.ToString(tmp870);
          }
          tmp870.Append(')');
          return tmp870.ToString();
        }
      }


      public partial class getUUID_args : TBase
      {
        private global::Nebula.Storage.GetUUIDReq _req;

        public global::Nebula.Storage.GetUUIDReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getUUID_args()
        {
        }

        public getUUID_args DeepCopy()
        {
          var tmp872 = new getUUID_args();
          if((Req != null) && __isset.req)
          {
            tmp872.Req = (global::Nebula.Storage.GetUUIDReq)this.Req.DeepCopy();
          }
          tmp872.__isset.req = this.__isset.req;
          return tmp872;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.GetUUIDReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp873 = new TStruct("getUUID_args");
            await oprot.WriteStructBeginAsync(tmp873, cancellationToken);
            var tmp874 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp874.Name = "req";
              tmp874.Type = TType.Struct;
              tmp874.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp874, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUUID_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp875 = new StringBuilder("getUUID_args(");
          int tmp876 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp876++) { tmp875.Append(", "); }
            tmp875.Append("Req: ");
            Req.ToString(tmp875);
          }
          tmp875.Append(')');
          return tmp875.ToString();
        }
      }


      public partial class getUUID_result : TBase
      {
        private global::Nebula.Storage.GetUUIDResp _success;

        public global::Nebula.Storage.GetUUIDResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getUUID_result()
        {
        }

        public getUUID_result DeepCopy()
        {
          var tmp877 = new getUUID_result();
          if((Success != null) && __isset.success)
          {
            tmp877.Success = (global::Nebula.Storage.GetUUIDResp)this.Success.DeepCopy();
          }
          tmp877.__isset.success = this.__isset.success;
          return tmp877;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.GetUUIDResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp878 = new TStruct("getUUID_result");
            await oprot.WriteStructBeginAsync(tmp878, cancellationToken);
            var tmp879 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp879.Name = "Success";
                tmp879.Type = TType.Struct;
                tmp879.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp879, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUUID_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp880 = new StringBuilder("getUUID_result(");
          int tmp881 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp881++) { tmp880.Append(", "); }
            tmp880.Append("Success: ");
            Success.ToString(tmp880);
          }
          tmp880.Append(')');
          return tmp880.ToString();
        }
      }


      public partial class lookupIndex_args : TBase
      {
        private global::Nebula.Storage.LookupIndexRequest _req;

        public global::Nebula.Storage.LookupIndexRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public lookupIndex_args()
        {
        }

        public lookupIndex_args DeepCopy()
        {
          var tmp882 = new lookupIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp882.Req = (global::Nebula.Storage.LookupIndexRequest)this.Req.DeepCopy();
          }
          tmp882.__isset.req = this.__isset.req;
          return tmp882;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.LookupIndexRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp883 = new TStruct("lookupIndex_args");
            await oprot.WriteStructBeginAsync(tmp883, cancellationToken);
            var tmp884 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp884.Name = "req";
              tmp884.Type = TType.Struct;
              tmp884.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp884, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is lookupIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp885 = new StringBuilder("lookupIndex_args(");
          int tmp886 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp886++) { tmp885.Append(", "); }
            tmp885.Append("Req: ");
            Req.ToString(tmp885);
          }
          tmp885.Append(')');
          return tmp885.ToString();
        }
      }


      public partial class lookupIndex_result : TBase
      {
        private global::Nebula.Storage.LookupIndexResp _success;

        public global::Nebula.Storage.LookupIndexResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public lookupIndex_result()
        {
        }

        public lookupIndex_result DeepCopy()
        {
          var tmp887 = new lookupIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp887.Success = (global::Nebula.Storage.LookupIndexResp)this.Success.DeepCopy();
          }
          tmp887.__isset.success = this.__isset.success;
          return tmp887;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.LookupIndexResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp888 = new TStruct("lookupIndex_result");
            await oprot.WriteStructBeginAsync(tmp888, cancellationToken);
            var tmp889 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp889.Name = "Success";
                tmp889.Type = TType.Struct;
                tmp889.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp889, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is lookupIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp890 = new StringBuilder("lookupIndex_result(");
          int tmp891 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp891++) { tmp890.Append(", "); }
            tmp890.Append("Success: ");
            Success.ToString(tmp890);
          }
          tmp890.Append(')');
          return tmp890.ToString();
        }
      }


      public partial class lookupAndTraverse_args : TBase
      {
        private global::Nebula.Storage.LookupAndTraverseRequest _req;

        public global::Nebula.Storage.LookupAndTraverseRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public lookupAndTraverse_args()
        {
        }

        public lookupAndTraverse_args DeepCopy()
        {
          var tmp892 = new lookupAndTraverse_args();
          if((Req != null) && __isset.req)
          {
            tmp892.Req = (global::Nebula.Storage.LookupAndTraverseRequest)this.Req.DeepCopy();
          }
          tmp892.__isset.req = this.__isset.req;
          return tmp892;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.LookupAndTraverseRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp893 = new TStruct("lookupAndTraverse_args");
            await oprot.WriteStructBeginAsync(tmp893, cancellationToken);
            var tmp894 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp894.Name = "req";
              tmp894.Type = TType.Struct;
              tmp894.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp894, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is lookupAndTraverse_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp895 = new StringBuilder("lookupAndTraverse_args(");
          int tmp896 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp896++) { tmp895.Append(", "); }
            tmp895.Append("Req: ");
            Req.ToString(tmp895);
          }
          tmp895.Append(')');
          return tmp895.ToString();
        }
      }


      public partial class lookupAndTraverse_result : TBase
      {
        private global::Nebula.Storage.GetNeighborsResponse _success;

        public global::Nebula.Storage.GetNeighborsResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public lookupAndTraverse_result()
        {
        }

        public lookupAndTraverse_result DeepCopy()
        {
          var tmp897 = new lookupAndTraverse_result();
          if((Success != null) && __isset.success)
          {
            tmp897.Success = (global::Nebula.Storage.GetNeighborsResponse)this.Success.DeepCopy();
          }
          tmp897.__isset.success = this.__isset.success;
          return tmp897;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.GetNeighborsResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp898 = new TStruct("lookupAndTraverse_result");
            await oprot.WriteStructBeginAsync(tmp898, cancellationToken);
            var tmp899 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp899.Name = "Success";
                tmp899.Type = TType.Struct;
                tmp899.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp899, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is lookupAndTraverse_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp900 = new StringBuilder("lookupAndTraverse_result(");
          int tmp901 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp901++) { tmp900.Append(", "); }
            tmp900.Append("Success: ");
            Success.ToString(tmp900);
          }
          tmp900.Append(')');
          return tmp900.ToString();
        }
      }


      public partial class chainUpdateEdge_args : TBase
      {
        private global::Nebula.Storage.UpdateEdgeRequest _req;

        public global::Nebula.Storage.UpdateEdgeRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public chainUpdateEdge_args()
        {
        }

        public chainUpdateEdge_args DeepCopy()
        {
          var tmp902 = new chainUpdateEdge_args();
          if((Req != null) && __isset.req)
          {
            tmp902.Req = (global::Nebula.Storage.UpdateEdgeRequest)this.Req.DeepCopy();
          }
          tmp902.__isset.req = this.__isset.req;
          return tmp902;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.UpdateEdgeRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp903 = new TStruct("chainUpdateEdge_args");
            await oprot.WriteStructBeginAsync(tmp903, cancellationToken);
            var tmp904 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp904.Name = "req";
              tmp904.Type = TType.Struct;
              tmp904.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp904, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is chainUpdateEdge_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp905 = new StringBuilder("chainUpdateEdge_args(");
          int tmp906 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp906++) { tmp905.Append(", "); }
            tmp905.Append("Req: ");
            Req.ToString(tmp905);
          }
          tmp905.Append(')');
          return tmp905.ToString();
        }
      }


      public partial class chainUpdateEdge_result : TBase
      {
        private global::Nebula.Storage.UpdateResponse _success;

        public global::Nebula.Storage.UpdateResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public chainUpdateEdge_result()
        {
        }

        public chainUpdateEdge_result DeepCopy()
        {
          var tmp907 = new chainUpdateEdge_result();
          if((Success != null) && __isset.success)
          {
            tmp907.Success = (global::Nebula.Storage.UpdateResponse)this.Success.DeepCopy();
          }
          tmp907.__isset.success = this.__isset.success;
          return tmp907;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.UpdateResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp908 = new TStruct("chainUpdateEdge_result");
            await oprot.WriteStructBeginAsync(tmp908, cancellationToken);
            var tmp909 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp909.Name = "Success";
                tmp909.Type = TType.Struct;
                tmp909.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp909, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is chainUpdateEdge_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp910 = new StringBuilder("chainUpdateEdge_result(");
          int tmp911 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp911++) { tmp910.Append(", "); }
            tmp910.Append("Success: ");
            Success.ToString(tmp910);
          }
          tmp910.Append(')');
          return tmp910.ToString();
        }
      }


      public partial class chainAddEdges_args : TBase
      {
        private global::Nebula.Storage.AddEdgesRequest _req;

        public global::Nebula.Storage.AddEdgesRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public chainAddEdges_args()
        {
        }

        public chainAddEdges_args DeepCopy()
        {
          var tmp912 = new chainAddEdges_args();
          if((Req != null) && __isset.req)
          {
            tmp912.Req = (global::Nebula.Storage.AddEdgesRequest)this.Req.DeepCopy();
          }
          tmp912.__isset.req = this.__isset.req;
          return tmp912;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.AddEdgesRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp913 = new TStruct("chainAddEdges_args");
            await oprot.WriteStructBeginAsync(tmp913, cancellationToken);
            var tmp914 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp914.Name = "req";
              tmp914.Type = TType.Struct;
              tmp914.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp914, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is chainAddEdges_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp915 = new StringBuilder("chainAddEdges_args(");
          int tmp916 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp916++) { tmp915.Append(", "); }
            tmp915.Append("Req: ");
            Req.ToString(tmp915);
          }
          tmp915.Append(')');
          return tmp915.ToString();
        }
      }


      public partial class chainAddEdges_result : TBase
      {
        private global::Nebula.Storage.ExecResponse _success;

        public global::Nebula.Storage.ExecResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public chainAddEdges_result()
        {
        }

        public chainAddEdges_result DeepCopy()
        {
          var tmp917 = new chainAddEdges_result();
          if((Success != null) && __isset.success)
          {
            tmp917.Success = (global::Nebula.Storage.ExecResponse)this.Success.DeepCopy();
          }
          tmp917.__isset.success = this.__isset.success;
          return tmp917;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.ExecResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp918 = new TStruct("chainAddEdges_result");
            await oprot.WriteStructBeginAsync(tmp918, cancellationToken);
            var tmp919 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp919.Name = "Success";
                tmp919.Type = TType.Struct;
                tmp919.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp919, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is chainAddEdges_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp920 = new StringBuilder("chainAddEdges_result(");
          int tmp921 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp921++) { tmp920.Append(", "); }
            tmp920.Append("Success: ");
            Success.ToString(tmp920);
          }
          tmp920.Append(')');
          return tmp920.ToString();
        }
      }

    }

  }
}
