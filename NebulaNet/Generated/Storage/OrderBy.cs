/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class @OrderBy : TBase
  {
    private byte[] _prop;
    private global::Nebula.Storage.OrderDirection _direction;

    public byte[] Prop
    {
      get
      {
        return _prop;
      }
      set
      {
        __isset.prop = true;
        this._prop = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Storage.OrderDirection"/>
    /// </summary>
    public global::Nebula.Storage.OrderDirection Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        this._direction = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool prop;
      public bool direction;
    }

    public @OrderBy()
    {
    }

    public @OrderBy DeepCopy()
    {
      var tmp52 = new @OrderBy();
      if((Prop != null) && __isset.prop)
      {
        tmp52.Prop = this.Prop.ToArray();
      }
      tmp52.__isset.prop = this.__isset.prop;
      if(__isset.direction)
      {
        tmp52.Direction = this.Direction;
      }
      tmp52.__isset.direction = this.__isset.direction;
      return tmp52;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Prop = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Direction = (global::Nebula.Storage.OrderDirection)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp53 = new TStruct("OrderBy");
        await oprot.WriteStructBeginAsync(tmp53, cancellationToken);
        var tmp54 = new TField();
        if((Prop != null) && __isset.prop)
        {
          tmp54.Name = "prop";
          tmp54.Type = TType.String;
          tmp54.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp54, cancellationToken);
          await oprot.WriteBinaryAsync(Prop, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.direction)
        {
          tmp54.Name = "direction";
          tmp54.Type = TType.I32;
          tmp54.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp54, cancellationToken);
          await oprot.WriteI32Async((int)Direction, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is @OrderBy other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.prop == other.__isset.prop) && ((!__isset.prop) || (TCollections.Equals(Prop, other.Prop))))
        && ((__isset.direction == other.__isset.direction) && ((!__isset.direction) || (System.Object.Equals(Direction, other.Direction))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Prop != null) && __isset.prop)
        {
          hashcode = (hashcode * 397) + Prop.GetHashCode();
        }
        if(__isset.direction)
        {
          hashcode = (hashcode * 397) + Direction.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp55 = new StringBuilder("OrderBy(");
      int tmp56 = 0;
      if((Prop != null) && __isset.prop)
      {
        if(0 < tmp56++) { tmp55.Append(", "); }
        tmp55.Append("Prop: ");
        Prop.ToString(tmp55);
      }
      if(__isset.direction)
      {
        if(0 < tmp56++) { tmp55.Append(", "); }
        tmp55.Append("Direction: ");
        Direction.ToString(tmp55);
      }
      tmp55.Append(')');
      return tmp55.ToString();
    }
  }

}
