/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class CreateCPResp : TBase
  {
    private List<global::Nebula.Common.CheckpointInfo> _info;

    public global::Nebula.Storage.ResponseCommon Result { get; set; }

    public List<global::Nebula.Common.CheckpointInfo> Info
    {
      get
      {
        return _info;
      }
      set
      {
        __isset.info = true;
        this._info = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool info;
    }

    public CreateCPResp()
    {
    }

    public CreateCPResp(global::Nebula.Storage.ResponseCommon result) : this()
    {
      this.Result = result;
    }

    public CreateCPResp DeepCopy()
    {
      var tmp502 = new CreateCPResp();
      if((Result != null))
      {
        tmp502.Result = (global::Nebula.Storage.ResponseCommon)this.Result.DeepCopy();
      }
      if((Info != null) && __isset.info)
      {
        tmp502.Info = this.Info.DeepCopy();
      }
      tmp502.__isset.info = this.__isset.info;
      return tmp502;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_result = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Result = new global::Nebula.Storage.ResponseCommon();
                await Result.ReadAsync(iprot, cancellationToken);
                isset_result = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list503 = await iprot.ReadListBeginAsync(cancellationToken);
                  Info = new List<global::Nebula.Common.CheckpointInfo>(_list503.Count);
                  for(int _i504 = 0; _i504 < _list503.Count; ++_i504)
                  {
                    global::Nebula.Common.CheckpointInfo _elem505;
                    _elem505 = new global::Nebula.Common.CheckpointInfo();
                    await _elem505.ReadAsync(iprot, cancellationToken);
                    Info.Add(_elem505);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_result)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp506 = new TStruct("CreateCPResp");
        await oprot.WriteStructBeginAsync(tmp506, cancellationToken);
        var tmp507 = new TField();
        if((Result != null))
        {
          tmp507.Name = "result";
          tmp507.Type = TType.Struct;
          tmp507.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp507, cancellationToken);
          await Result.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Info != null) && __isset.info)
        {
          tmp507.Name = "info";
          tmp507.Type = TType.List;
          tmp507.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp507, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Info.Count), cancellationToken);
            foreach (global::Nebula.Common.CheckpointInfo _iter508 in Info)
            {
              await _iter508.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is CreateCPResp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Result, other.Result)
        && ((__isset.info == other.__isset.info) && ((!__isset.info) || (TCollections.Equals(Info, other.Info))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Result != null))
        {
          hashcode = (hashcode * 397) + Result.GetHashCode();
        }
        if((Info != null) && __isset.info)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Info);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp509 = new StringBuilder("CreateCPResp(");
      if((Result != null))
      {
        tmp509.Append(", Result: ");
        Result.ToString(tmp509);
      }
      if((Info != null) && __isset.info)
      {
        tmp509.Append(", Info: ");
        Info.ToString(tmp509);
      }
      tmp509.Append(')');
      return tmp509.ToString();
    }
  }

}
