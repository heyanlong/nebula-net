/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class IndexColumnHint : TBase
  {
    private byte[] _column_name;
    private global::Nebula.Storage.ScanType _scan_type;
    private global::Nebula.Common.@Value _begin_value;
    private global::Nebula.Common.@Value _end_value;

    public byte[] Column_name
    {
      get
      {
        return _column_name;
      }
      set
      {
        __isset.column_name = true;
        this._column_name = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Storage.ScanType"/>
    /// </summary>
    public global::Nebula.Storage.ScanType Scan_type
    {
      get
      {
        return _scan_type;
      }
      set
      {
        __isset.scan_type = true;
        this._scan_type = value;
      }
    }

    public global::Nebula.Common.@Value Begin_value
    {
      get
      {
        return _begin_value;
      }
      set
      {
        __isset.begin_value = true;
        this._begin_value = value;
      }
    }

    public global::Nebula.Common.@Value End_value
    {
      get
      {
        return _end_value;
      }
      set
      {
        __isset.end_value = true;
        this._end_value = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool column_name;
      public bool scan_type;
      public bool begin_value;
      public bool end_value;
    }

    public IndexColumnHint()
    {
    }

    public IndexColumnHint DeepCopy()
    {
      var tmp324 = new IndexColumnHint();
      if((Column_name != null) && __isset.column_name)
      {
        tmp324.Column_name = this.Column_name.ToArray();
      }
      tmp324.__isset.column_name = this.__isset.column_name;
      if(__isset.scan_type)
      {
        tmp324.Scan_type = this.Scan_type;
      }
      tmp324.__isset.scan_type = this.__isset.scan_type;
      if((Begin_value != null) && __isset.begin_value)
      {
        tmp324.Begin_value = (global::Nebula.Common.@Value)this.Begin_value.DeepCopy();
      }
      tmp324.__isset.begin_value = this.__isset.begin_value;
      if((End_value != null) && __isset.end_value)
      {
        tmp324.End_value = (global::Nebula.Common.@Value)this.End_value.DeepCopy();
      }
      tmp324.__isset.end_value = this.__isset.end_value;
      return tmp324;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Column_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Scan_type = (global::Nebula.Storage.ScanType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Begin_value = new global::Nebula.Common.@Value();
                await Begin_value.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                End_value = new global::Nebula.Common.@Value();
                await End_value.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp325 = new TStruct("IndexColumnHint");
        await oprot.WriteStructBeginAsync(tmp325, cancellationToken);
        var tmp326 = new TField();
        if((Column_name != null) && __isset.column_name)
        {
          tmp326.Name = "column_name";
          tmp326.Type = TType.String;
          tmp326.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp326, cancellationToken);
          await oprot.WriteBinaryAsync(Column_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.scan_type)
        {
          tmp326.Name = "scan_type";
          tmp326.Type = TType.I32;
          tmp326.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp326, cancellationToken);
          await oprot.WriteI32Async((int)Scan_type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Begin_value != null) && __isset.begin_value)
        {
          tmp326.Name = "begin_value";
          tmp326.Type = TType.Struct;
          tmp326.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp326, cancellationToken);
          await Begin_value.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((End_value != null) && __isset.end_value)
        {
          tmp326.Name = "end_value";
          tmp326.Type = TType.Struct;
          tmp326.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp326, cancellationToken);
          await End_value.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is IndexColumnHint other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.column_name == other.__isset.column_name) && ((!__isset.column_name) || (TCollections.Equals(Column_name, other.Column_name))))
        && ((__isset.scan_type == other.__isset.scan_type) && ((!__isset.scan_type) || (System.Object.Equals(Scan_type, other.Scan_type))))
        && ((__isset.begin_value == other.__isset.begin_value) && ((!__isset.begin_value) || (System.Object.Equals(Begin_value, other.Begin_value))))
        && ((__isset.end_value == other.__isset.end_value) && ((!__isset.end_value) || (System.Object.Equals(End_value, other.End_value))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Column_name != null) && __isset.column_name)
        {
          hashcode = (hashcode * 397) + Column_name.GetHashCode();
        }
        if(__isset.scan_type)
        {
          hashcode = (hashcode * 397) + Scan_type.GetHashCode();
        }
        if((Begin_value != null) && __isset.begin_value)
        {
          hashcode = (hashcode * 397) + Begin_value.GetHashCode();
        }
        if((End_value != null) && __isset.end_value)
        {
          hashcode = (hashcode * 397) + End_value.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp327 = new StringBuilder("IndexColumnHint(");
      int tmp328 = 0;
      if((Column_name != null) && __isset.column_name)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("Column_name: ");
        Column_name.ToString(tmp327);
      }
      if(__isset.scan_type)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("Scan_type: ");
        Scan_type.ToString(tmp327);
      }
      if((Begin_value != null) && __isset.begin_value)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("Begin_value: ");
        Begin_value.ToString(tmp327);
      }
      if((End_value != null) && __isset.end_value)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("End_value: ");
        End_value.ToString(tmp327);
      }
      tmp327.Append(')');
      return tmp327.ToString();
    }
  }

}
