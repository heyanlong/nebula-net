/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class RequestCommon : TBase
  {
    private long _session_id;
    private long _plan_id;
    private bool _profile_detail;

    public long Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }

    public long Plan_id
    {
      get
      {
        return _plan_id;
      }
      set
      {
        __isset.plan_id = true;
        this._plan_id = value;
      }
    }

    public bool Profile_detail
    {
      get
      {
        return _profile_detail;
      }
      set
      {
        __isset.profile_detail = true;
        this._profile_detail = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool session_id;
      public bool plan_id;
      public bool profile_detail;
    }

    public RequestCommon()
    {
    }

    public RequestCommon DeepCopy()
    {
      var tmp0 = new RequestCommon();
      if(__isset.session_id)
      {
        tmp0.Session_id = this.Session_id;
      }
      tmp0.__isset.session_id = this.__isset.session_id;
      if(__isset.plan_id)
      {
        tmp0.Plan_id = this.Plan_id;
      }
      tmp0.__isset.plan_id = this.__isset.plan_id;
      if(__isset.profile_detail)
      {
        tmp0.Profile_detail = this.Profile_detail;
      }
      tmp0.__isset.profile_detail = this.__isset.profile_detail;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Session_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Plan_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                Profile_detail = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1 = new TStruct("RequestCommon");
        await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
        var tmp2 = new TField();
        if(__isset.session_id)
        {
          tmp2.Name = "session_id";
          tmp2.Type = TType.I64;
          tmp2.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI64Async(Session_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.plan_id)
        {
          tmp2.Name = "plan_id";
          tmp2.Type = TType.I64;
          tmp2.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI64Async(Plan_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.profile_detail)
        {
          tmp2.Name = "profile_detail";
          tmp2.Type = TType.Bool;
          tmp2.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteBoolAsync(Profile_detail, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is RequestCommon other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.session_id == other.__isset.session_id) && ((!__isset.session_id) || (System.Object.Equals(Session_id, other.Session_id))))
        && ((__isset.plan_id == other.__isset.plan_id) && ((!__isset.plan_id) || (System.Object.Equals(Plan_id, other.Plan_id))))
        && ((__isset.profile_detail == other.__isset.profile_detail) && ((!__isset.profile_detail) || (System.Object.Equals(Profile_detail, other.Profile_detail))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.session_id)
        {
          hashcode = (hashcode * 397) + Session_id.GetHashCode();
        }
        if(__isset.plan_id)
        {
          hashcode = (hashcode * 397) + Plan_id.GetHashCode();
        }
        if(__isset.profile_detail)
        {
          hashcode = (hashcode * 397) + Profile_detail.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp3 = new StringBuilder("RequestCommon(");
      int tmp4 = 0;
      if(__isset.session_id)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Session_id: ");
        Session_id.ToString(tmp3);
      }
      if(__isset.plan_id)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Plan_id: ");
        Plan_id.ToString(tmp3);
      }
      if(__isset.profile_detail)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Profile_detail: ");
        Profile_detail.ToString(tmp3);
      }
      tmp3.Append(')');
      return tmp3.ToString();
    }
  }

}
