/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class TaskPara : TBase
  {
    private int _space_id;
    private List<int> _parts;
    private List<byte[]> _task_specfic_paras;

    public int Space_id
    {
      get
      {
        return _space_id;
      }
      set
      {
        __isset.space_id = true;
        this._space_id = value;
      }
    }

    public List<int> Parts
    {
      get
      {
        return _parts;
      }
      set
      {
        __isset.parts = true;
        this._parts = value;
      }
    }

    public List<byte[]> Task_specfic_paras
    {
      get
      {
        return _task_specfic_paras;
      }
      set
      {
        __isset.task_specfic_paras = true;
        this._task_specfic_paras = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space_id;
      public bool parts;
      public bool task_specfic_paras;
    }

    public TaskPara()
    {
    }

    public TaskPara DeepCopy()
    {
      var tmp389 = new TaskPara();
      if(__isset.space_id)
      {
        tmp389.Space_id = this.Space_id;
      }
      tmp389.__isset.space_id = this.__isset.space_id;
      if((Parts != null) && __isset.parts)
      {
        tmp389.Parts = this.Parts.DeepCopy();
      }
      tmp389.__isset.parts = this.__isset.parts;
      if((Task_specfic_paras != null) && __isset.task_specfic_paras)
      {
        tmp389.Task_specfic_paras = this.Task_specfic_paras.DeepCopy();
      }
      tmp389.__isset.task_specfic_paras = this.__isset.task_specfic_paras;
      return tmp389;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list390 = await iprot.ReadListBeginAsync(cancellationToken);
                  Parts = new List<int>(_list390.Count);
                  for(int _i391 = 0; _i391 < _list390.Count; ++_i391)
                  {
                    int _elem392;
                    _elem392 = await iprot.ReadI32Async(cancellationToken);
                    Parts.Add(_elem392);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list393 = await iprot.ReadListBeginAsync(cancellationToken);
                  Task_specfic_paras = new List<byte[]>(_list393.Count);
                  for(int _i394 = 0; _i394 < _list393.Count; ++_i394)
                  {
                    byte[] _elem395;
                    _elem395 = await iprot.ReadBinaryAsync(cancellationToken);
                    Task_specfic_paras.Add(_elem395);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp396 = new TStruct("TaskPara");
        await oprot.WriteStructBeginAsync(tmp396, cancellationToken);
        var tmp397 = new TField();
        if(__isset.space_id)
        {
          tmp397.Name = "space_id";
          tmp397.Type = TType.I32;
          tmp397.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
          await oprot.WriteI32Async(Space_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Parts != null) && __isset.parts)
        {
          tmp397.Name = "parts";
          tmp397.Type = TType.List;
          tmp397.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, Parts.Count), cancellationToken);
            foreach (int _iter398 in Parts)
            {
              await oprot.WriteI32Async(_iter398, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Task_specfic_paras != null) && __isset.task_specfic_paras)
        {
          tmp397.Name = "task_specfic_paras";
          tmp397.Type = TType.List;
          tmp397.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Task_specfic_paras.Count), cancellationToken);
            foreach (byte[] _iter399 in Task_specfic_paras)
            {
              await oprot.WriteBinaryAsync(_iter399, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TaskPara other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space_id == other.__isset.space_id) && ((!__isset.space_id) || (System.Object.Equals(Space_id, other.Space_id))))
        && ((__isset.parts == other.__isset.parts) && ((!__isset.parts) || (TCollections.Equals(Parts, other.Parts))))
        && ((__isset.task_specfic_paras == other.__isset.task_specfic_paras) && ((!__isset.task_specfic_paras) || (TCollections.Equals(Task_specfic_paras, other.Task_specfic_paras))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.space_id)
        {
          hashcode = (hashcode * 397) + Space_id.GetHashCode();
        }
        if((Parts != null) && __isset.parts)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Parts);
        }
        if((Task_specfic_paras != null) && __isset.task_specfic_paras)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Task_specfic_paras);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp400 = new StringBuilder("TaskPara(");
      int tmp401 = 0;
      if(__isset.space_id)
      {
        if(0 < tmp401++) { tmp400.Append(", "); }
        tmp400.Append("Space_id: ");
        Space_id.ToString(tmp400);
      }
      if((Parts != null) && __isset.parts)
      {
        if(0 < tmp401++) { tmp400.Append(", "); }
        tmp400.Append("Parts: ");
        Parts.ToString(tmp400);
      }
      if((Task_specfic_paras != null) && __isset.task_specfic_paras)
      {
        if(0 < tmp401++) { tmp400.Append(", "); }
        tmp400.Append("Task_specfic_paras: ");
        Task_specfic_paras.ToString(tmp400);
      }
      tmp400.Append(')');
      return tmp400.ToString();
    }
  }

}
