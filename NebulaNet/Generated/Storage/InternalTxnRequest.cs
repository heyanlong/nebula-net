/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class InternalTxnRequest : TBase
  {
    private long _txn_id;
    private Dictionary<int, long> _term_of_parts;
    private global::Nebula.Storage.AddEdgesRequest _add_edge_req;
    private global::Nebula.Storage.UpdateEdgeRequest _upd_edge_req;
    private Dictionary<int, List<long>> _edge_ver;

    public long Txn_id
    {
      get
      {
        return _txn_id;
      }
      set
      {
        __isset.txn_id = true;
        this._txn_id = value;
      }
    }

    public Dictionary<int, long> Term_of_parts
    {
      get
      {
        return _term_of_parts;
      }
      set
      {
        __isset.term_of_parts = true;
        this._term_of_parts = value;
      }
    }

    public global::Nebula.Storage.AddEdgesRequest Add_edge_req
    {
      get
      {
        return _add_edge_req;
      }
      set
      {
        __isset.add_edge_req = true;
        this._add_edge_req = value;
      }
    }

    public global::Nebula.Storage.UpdateEdgeRequest Upd_edge_req
    {
      get
      {
        return _upd_edge_req;
      }
      set
      {
        __isset.upd_edge_req = true;
        this._upd_edge_req = value;
      }
    }

    public Dictionary<int, List<long>> Edge_ver
    {
      get
      {
        return _edge_ver;
      }
      set
      {
        __isset.edge_ver = true;
        this._edge_ver = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool txn_id;
      public bool term_of_parts;
      public bool add_edge_req;
      public bool upd_edge_req;
      public bool edge_ver;
    }

    public InternalTxnRequest()
    {
    }

    public InternalTxnRequest DeepCopy()
    {
      var tmp572 = new InternalTxnRequest();
      if(__isset.txn_id)
      {
        tmp572.Txn_id = this.Txn_id;
      }
      tmp572.__isset.txn_id = this.__isset.txn_id;
      if((Term_of_parts != null) && __isset.term_of_parts)
      {
        tmp572.Term_of_parts = this.Term_of_parts.DeepCopy();
      }
      tmp572.__isset.term_of_parts = this.__isset.term_of_parts;
      if((Add_edge_req != null) && __isset.add_edge_req)
      {
        tmp572.Add_edge_req = (global::Nebula.Storage.AddEdgesRequest)this.Add_edge_req.DeepCopy();
      }
      tmp572.__isset.add_edge_req = this.__isset.add_edge_req;
      if((Upd_edge_req != null) && __isset.upd_edge_req)
      {
        tmp572.Upd_edge_req = (global::Nebula.Storage.UpdateEdgeRequest)this.Upd_edge_req.DeepCopy();
      }
      tmp572.__isset.upd_edge_req = this.__isset.upd_edge_req;
      if((Edge_ver != null) && __isset.edge_ver)
      {
        tmp572.Edge_ver = this.Edge_ver.DeepCopy();
      }
      tmp572.__isset.edge_ver = this.__isset.edge_ver;
      return tmp572;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Txn_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map573 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Term_of_parts = new Dictionary<int, long>(_map573.Count);
                  for(int _i574 = 0; _i574 < _map573.Count; ++_i574)
                  {
                    int _key575;
                    long _val576;
                    _key575 = await iprot.ReadI32Async(cancellationToken);
                    _val576 = await iprot.ReadI64Async(cancellationToken);
                    Term_of_parts[_key575] = _val576;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Add_edge_req = new global::Nebula.Storage.AddEdgesRequest();
                await Add_edge_req.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Upd_edge_req = new global::Nebula.Storage.UpdateEdgeRequest();
                await Upd_edge_req.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map577 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Edge_ver = new Dictionary<int, List<long>>(_map577.Count);
                  for(int _i578 = 0; _i578 < _map577.Count; ++_i578)
                  {
                    int _key579;
                    List<long> _val580;
                    _key579 = await iprot.ReadI32Async(cancellationToken);
                    {
                      TList _list581 = await iprot.ReadListBeginAsync(cancellationToken);
                      _val580 = new List<long>(_list581.Count);
                      for(int _i582 = 0; _i582 < _list581.Count; ++_i582)
                      {
                        long _elem583;
                        _elem583 = await iprot.ReadI64Async(cancellationToken);
                        _val580.Add(_elem583);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Edge_ver[_key579] = _val580;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp584 = new TStruct("InternalTxnRequest");
        await oprot.WriteStructBeginAsync(tmp584, cancellationToken);
        var tmp585 = new TField();
        if(__isset.txn_id)
        {
          tmp585.Name = "txn_id";
          tmp585.Type = TType.I64;
          tmp585.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
          await oprot.WriteI64Async(Txn_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Term_of_parts != null) && __isset.term_of_parts)
        {
          tmp585.Name = "term_of_parts";
          tmp585.Type = TType.Map;
          tmp585.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.I64, Term_of_parts.Count), cancellationToken);
            foreach (int _iter586 in Term_of_parts.Keys)
            {
              await oprot.WriteI32Async(_iter586, cancellationToken);
              await oprot.WriteI64Async(Term_of_parts[_iter586], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Add_edge_req != null) && __isset.add_edge_req)
        {
          tmp585.Name = "add_edge_req";
          tmp585.Type = TType.Struct;
          tmp585.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
          await Add_edge_req.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Upd_edge_req != null) && __isset.upd_edge_req)
        {
          tmp585.Name = "upd_edge_req";
          tmp585.Type = TType.Struct;
          tmp585.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
          await Upd_edge_req.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Edge_ver != null) && __isset.edge_ver)
        {
          tmp585.Name = "edge_ver";
          tmp585.Type = TType.Map;
          tmp585.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.List, Edge_ver.Count), cancellationToken);
            foreach (int _iter587 in Edge_ver.Keys)
            {
              await oprot.WriteI32Async(_iter587, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.I64, Edge_ver[_iter587].Count), cancellationToken);
                foreach (long _iter588 in Edge_ver[_iter587])
                {
                  await oprot.WriteI64Async(_iter588, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is InternalTxnRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.txn_id == other.__isset.txn_id) && ((!__isset.txn_id) || (System.Object.Equals(Txn_id, other.Txn_id))))
        && ((__isset.term_of_parts == other.__isset.term_of_parts) && ((!__isset.term_of_parts) || (TCollections.Equals(Term_of_parts, other.Term_of_parts))))
        && ((__isset.add_edge_req == other.__isset.add_edge_req) && ((!__isset.add_edge_req) || (System.Object.Equals(Add_edge_req, other.Add_edge_req))))
        && ((__isset.upd_edge_req == other.__isset.upd_edge_req) && ((!__isset.upd_edge_req) || (System.Object.Equals(Upd_edge_req, other.Upd_edge_req))))
        && ((__isset.edge_ver == other.__isset.edge_ver) && ((!__isset.edge_ver) || (TCollections.Equals(Edge_ver, other.Edge_ver))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.txn_id)
        {
          hashcode = (hashcode * 397) + Txn_id.GetHashCode();
        }
        if((Term_of_parts != null) && __isset.term_of_parts)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Term_of_parts);
        }
        if((Add_edge_req != null) && __isset.add_edge_req)
        {
          hashcode = (hashcode * 397) + Add_edge_req.GetHashCode();
        }
        if((Upd_edge_req != null) && __isset.upd_edge_req)
        {
          hashcode = (hashcode * 397) + Upd_edge_req.GetHashCode();
        }
        if((Edge_ver != null) && __isset.edge_ver)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Edge_ver);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp589 = new StringBuilder("InternalTxnRequest(");
      int tmp590 = 0;
      if(__isset.txn_id)
      {
        if(0 < tmp590++) { tmp589.Append(", "); }
        tmp589.Append("Txn_id: ");
        Txn_id.ToString(tmp589);
      }
      if((Term_of_parts != null) && __isset.term_of_parts)
      {
        if(0 < tmp590++) { tmp589.Append(", "); }
        tmp589.Append("Term_of_parts: ");
        Term_of_parts.ToString(tmp589);
      }
      if((Add_edge_req != null) && __isset.add_edge_req)
      {
        if(0 < tmp590++) { tmp589.Append(", "); }
        tmp589.Append("Add_edge_req: ");
        Add_edge_req.ToString(tmp589);
      }
      if((Upd_edge_req != null) && __isset.upd_edge_req)
      {
        if(0 < tmp590++) { tmp589.Append(", "); }
        tmp589.Append("Upd_edge_req: ");
        Upd_edge_req.ToString(tmp589);
      }
      if((Edge_ver != null) && __isset.edge_ver)
      {
        if(0 < tmp590++) { tmp589.Append(", "); }
        tmp589.Append("Edge_ver: ");
        Edge_ver.ToString(tmp589);
      }
      tmp589.Append(')');
      return tmp589.ToString();
    }
  }

}
