/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class GetPropRequest : TBase
  {
    private int _space_id;
    private Dictionary<int, List<global::Nebula.Common.Row>> _parts;
    private List<global::Nebula.Storage.VertexProp> _vertex_props;
    private List<global::Nebula.Storage.EdgeProp> _edge_props;
    private List<global::Nebula.Storage.Expr> _expressions;
    private bool _dedup;
    private List<global::Nebula.Storage.@OrderBy> _order_by;
    private long _limit;
    private byte[] _filter;
    private global::Nebula.Storage.RequestCommon _common;

    public int Space_id
    {
      get
      {
        return _space_id;
      }
      set
      {
        __isset.space_id = true;
        this._space_id = value;
      }
    }

    public Dictionary<int, List<global::Nebula.Common.Row>> Parts
    {
      get
      {
        return _parts;
      }
      set
      {
        __isset.parts = true;
        this._parts = value;
      }
    }

    public List<global::Nebula.Storage.VertexProp> Vertex_props
    {
      get
      {
        return _vertex_props;
      }
      set
      {
        __isset.vertex_props = true;
        this._vertex_props = value;
      }
    }

    public List<global::Nebula.Storage.EdgeProp> Edge_props
    {
      get
      {
        return _edge_props;
      }
      set
      {
        __isset.edge_props = true;
        this._edge_props = value;
      }
    }

    public List<global::Nebula.Storage.Expr> Expressions
    {
      get
      {
        return _expressions;
      }
      set
      {
        __isset.expressions = true;
        this._expressions = value;
      }
    }

    public bool Dedup
    {
      get
      {
        return _dedup;
      }
      set
      {
        __isset.dedup = true;
        this._dedup = value;
      }
    }

    public List<global::Nebula.Storage.@OrderBy> Order_by
    {
      get
      {
        return _order_by;
      }
      set
      {
        __isset.order_by = true;
        this._order_by = value;
      }
    }

    public long Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }

    public byte[] Filter
    {
      get
      {
        return _filter;
      }
      set
      {
        __isset.filter = true;
        this._filter = value;
      }
    }

    public global::Nebula.Storage.RequestCommon Common
    {
      get
      {
        return _common;
      }
      set
      {
        __isset.common = true;
        this._common = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space_id;
      public bool parts;
      public bool vertex_props;
      public bool edge_props;
      public bool expressions;
      public bool dedup;
      public bool order_by;
      public bool limit;
      public bool filter;
      public bool common;
    }

    public GetPropRequest()
    {
      this._dedup = false;
      this.__isset.dedup = true;
    }

    public GetPropRequest DeepCopy()
    {
      var tmp114 = new GetPropRequest();
      if(__isset.space_id)
      {
        tmp114.Space_id = this.Space_id;
      }
      tmp114.__isset.space_id = this.__isset.space_id;
      if((Parts != null) && __isset.parts)
      {
        tmp114.Parts = this.Parts.DeepCopy();
      }
      tmp114.__isset.parts = this.__isset.parts;
      if((Vertex_props != null) && __isset.vertex_props)
      {
        tmp114.Vertex_props = this.Vertex_props.DeepCopy();
      }
      tmp114.__isset.vertex_props = this.__isset.vertex_props;
      if((Edge_props != null) && __isset.edge_props)
      {
        tmp114.Edge_props = this.Edge_props.DeepCopy();
      }
      tmp114.__isset.edge_props = this.__isset.edge_props;
      if((Expressions != null) && __isset.expressions)
      {
        tmp114.Expressions = this.Expressions.DeepCopy();
      }
      tmp114.__isset.expressions = this.__isset.expressions;
      if(__isset.dedup)
      {
        tmp114.Dedup = this.Dedup;
      }
      tmp114.__isset.dedup = this.__isset.dedup;
      if((Order_by != null) && __isset.order_by)
      {
        tmp114.Order_by = this.Order_by.DeepCopy();
      }
      tmp114.__isset.order_by = this.__isset.order_by;
      if(__isset.limit)
      {
        tmp114.Limit = this.Limit;
      }
      tmp114.__isset.limit = this.__isset.limit;
      if((Filter != null) && __isset.filter)
      {
        tmp114.Filter = this.Filter.ToArray();
      }
      tmp114.__isset.filter = this.__isset.filter;
      if((Common != null) && __isset.common)
      {
        tmp114.Common = (global::Nebula.Storage.RequestCommon)this.Common.DeepCopy();
      }
      tmp114.__isset.common = this.__isset.common;
      return tmp114;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map115 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Parts = new Dictionary<int, List<global::Nebula.Common.Row>>(_map115.Count);
                  for(int _i116 = 0; _i116 < _map115.Count; ++_i116)
                  {
                    int _key117;
                    List<global::Nebula.Common.Row> _val118;
                    _key117 = await iprot.ReadI32Async(cancellationToken);
                    {
                      TList _list119 = await iprot.ReadListBeginAsync(cancellationToken);
                      _val118 = new List<global::Nebula.Common.Row>(_list119.Count);
                      for(int _i120 = 0; _i120 < _list119.Count; ++_i120)
                      {
                        global::Nebula.Common.Row _elem121;
                        _elem121 = new global::Nebula.Common.Row();
                        await _elem121.ReadAsync(iprot, cancellationToken);
                        _val118.Add(_elem121);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Parts[_key117] = _val118;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list122 = await iprot.ReadListBeginAsync(cancellationToken);
                  Vertex_props = new List<global::Nebula.Storage.VertexProp>(_list122.Count);
                  for(int _i123 = 0; _i123 < _list122.Count; ++_i123)
                  {
                    global::Nebula.Storage.VertexProp _elem124;
                    _elem124 = new global::Nebula.Storage.VertexProp();
                    await _elem124.ReadAsync(iprot, cancellationToken);
                    Vertex_props.Add(_elem124);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list125 = await iprot.ReadListBeginAsync(cancellationToken);
                  Edge_props = new List<global::Nebula.Storage.EdgeProp>(_list125.Count);
                  for(int _i126 = 0; _i126 < _list125.Count; ++_i126)
                  {
                    global::Nebula.Storage.EdgeProp _elem127;
                    _elem127 = new global::Nebula.Storage.EdgeProp();
                    await _elem127.ReadAsync(iprot, cancellationToken);
                    Edge_props.Add(_elem127);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list128 = await iprot.ReadListBeginAsync(cancellationToken);
                  Expressions = new List<global::Nebula.Storage.Expr>(_list128.Count);
                  for(int _i129 = 0; _i129 < _list128.Count; ++_i129)
                  {
                    global::Nebula.Storage.Expr _elem130;
                    _elem130 = new global::Nebula.Storage.Expr();
                    await _elem130.ReadAsync(iprot, cancellationToken);
                    Expressions.Add(_elem130);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                Dedup = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  TList _list131 = await iprot.ReadListBeginAsync(cancellationToken);
                  Order_by = new List<global::Nebula.Storage.@OrderBy>(_list131.Count);
                  for(int _i132 = 0; _i132 < _list131.Count; ++_i132)
                  {
                    global::Nebula.Storage.@OrderBy _elem133;
                    _elem133 = new global::Nebula.Storage.@OrderBy();
                    await _elem133.ReadAsync(iprot, cancellationToken);
                    Order_by.Add(_elem133);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I64)
              {
                Limit = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                Filter = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Struct)
              {
                Common = new global::Nebula.Storage.RequestCommon();
                await Common.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp134 = new TStruct("GetPropRequest");
        await oprot.WriteStructBeginAsync(tmp134, cancellationToken);
        var tmp135 = new TField();
        if(__isset.space_id)
        {
          tmp135.Name = "space_id";
          tmp135.Type = TType.I32;
          tmp135.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          await oprot.WriteI32Async(Space_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Parts != null) && __isset.parts)
        {
          tmp135.Name = "parts";
          tmp135.Type = TType.Map;
          tmp135.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.List, Parts.Count), cancellationToken);
            foreach (int _iter136 in Parts.Keys)
            {
              await oprot.WriteI32Async(_iter136, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Parts[_iter136].Count), cancellationToken);
                foreach (global::Nebula.Common.Row _iter137 in Parts[_iter136])
                {
                  await _iter137.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Vertex_props != null) && __isset.vertex_props)
        {
          tmp135.Name = "vertex_props";
          tmp135.Type = TType.List;
          tmp135.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Vertex_props.Count), cancellationToken);
            foreach (global::Nebula.Storage.VertexProp _iter138 in Vertex_props)
            {
              await _iter138.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Edge_props != null) && __isset.edge_props)
        {
          tmp135.Name = "edge_props";
          tmp135.Type = TType.List;
          tmp135.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Edge_props.Count), cancellationToken);
            foreach (global::Nebula.Storage.EdgeProp _iter139 in Edge_props)
            {
              await _iter139.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Expressions != null) && __isset.expressions)
        {
          tmp135.Name = "expressions";
          tmp135.Type = TType.List;
          tmp135.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Expressions.Count), cancellationToken);
            foreach (global::Nebula.Storage.Expr _iter140 in Expressions)
            {
              await _iter140.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.dedup)
        {
          tmp135.Name = "dedup";
          tmp135.Type = TType.Bool;
          tmp135.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          await oprot.WriteBoolAsync(Dedup, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Order_by != null) && __isset.order_by)
        {
          tmp135.Name = "order_by";
          tmp135.Type = TType.List;
          tmp135.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Order_by.Count), cancellationToken);
            foreach (global::Nebula.Storage.@OrderBy _iter141 in Order_by)
            {
              await _iter141.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.limit)
        {
          tmp135.Name = "limit";
          tmp135.Type = TType.I64;
          tmp135.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          await oprot.WriteI64Async(Limit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Filter != null) && __isset.filter)
        {
          tmp135.Name = "filter";
          tmp135.Type = TType.String;
          tmp135.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          await oprot.WriteBinaryAsync(Filter, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Common != null) && __isset.common)
        {
          tmp135.Name = "common";
          tmp135.Type = TType.Struct;
          tmp135.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
          await Common.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is GetPropRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space_id == other.__isset.space_id) && ((!__isset.space_id) || (System.Object.Equals(Space_id, other.Space_id))))
        && ((__isset.parts == other.__isset.parts) && ((!__isset.parts) || (TCollections.Equals(Parts, other.Parts))))
        && ((__isset.vertex_props == other.__isset.vertex_props) && ((!__isset.vertex_props) || (TCollections.Equals(Vertex_props, other.Vertex_props))))
        && ((__isset.edge_props == other.__isset.edge_props) && ((!__isset.edge_props) || (TCollections.Equals(Edge_props, other.Edge_props))))
        && ((__isset.expressions == other.__isset.expressions) && ((!__isset.expressions) || (TCollections.Equals(Expressions, other.Expressions))))
        && ((__isset.dedup == other.__isset.dedup) && ((!__isset.dedup) || (System.Object.Equals(Dedup, other.Dedup))))
        && ((__isset.order_by == other.__isset.order_by) && ((!__isset.order_by) || (TCollections.Equals(Order_by, other.Order_by))))
        && ((__isset.limit == other.__isset.limit) && ((!__isset.limit) || (System.Object.Equals(Limit, other.Limit))))
        && ((__isset.filter == other.__isset.filter) && ((!__isset.filter) || (TCollections.Equals(Filter, other.Filter))))
        && ((__isset.common == other.__isset.common) && ((!__isset.common) || (System.Object.Equals(Common, other.Common))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.space_id)
        {
          hashcode = (hashcode * 397) + Space_id.GetHashCode();
        }
        if((Parts != null) && __isset.parts)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Parts);
        }
        if((Vertex_props != null) && __isset.vertex_props)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Vertex_props);
        }
        if((Edge_props != null) && __isset.edge_props)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Edge_props);
        }
        if((Expressions != null) && __isset.expressions)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Expressions);
        }
        if(__isset.dedup)
        {
          hashcode = (hashcode * 397) + Dedup.GetHashCode();
        }
        if((Order_by != null) && __isset.order_by)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Order_by);
        }
        if(__isset.limit)
        {
          hashcode = (hashcode * 397) + Limit.GetHashCode();
        }
        if((Filter != null) && __isset.filter)
        {
          hashcode = (hashcode * 397) + Filter.GetHashCode();
        }
        if((Common != null) && __isset.common)
        {
          hashcode = (hashcode * 397) + Common.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp142 = new StringBuilder("GetPropRequest(");
      int tmp143 = 0;
      if(__isset.space_id)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Space_id: ");
        Space_id.ToString(tmp142);
      }
      if((Parts != null) && __isset.parts)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Parts: ");
        Parts.ToString(tmp142);
      }
      if((Vertex_props != null) && __isset.vertex_props)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Vertex_props: ");
        Vertex_props.ToString(tmp142);
      }
      if((Edge_props != null) && __isset.edge_props)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Edge_props: ");
        Edge_props.ToString(tmp142);
      }
      if((Expressions != null) && __isset.expressions)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Expressions: ");
        Expressions.ToString(tmp142);
      }
      if(__isset.dedup)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Dedup: ");
        Dedup.ToString(tmp142);
      }
      if((Order_by != null) && __isset.order_by)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Order_by: ");
        Order_by.ToString(tmp142);
      }
      if(__isset.limit)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Limit: ");
        Limit.ToString(tmp142);
      }
      if((Filter != null) && __isset.filter)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Filter: ");
        Filter.ToString(tmp142);
      }
      if((Common != null) && __isset.common)
      {
        if(0 < tmp143++) { tmp142.Append(", "); }
        tmp142.Append("Common: ");
        Common.ToString(tmp142);
      }
      tmp142.Append(')');
      return tmp142.ToString();
    }
  }

}
