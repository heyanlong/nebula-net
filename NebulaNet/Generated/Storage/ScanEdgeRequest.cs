/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class ScanEdgeRequest : TBase
  {
    private int _space_id;
    private int _part_id;
    private byte[] _cursor;
    private global::Nebula.Storage.EdgeProp _return_columns;
    private long _limit;
    private long _start_time;
    private long _end_time;
    private byte[] _filter;
    private bool _only_latest_version;
    private bool _enable_read_from_follower;
    private global::Nebula.Storage.RequestCommon _common;

    public int Space_id
    {
      get
      {
        return _space_id;
      }
      set
      {
        __isset.space_id = true;
        this._space_id = value;
      }
    }

    public int Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public byte[] Cursor
    {
      get
      {
        return _cursor;
      }
      set
      {
        __isset.cursor = true;
        this._cursor = value;
      }
    }

    public global::Nebula.Storage.EdgeProp Return_columns
    {
      get
      {
        return _return_columns;
      }
      set
      {
        __isset.return_columns = true;
        this._return_columns = value;
      }
    }

    public long Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }

    public long Start_time
    {
      get
      {
        return _start_time;
      }
      set
      {
        __isset.start_time = true;
        this._start_time = value;
      }
    }

    public long End_time
    {
      get
      {
        return _end_time;
      }
      set
      {
        __isset.end_time = true;
        this._end_time = value;
      }
    }

    public byte[] Filter
    {
      get
      {
        return _filter;
      }
      set
      {
        __isset.filter = true;
        this._filter = value;
      }
    }

    public bool Only_latest_version
    {
      get
      {
        return _only_latest_version;
      }
      set
      {
        __isset.only_latest_version = true;
        this._only_latest_version = value;
      }
    }

    public bool Enable_read_from_follower
    {
      get
      {
        return _enable_read_from_follower;
      }
      set
      {
        __isset.enable_read_from_follower = true;
        this._enable_read_from_follower = value;
      }
    }

    public global::Nebula.Storage.RequestCommon Common
    {
      get
      {
        return _common;
      }
      set
      {
        __isset.common = true;
        this._common = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space_id;
      public bool part_id;
      public bool cursor;
      public bool return_columns;
      public bool limit;
      public bool start_time;
      public bool end_time;
      public bool filter;
      public bool only_latest_version;
      public bool enable_read_from_follower;
      public bool common;
    }

    public ScanEdgeRequest()
    {
      this._only_latest_version = false;
      this.__isset.only_latest_version = true;
      this._enable_read_from_follower = true;
      this.__isset.enable_read_from_follower = true;
    }

    public ScanEdgeRequest DeepCopy()
    {
      var tmp379 = new ScanEdgeRequest();
      if(__isset.space_id)
      {
        tmp379.Space_id = this.Space_id;
      }
      tmp379.__isset.space_id = this.__isset.space_id;
      if(__isset.part_id)
      {
        tmp379.Part_id = this.Part_id;
      }
      tmp379.__isset.part_id = this.__isset.part_id;
      if((Cursor != null) && __isset.cursor)
      {
        tmp379.Cursor = this.Cursor.ToArray();
      }
      tmp379.__isset.cursor = this.__isset.cursor;
      if((Return_columns != null) && __isset.return_columns)
      {
        tmp379.Return_columns = (global::Nebula.Storage.EdgeProp)this.Return_columns.DeepCopy();
      }
      tmp379.__isset.return_columns = this.__isset.return_columns;
      if(__isset.limit)
      {
        tmp379.Limit = this.Limit;
      }
      tmp379.__isset.limit = this.__isset.limit;
      if(__isset.start_time)
      {
        tmp379.Start_time = this.Start_time;
      }
      tmp379.__isset.start_time = this.__isset.start_time;
      if(__isset.end_time)
      {
        tmp379.End_time = this.End_time;
      }
      tmp379.__isset.end_time = this.__isset.end_time;
      if((Filter != null) && __isset.filter)
      {
        tmp379.Filter = this.Filter.ToArray();
      }
      tmp379.__isset.filter = this.__isset.filter;
      if(__isset.only_latest_version)
      {
        tmp379.Only_latest_version = this.Only_latest_version;
      }
      tmp379.__isset.only_latest_version = this.__isset.only_latest_version;
      if(__isset.enable_read_from_follower)
      {
        tmp379.Enable_read_from_follower = this.Enable_read_from_follower;
      }
      tmp379.__isset.enable_read_from_follower = this.__isset.enable_read_from_follower;
      if((Common != null) && __isset.common)
      {
        tmp379.Common = (global::Nebula.Storage.RequestCommon)this.Common.DeepCopy();
      }
      tmp379.__isset.common = this.__isset.common;
      return tmp379;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Part_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Cursor = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Return_columns = new global::Nebula.Storage.EdgeProp();
                await Return_columns.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Limit = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Start_time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                End_time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                Filter = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Bool)
              {
                Only_latest_version = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Bool)
              {
                Enable_read_from_follower = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Struct)
              {
                Common = new global::Nebula.Storage.RequestCommon();
                await Common.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp380 = new TStruct("ScanEdgeRequest");
        await oprot.WriteStructBeginAsync(tmp380, cancellationToken);
        var tmp381 = new TField();
        if(__isset.space_id)
        {
          tmp381.Name = "space_id";
          tmp381.Type = TType.I32;
          tmp381.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await oprot.WriteI32Async(Space_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.part_id)
        {
          tmp381.Name = "part_id";
          tmp381.Type = TType.I32;
          tmp381.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await oprot.WriteI32Async(Part_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Cursor != null) && __isset.cursor)
        {
          tmp381.Name = "cursor";
          tmp381.Type = TType.String;
          tmp381.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await oprot.WriteBinaryAsync(Cursor, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Return_columns != null) && __isset.return_columns)
        {
          tmp381.Name = "return_columns";
          tmp381.Type = TType.Struct;
          tmp381.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await Return_columns.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.limit)
        {
          tmp381.Name = "limit";
          tmp381.Type = TType.I64;
          tmp381.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await oprot.WriteI64Async(Limit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.start_time)
        {
          tmp381.Name = "start_time";
          tmp381.Type = TType.I64;
          tmp381.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await oprot.WriteI64Async(Start_time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.end_time)
        {
          tmp381.Name = "end_time";
          tmp381.Type = TType.I64;
          tmp381.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await oprot.WriteI64Async(End_time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Filter != null) && __isset.filter)
        {
          tmp381.Name = "filter";
          tmp381.Type = TType.String;
          tmp381.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await oprot.WriteBinaryAsync(Filter, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.only_latest_version)
        {
          tmp381.Name = "only_latest_version";
          tmp381.Type = TType.Bool;
          tmp381.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await oprot.WriteBoolAsync(Only_latest_version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enable_read_from_follower)
        {
          tmp381.Name = "enable_read_from_follower";
          tmp381.Type = TType.Bool;
          tmp381.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await oprot.WriteBoolAsync(Enable_read_from_follower, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Common != null) && __isset.common)
        {
          tmp381.Name = "common";
          tmp381.Type = TType.Struct;
          tmp381.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
          await Common.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ScanEdgeRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space_id == other.__isset.space_id) && ((!__isset.space_id) || (System.Object.Equals(Space_id, other.Space_id))))
        && ((__isset.part_id == other.__isset.part_id) && ((!__isset.part_id) || (System.Object.Equals(Part_id, other.Part_id))))
        && ((__isset.cursor == other.__isset.cursor) && ((!__isset.cursor) || (TCollections.Equals(Cursor, other.Cursor))))
        && ((__isset.return_columns == other.__isset.return_columns) && ((!__isset.return_columns) || (System.Object.Equals(Return_columns, other.Return_columns))))
        && ((__isset.limit == other.__isset.limit) && ((!__isset.limit) || (System.Object.Equals(Limit, other.Limit))))
        && ((__isset.start_time == other.__isset.start_time) && ((!__isset.start_time) || (System.Object.Equals(Start_time, other.Start_time))))
        && ((__isset.end_time == other.__isset.end_time) && ((!__isset.end_time) || (System.Object.Equals(End_time, other.End_time))))
        && ((__isset.filter == other.__isset.filter) && ((!__isset.filter) || (TCollections.Equals(Filter, other.Filter))))
        && ((__isset.only_latest_version == other.__isset.only_latest_version) && ((!__isset.only_latest_version) || (System.Object.Equals(Only_latest_version, other.Only_latest_version))))
        && ((__isset.enable_read_from_follower == other.__isset.enable_read_from_follower) && ((!__isset.enable_read_from_follower) || (System.Object.Equals(Enable_read_from_follower, other.Enable_read_from_follower))))
        && ((__isset.common == other.__isset.common) && ((!__isset.common) || (System.Object.Equals(Common, other.Common))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.space_id)
        {
          hashcode = (hashcode * 397) + Space_id.GetHashCode();
        }
        if(__isset.part_id)
        {
          hashcode = (hashcode * 397) + Part_id.GetHashCode();
        }
        if((Cursor != null) && __isset.cursor)
        {
          hashcode = (hashcode * 397) + Cursor.GetHashCode();
        }
        if((Return_columns != null) && __isset.return_columns)
        {
          hashcode = (hashcode * 397) + Return_columns.GetHashCode();
        }
        if(__isset.limit)
        {
          hashcode = (hashcode * 397) + Limit.GetHashCode();
        }
        if(__isset.start_time)
        {
          hashcode = (hashcode * 397) + Start_time.GetHashCode();
        }
        if(__isset.end_time)
        {
          hashcode = (hashcode * 397) + End_time.GetHashCode();
        }
        if((Filter != null) && __isset.filter)
        {
          hashcode = (hashcode * 397) + Filter.GetHashCode();
        }
        if(__isset.only_latest_version)
        {
          hashcode = (hashcode * 397) + Only_latest_version.GetHashCode();
        }
        if(__isset.enable_read_from_follower)
        {
          hashcode = (hashcode * 397) + Enable_read_from_follower.GetHashCode();
        }
        if((Common != null) && __isset.common)
        {
          hashcode = (hashcode * 397) + Common.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp382 = new StringBuilder("ScanEdgeRequest(");
      int tmp383 = 0;
      if(__isset.space_id)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Space_id: ");
        Space_id.ToString(tmp382);
      }
      if(__isset.part_id)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Part_id: ");
        Part_id.ToString(tmp382);
      }
      if((Cursor != null) && __isset.cursor)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Cursor: ");
        Cursor.ToString(tmp382);
      }
      if((Return_columns != null) && __isset.return_columns)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Return_columns: ");
        Return_columns.ToString(tmp382);
      }
      if(__isset.limit)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Limit: ");
        Limit.ToString(tmp382);
      }
      if(__isset.start_time)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Start_time: ");
        Start_time.ToString(tmp382);
      }
      if(__isset.end_time)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("End_time: ");
        End_time.ToString(tmp382);
      }
      if((Filter != null) && __isset.filter)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Filter: ");
        Filter.ToString(tmp382);
      }
      if(__isset.only_latest_version)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Only_latest_version: ");
        Only_latest_version.ToString(tmp382);
      }
      if(__isset.enable_read_from_follower)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Enable_read_from_follower: ");
        Enable_read_from_follower.ToString(tmp382);
      }
      if((Common != null) && __isset.common)
      {
        if(0 < tmp383++) { tmp382.Append(", "); }
        tmp382.Append("Common: ");
        Common.ToString(tmp382);
      }
      tmp382.Append(')');
      return tmp382.ToString();
    }
  }

}
