/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class TraverseSpec : TBase
  {
    private List<int> _edge_types;
    private global::Nebula.Storage.EdgeDirection _edge_direction;
    private bool _dedup;
    private List<global::Nebula.Storage.StatProp> _stat_props;
    private List<global::Nebula.Storage.VertexProp> _vertex_props;
    private List<global::Nebula.Storage.EdgeProp> _edge_props;
    private List<global::Nebula.Storage.Expr> _expressions;
    private List<global::Nebula.Storage.@OrderBy> _order_by;
    private bool _random;
    private long _limit;
    private byte[] _filter;

    public List<int> Edge_types
    {
      get
      {
        return _edge_types;
      }
      set
      {
        __isset.edge_types = true;
        this._edge_types = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Storage.EdgeDirection"/>
    /// </summary>
    public global::Nebula.Storage.EdgeDirection Edge_direction
    {
      get
      {
        return _edge_direction;
      }
      set
      {
        __isset.edge_direction = true;
        this._edge_direction = value;
      }
    }

    public bool Dedup
    {
      get
      {
        return _dedup;
      }
      set
      {
        __isset.dedup = true;
        this._dedup = value;
      }
    }

    public List<global::Nebula.Storage.StatProp> Stat_props
    {
      get
      {
        return _stat_props;
      }
      set
      {
        __isset.stat_props = true;
        this._stat_props = value;
      }
    }

    public List<global::Nebula.Storage.VertexProp> Vertex_props
    {
      get
      {
        return _vertex_props;
      }
      set
      {
        __isset.vertex_props = true;
        this._vertex_props = value;
      }
    }

    public List<global::Nebula.Storage.EdgeProp> Edge_props
    {
      get
      {
        return _edge_props;
      }
      set
      {
        __isset.edge_props = true;
        this._edge_props = value;
      }
    }

    public List<global::Nebula.Storage.Expr> Expressions
    {
      get
      {
        return _expressions;
      }
      set
      {
        __isset.expressions = true;
        this._expressions = value;
      }
    }

    public List<global::Nebula.Storage.@OrderBy> Order_by
    {
      get
      {
        return _order_by;
      }
      set
      {
        __isset.order_by = true;
        this._order_by = value;
      }
    }

    public bool Random
    {
      get
      {
        return _random;
      }
      set
      {
        __isset.random = true;
        this._random = value;
      }
    }

    public long Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }

    public byte[] Filter
    {
      get
      {
        return _filter;
      }
      set
      {
        __isset.filter = true;
        this._filter = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool edge_types;
      public bool edge_direction;
      public bool dedup;
      public bool stat_props;
      public bool vertex_props;
      public bool edge_props;
      public bool expressions;
      public bool order_by;
      public bool random;
      public bool limit;
      public bool filter;
    }

    public TraverseSpec()
    {
      this._edge_direction = global::Nebula.Storage.EdgeDirection.BOTH;
      this.__isset.edge_direction = true;
      this._dedup = false;
      this.__isset.dedup = true;
    }

    public TraverseSpec DeepCopy()
    {
      var tmp57 = new TraverseSpec();
      if((Edge_types != null) && __isset.edge_types)
      {
        tmp57.Edge_types = this.Edge_types.DeepCopy();
      }
      tmp57.__isset.edge_types = this.__isset.edge_types;
      if(__isset.edge_direction)
      {
        tmp57.Edge_direction = this.Edge_direction;
      }
      tmp57.__isset.edge_direction = this.__isset.edge_direction;
      if(__isset.dedup)
      {
        tmp57.Dedup = this.Dedup;
      }
      tmp57.__isset.dedup = this.__isset.dedup;
      if((Stat_props != null) && __isset.stat_props)
      {
        tmp57.Stat_props = this.Stat_props.DeepCopy();
      }
      tmp57.__isset.stat_props = this.__isset.stat_props;
      if((Vertex_props != null) && __isset.vertex_props)
      {
        tmp57.Vertex_props = this.Vertex_props.DeepCopy();
      }
      tmp57.__isset.vertex_props = this.__isset.vertex_props;
      if((Edge_props != null) && __isset.edge_props)
      {
        tmp57.Edge_props = this.Edge_props.DeepCopy();
      }
      tmp57.__isset.edge_props = this.__isset.edge_props;
      if((Expressions != null) && __isset.expressions)
      {
        tmp57.Expressions = this.Expressions.DeepCopy();
      }
      tmp57.__isset.expressions = this.__isset.expressions;
      if((Order_by != null) && __isset.order_by)
      {
        tmp57.Order_by = this.Order_by.DeepCopy();
      }
      tmp57.__isset.order_by = this.__isset.order_by;
      if(__isset.random)
      {
        tmp57.Random = this.Random;
      }
      tmp57.__isset.random = this.__isset.random;
      if(__isset.limit)
      {
        tmp57.Limit = this.Limit;
      }
      tmp57.__isset.limit = this.__isset.limit;
      if((Filter != null) && __isset.filter)
      {
        tmp57.Filter = this.Filter.ToArray();
      }
      tmp57.__isset.filter = this.__isset.filter;
      return tmp57;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list58 = await iprot.ReadListBeginAsync(cancellationToken);
                  Edge_types = new List<int>(_list58.Count);
                  for(int _i59 = 0; _i59 < _list58.Count; ++_i59)
                  {
                    int _elem60;
                    _elem60 = await iprot.ReadI32Async(cancellationToken);
                    Edge_types.Add(_elem60);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Edge_direction = (global::Nebula.Storage.EdgeDirection)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                Dedup = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list61 = await iprot.ReadListBeginAsync(cancellationToken);
                  Stat_props = new List<global::Nebula.Storage.StatProp>(_list61.Count);
                  for(int _i62 = 0; _i62 < _list61.Count; ++_i62)
                  {
                    global::Nebula.Storage.StatProp _elem63;
                    _elem63 = new global::Nebula.Storage.StatProp();
                    await _elem63.ReadAsync(iprot, cancellationToken);
                    Stat_props.Add(_elem63);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list64 = await iprot.ReadListBeginAsync(cancellationToken);
                  Vertex_props = new List<global::Nebula.Storage.VertexProp>(_list64.Count);
                  for(int _i65 = 0; _i65 < _list64.Count; ++_i65)
                  {
                    global::Nebula.Storage.VertexProp _elem66;
                    _elem66 = new global::Nebula.Storage.VertexProp();
                    await _elem66.ReadAsync(iprot, cancellationToken);
                    Vertex_props.Add(_elem66);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.List)
              {
                {
                  TList _list67 = await iprot.ReadListBeginAsync(cancellationToken);
                  Edge_props = new List<global::Nebula.Storage.EdgeProp>(_list67.Count);
                  for(int _i68 = 0; _i68 < _list67.Count; ++_i68)
                  {
                    global::Nebula.Storage.EdgeProp _elem69;
                    _elem69 = new global::Nebula.Storage.EdgeProp();
                    await _elem69.ReadAsync(iprot, cancellationToken);
                    Edge_props.Add(_elem69);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  TList _list70 = await iprot.ReadListBeginAsync(cancellationToken);
                  Expressions = new List<global::Nebula.Storage.Expr>(_list70.Count);
                  for(int _i71 = 0; _i71 < _list70.Count; ++_i71)
                  {
                    global::Nebula.Storage.Expr _elem72;
                    _elem72 = new global::Nebula.Storage.Expr();
                    await _elem72.ReadAsync(iprot, cancellationToken);
                    Expressions.Add(_elem72);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.List)
              {
                {
                  TList _list73 = await iprot.ReadListBeginAsync(cancellationToken);
                  Order_by = new List<global::Nebula.Storage.@OrderBy>(_list73.Count);
                  for(int _i74 = 0; _i74 < _list73.Count; ++_i74)
                  {
                    global::Nebula.Storage.@OrderBy _elem75;
                    _elem75 = new global::Nebula.Storage.@OrderBy();
                    await _elem75.ReadAsync(iprot, cancellationToken);
                    Order_by.Add(_elem75);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Bool)
              {
                Random = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I64)
              {
                Limit = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                Filter = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp76 = new TStruct("TraverseSpec");
        await oprot.WriteStructBeginAsync(tmp76, cancellationToken);
        var tmp77 = new TField();
        if((Edge_types != null) && __isset.edge_types)
        {
          tmp77.Name = "edge_types";
          tmp77.Type = TType.List;
          tmp77.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, Edge_types.Count), cancellationToken);
            foreach (int _iter78 in Edge_types)
            {
              await oprot.WriteI32Async(_iter78, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.edge_direction)
        {
          tmp77.Name = "edge_direction";
          tmp77.Type = TType.I32;
          tmp77.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          await oprot.WriteI32Async((int)Edge_direction, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.dedup)
        {
          tmp77.Name = "dedup";
          tmp77.Type = TType.Bool;
          tmp77.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          await oprot.WriteBoolAsync(Dedup, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Stat_props != null) && __isset.stat_props)
        {
          tmp77.Name = "stat_props";
          tmp77.Type = TType.List;
          tmp77.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Stat_props.Count), cancellationToken);
            foreach (global::Nebula.Storage.StatProp _iter79 in Stat_props)
            {
              await _iter79.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Vertex_props != null) && __isset.vertex_props)
        {
          tmp77.Name = "vertex_props";
          tmp77.Type = TType.List;
          tmp77.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Vertex_props.Count), cancellationToken);
            foreach (global::Nebula.Storage.VertexProp _iter80 in Vertex_props)
            {
              await _iter80.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Edge_props != null) && __isset.edge_props)
        {
          tmp77.Name = "edge_props";
          tmp77.Type = TType.List;
          tmp77.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Edge_props.Count), cancellationToken);
            foreach (global::Nebula.Storage.EdgeProp _iter81 in Edge_props)
            {
              await _iter81.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Expressions != null) && __isset.expressions)
        {
          tmp77.Name = "expressions";
          tmp77.Type = TType.List;
          tmp77.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Expressions.Count), cancellationToken);
            foreach (global::Nebula.Storage.Expr _iter82 in Expressions)
            {
              await _iter82.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Order_by != null) && __isset.order_by)
        {
          tmp77.Name = "order_by";
          tmp77.Type = TType.List;
          tmp77.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Order_by.Count), cancellationToken);
            foreach (global::Nebula.Storage.@OrderBy _iter83 in Order_by)
            {
              await _iter83.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.random)
        {
          tmp77.Name = "random";
          tmp77.Type = TType.Bool;
          tmp77.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          await oprot.WriteBoolAsync(Random, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.limit)
        {
          tmp77.Name = "limit";
          tmp77.Type = TType.I64;
          tmp77.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          await oprot.WriteI64Async(Limit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Filter != null) && __isset.filter)
        {
          tmp77.Name = "filter";
          tmp77.Type = TType.String;
          tmp77.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp77, cancellationToken);
          await oprot.WriteBinaryAsync(Filter, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TraverseSpec other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.edge_types == other.__isset.edge_types) && ((!__isset.edge_types) || (TCollections.Equals(Edge_types, other.Edge_types))))
        && ((__isset.edge_direction == other.__isset.edge_direction) && ((!__isset.edge_direction) || (System.Object.Equals(Edge_direction, other.Edge_direction))))
        && ((__isset.dedup == other.__isset.dedup) && ((!__isset.dedup) || (System.Object.Equals(Dedup, other.Dedup))))
        && ((__isset.stat_props == other.__isset.stat_props) && ((!__isset.stat_props) || (TCollections.Equals(Stat_props, other.Stat_props))))
        && ((__isset.vertex_props == other.__isset.vertex_props) && ((!__isset.vertex_props) || (TCollections.Equals(Vertex_props, other.Vertex_props))))
        && ((__isset.edge_props == other.__isset.edge_props) && ((!__isset.edge_props) || (TCollections.Equals(Edge_props, other.Edge_props))))
        && ((__isset.expressions == other.__isset.expressions) && ((!__isset.expressions) || (TCollections.Equals(Expressions, other.Expressions))))
        && ((__isset.order_by == other.__isset.order_by) && ((!__isset.order_by) || (TCollections.Equals(Order_by, other.Order_by))))
        && ((__isset.random == other.__isset.random) && ((!__isset.random) || (System.Object.Equals(Random, other.Random))))
        && ((__isset.limit == other.__isset.limit) && ((!__isset.limit) || (System.Object.Equals(Limit, other.Limit))))
        && ((__isset.filter == other.__isset.filter) && ((!__isset.filter) || (TCollections.Equals(Filter, other.Filter))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Edge_types != null) && __isset.edge_types)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Edge_types);
        }
        if(__isset.edge_direction)
        {
          hashcode = (hashcode * 397) + Edge_direction.GetHashCode();
        }
        if(__isset.dedup)
        {
          hashcode = (hashcode * 397) + Dedup.GetHashCode();
        }
        if((Stat_props != null) && __isset.stat_props)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Stat_props);
        }
        if((Vertex_props != null) && __isset.vertex_props)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Vertex_props);
        }
        if((Edge_props != null) && __isset.edge_props)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Edge_props);
        }
        if((Expressions != null) && __isset.expressions)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Expressions);
        }
        if((Order_by != null) && __isset.order_by)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Order_by);
        }
        if(__isset.random)
        {
          hashcode = (hashcode * 397) + Random.GetHashCode();
        }
        if(__isset.limit)
        {
          hashcode = (hashcode * 397) + Limit.GetHashCode();
        }
        if((Filter != null) && __isset.filter)
        {
          hashcode = (hashcode * 397) + Filter.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp84 = new StringBuilder("TraverseSpec(");
      int tmp85 = 0;
      if((Edge_types != null) && __isset.edge_types)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Edge_types: ");
        Edge_types.ToString(tmp84);
      }
      if(__isset.edge_direction)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Edge_direction: ");
        Edge_direction.ToString(tmp84);
      }
      if(__isset.dedup)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Dedup: ");
        Dedup.ToString(tmp84);
      }
      if((Stat_props != null) && __isset.stat_props)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Stat_props: ");
        Stat_props.ToString(tmp84);
      }
      if((Vertex_props != null) && __isset.vertex_props)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Vertex_props: ");
        Vertex_props.ToString(tmp84);
      }
      if((Edge_props != null) && __isset.edge_props)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Edge_props: ");
        Edge_props.ToString(tmp84);
      }
      if((Expressions != null) && __isset.expressions)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Expressions: ");
        Expressions.ToString(tmp84);
      }
      if((Order_by != null) && __isset.order_by)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Order_by: ");
        Order_by.ToString(tmp84);
      }
      if(__isset.random)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Random: ");
        Random.ToString(tmp84);
      }
      if(__isset.limit)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Limit: ");
        Limit.ToString(tmp84);
      }
      if((Filter != null) && __isset.filter)
      {
        if(0 < tmp85++) { tmp84.Append(", "); }
        tmp84.Append("Filter: ");
        Filter.ToString(tmp84);
      }
      tmp84.Append(')');
      return tmp84.ToString();
    }
  }

}
