/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class GetLeaderPartsResp : TBase
  {
    private Dictionary<int, List<int>> _leader_parts;

    public global::Nebula.Storage.ResponseCommon Result { get; set; }

    public Dictionary<int, List<int>> Leader_parts
    {
      get
      {
        return _leader_parts;
      }
      set
      {
        __isset.leader_parts = true;
        this._leader_parts = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool leader_parts;
    }

    public GetLeaderPartsResp()
    {
    }

    public GetLeaderPartsResp(global::Nebula.Storage.ResponseCommon result) : this()
    {
      this.Result = result;
    }

    public GetLeaderPartsResp DeepCopy()
    {
      var tmp470 = new GetLeaderPartsResp();
      if((Result != null))
      {
        tmp470.Result = (global::Nebula.Storage.ResponseCommon)this.Result.DeepCopy();
      }
      if((Leader_parts != null) && __isset.leader_parts)
      {
        tmp470.Leader_parts = this.Leader_parts.DeepCopy();
      }
      tmp470.__isset.leader_parts = this.__isset.leader_parts;
      return tmp470;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_result = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Result = new global::Nebula.Storage.ResponseCommon();
                await Result.ReadAsync(iprot, cancellationToken);
                isset_result = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map471 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Leader_parts = new Dictionary<int, List<int>>(_map471.Count);
                  for(int _i472 = 0; _i472 < _map471.Count; ++_i472)
                  {
                    int _key473;
                    List<int> _val474;
                    _key473 = await iprot.ReadI32Async(cancellationToken);
                    {
                      TList _list475 = await iprot.ReadListBeginAsync(cancellationToken);
                      _val474 = new List<int>(_list475.Count);
                      for(int _i476 = 0; _i476 < _list475.Count; ++_i476)
                      {
                        int _elem477;
                        _elem477 = await iprot.ReadI32Async(cancellationToken);
                        _val474.Add(_elem477);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Leader_parts[_key473] = _val474;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_result)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp478 = new TStruct("GetLeaderPartsResp");
        await oprot.WriteStructBeginAsync(tmp478, cancellationToken);
        var tmp479 = new TField();
        if((Result != null))
        {
          tmp479.Name = "result";
          tmp479.Type = TType.Struct;
          tmp479.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp479, cancellationToken);
          await Result.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Leader_parts != null) && __isset.leader_parts)
        {
          tmp479.Name = "leader_parts";
          tmp479.Type = TType.Map;
          tmp479.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp479, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.List, Leader_parts.Count), cancellationToken);
            foreach (int _iter480 in Leader_parts.Keys)
            {
              await oprot.WriteI32Async(_iter480, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.I32, Leader_parts[_iter480].Count), cancellationToken);
                foreach (int _iter481 in Leader_parts[_iter480])
                {
                  await oprot.WriteI32Async(_iter481, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is GetLeaderPartsResp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Result, other.Result)
        && ((__isset.leader_parts == other.__isset.leader_parts) && ((!__isset.leader_parts) || (TCollections.Equals(Leader_parts, other.Leader_parts))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Result != null))
        {
          hashcode = (hashcode * 397) + Result.GetHashCode();
        }
        if((Leader_parts != null) && __isset.leader_parts)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Leader_parts);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp482 = new StringBuilder("GetLeaderPartsResp(");
      if((Result != null))
      {
        tmp482.Append(", Result: ");
        Result.ToString(tmp482);
      }
      if((Leader_parts != null) && __isset.leader_parts)
      {
        tmp482.Append(", Leader_parts: ");
        Leader_parts.ToString(tmp482);
      }
      tmp482.Append(')');
      return tmp482.ToString();
    }
  }

}
