/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class Expr : TBase
  {
    private byte[] _ExprAlias;
    private byte[] _expr;

    public byte[] ExprAlias
    {
      get
      {
        return _ExprAlias;
      }
      set
      {
        __isset.ExprAlias = true;
        this._ExprAlias = value;
      }
    }

    public byte[] Expr_
    {
      get
      {
        return _expr;
      }
      set
      {
        __isset.expr = true;
        this._expr = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ExprAlias;
      public bool expr;
    }

    public Expr()
    {
    }

    public Expr DeepCopy()
    {
      var tmp29 = new Expr();
      if((ExprAlias != null) && __isset.ExprAlias)
      {
        tmp29.ExprAlias = this.ExprAlias.ToArray();
      }
      tmp29.__isset.ExprAlias = this.__isset.ExprAlias;
      if((Expr_ != null) && __isset.expr)
      {
        tmp29.Expr_ = this.Expr_.ToArray();
      }
      tmp29.__isset.expr = this.__isset.expr;
      return tmp29;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ExprAlias = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Expr_ = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp30 = new TStruct("Expr");
        await oprot.WriteStructBeginAsync(tmp30, cancellationToken);
        var tmp31 = new TField();
        if((ExprAlias != null) && __isset.ExprAlias)
        {
          tmp31.Name = "ExprAlias";
          tmp31.Type = TType.String;
          tmp31.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteBinaryAsync(ExprAlias, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Expr_ != null) && __isset.expr)
        {
          tmp31.Name = "expr";
          tmp31.Type = TType.String;
          tmp31.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteBinaryAsync(Expr_, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Expr other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ExprAlias == other.__isset.ExprAlias) && ((!__isset.ExprAlias) || (TCollections.Equals(ExprAlias, other.ExprAlias))))
        && ((__isset.expr == other.__isset.expr) && ((!__isset.expr) || (TCollections.Equals(Expr_, other.Expr_))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ExprAlias != null) && __isset.ExprAlias)
        {
          hashcode = (hashcode * 397) + ExprAlias.GetHashCode();
        }
        if((Expr_ != null) && __isset.expr)
        {
          hashcode = (hashcode * 397) + Expr_.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp32 = new StringBuilder("Expr(");
      int tmp33 = 0;
      if((ExprAlias != null) && __isset.ExprAlias)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("ExprAlias: ");
        ExprAlias.ToString(tmp32);
      }
      if((Expr_ != null) && __isset.expr)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("Expr_: ");
        Expr_.ToString(tmp32);
      }
      tmp32.Append(')');
      return tmp32.ToString();
    }
  }

}
