/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class StopAdminTaskRequest : TBase
  {
    private int _job_id;
    private int _task_id;

    public int Job_id
    {
      get
      {
        return _job_id;
      }
      set
      {
        __isset.job_id = true;
        this._job_id = value;
      }
    }

    public int Task_id
    {
      get
      {
        return _task_id;
      }
      set
      {
        __isset.task_id = true;
        this._task_id = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool job_id;
      public bool task_id;
    }

    public StopAdminTaskRequest()
    {
    }

    public StopAdminTaskRequest DeepCopy()
    {
      var tmp407 = new StopAdminTaskRequest();
      if(__isset.job_id)
      {
        tmp407.Job_id = this.Job_id;
      }
      tmp407.__isset.job_id = this.__isset.job_id;
      if(__isset.task_id)
      {
        tmp407.Task_id = this.Task_id;
      }
      tmp407.__isset.task_id = this.__isset.task_id;
      return tmp407;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Job_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Task_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp408 = new TStruct("StopAdminTaskRequest");
        await oprot.WriteStructBeginAsync(tmp408, cancellationToken);
        var tmp409 = new TField();
        if(__isset.job_id)
        {
          tmp409.Name = "job_id";
          tmp409.Type = TType.I32;
          tmp409.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp409, cancellationToken);
          await oprot.WriteI32Async(Job_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.task_id)
        {
          tmp409.Name = "task_id";
          tmp409.Type = TType.I32;
          tmp409.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp409, cancellationToken);
          await oprot.WriteI32Async(Task_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is StopAdminTaskRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.job_id == other.__isset.job_id) && ((!__isset.job_id) || (System.Object.Equals(Job_id, other.Job_id))))
        && ((__isset.task_id == other.__isset.task_id) && ((!__isset.task_id) || (System.Object.Equals(Task_id, other.Task_id))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.job_id)
        {
          hashcode = (hashcode * 397) + Job_id.GetHashCode();
        }
        if(__isset.task_id)
        {
          hashcode = (hashcode * 397) + Task_id.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp410 = new StringBuilder("StopAdminTaskRequest(");
      int tmp411 = 0;
      if(__isset.job_id)
      {
        if(0 < tmp411++) { tmp410.Append(", "); }
        tmp410.Append("Job_id: ");
        Job_id.ToString(tmp410);
      }
      if(__isset.task_id)
      {
        if(0 < tmp411++) { tmp410.Append(", "); }
        tmp410.Append("Task_id: ");
        Task_id.ToString(tmp410);
      }
      tmp410.Append(')');
      return tmp410.ToString();
    }
  }

}
