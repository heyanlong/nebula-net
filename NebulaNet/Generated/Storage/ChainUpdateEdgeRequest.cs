/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class ChainUpdateEdgeRequest : TBase
  {
    private global::Nebula.Storage.UpdateEdgeRequest _update_edge_request;
    private long _term;
    private long _edge_version;
    private int _space_id;

    public global::Nebula.Storage.UpdateEdgeRequest Update_edge_request
    {
      get
      {
        return _update_edge_request;
      }
      set
      {
        __isset.update_edge_request = true;
        this._update_edge_request = value;
      }
    }

    public long Term
    {
      get
      {
        return _term;
      }
      set
      {
        __isset.term = true;
        this._term = value;
      }
    }

    public long Edge_version
    {
      get
      {
        return _edge_version;
      }
      set
      {
        __isset.edge_version = true;
        this._edge_version = value;
      }
    }

    public int Space_id
    {
      get
      {
        return _space_id;
      }
      set
      {
        __isset.space_id = true;
        this._space_id = value;
      }
    }

    public List<int> Parts { get; set; }


    public Isset __isset;
    public struct Isset
    {
      public bool update_edge_request;
      public bool term;
      public bool edge_version;
      public bool space_id;
    }

    public ChainUpdateEdgeRequest()
    {
    }

    public ChainUpdateEdgeRequest(List<int> parts) : this()
    {
      this.Parts = parts;
    }

    public ChainUpdateEdgeRequest DeepCopy()
    {
      var tmp609 = new ChainUpdateEdgeRequest();
      if((Update_edge_request != null) && __isset.update_edge_request)
      {
        tmp609.Update_edge_request = (global::Nebula.Storage.UpdateEdgeRequest)this.Update_edge_request.DeepCopy();
      }
      tmp609.__isset.update_edge_request = this.__isset.update_edge_request;
      if(__isset.term)
      {
        tmp609.Term = this.Term;
      }
      tmp609.__isset.term = this.__isset.term;
      if(__isset.edge_version)
      {
        tmp609.Edge_version = this.Edge_version;
      }
      tmp609.__isset.edge_version = this.__isset.edge_version;
      if(__isset.space_id)
      {
        tmp609.Space_id = this.Space_id;
      }
      tmp609.__isset.space_id = this.__isset.space_id;
      if((Parts != null))
      {
        tmp609.Parts = this.Parts.DeepCopy();
      }
      return tmp609;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_parts = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Update_edge_request = new global::Nebula.Storage.UpdateEdgeRequest();
                await Update_edge_request.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Term = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Edge_version = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list610 = await iprot.ReadListBeginAsync(cancellationToken);
                  Parts = new List<int>(_list610.Count);
                  for(int _i611 = 0; _i611 < _list610.Count; ++_i611)
                  {
                    int _elem612;
                    _elem612 = await iprot.ReadI32Async(cancellationToken);
                    Parts.Add(_elem612);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_parts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_parts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp613 = new TStruct("ChainUpdateEdgeRequest");
        await oprot.WriteStructBeginAsync(tmp613, cancellationToken);
        var tmp614 = new TField();
        if((Update_edge_request != null) && __isset.update_edge_request)
        {
          tmp614.Name = "update_edge_request";
          tmp614.Type = TType.Struct;
          tmp614.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
          await Update_edge_request.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.term)
        {
          tmp614.Name = "term";
          tmp614.Type = TType.I64;
          tmp614.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
          await oprot.WriteI64Async(Term, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.edge_version)
        {
          tmp614.Name = "edge_version";
          tmp614.Type = TType.I64;
          tmp614.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
          await oprot.WriteI64Async(Edge_version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.space_id)
        {
          tmp614.Name = "space_id";
          tmp614.Type = TType.I32;
          tmp614.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
          await oprot.WriteI32Async(Space_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Parts != null))
        {
          tmp614.Name = "parts";
          tmp614.Type = TType.List;
          tmp614.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp614, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, Parts.Count), cancellationToken);
            foreach (int _iter615 in Parts)
            {
              await oprot.WriteI32Async(_iter615, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ChainUpdateEdgeRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.update_edge_request == other.__isset.update_edge_request) && ((!__isset.update_edge_request) || (System.Object.Equals(Update_edge_request, other.Update_edge_request))))
        && ((__isset.term == other.__isset.term) && ((!__isset.term) || (System.Object.Equals(Term, other.Term))))
        && ((__isset.edge_version == other.__isset.edge_version) && ((!__isset.edge_version) || (System.Object.Equals(Edge_version, other.Edge_version))))
        && ((__isset.space_id == other.__isset.space_id) && ((!__isset.space_id) || (System.Object.Equals(Space_id, other.Space_id))))
        && TCollections.Equals(Parts, other.Parts);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Update_edge_request != null) && __isset.update_edge_request)
        {
          hashcode = (hashcode * 397) + Update_edge_request.GetHashCode();
        }
        if(__isset.term)
        {
          hashcode = (hashcode * 397) + Term.GetHashCode();
        }
        if(__isset.edge_version)
        {
          hashcode = (hashcode * 397) + Edge_version.GetHashCode();
        }
        if(__isset.space_id)
        {
          hashcode = (hashcode * 397) + Space_id.GetHashCode();
        }
        if((Parts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Parts);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp616 = new StringBuilder("ChainUpdateEdgeRequest(");
      int tmp617 = 0;
      if((Update_edge_request != null) && __isset.update_edge_request)
      {
        if(0 < tmp617++) { tmp616.Append(", "); }
        tmp616.Append("Update_edge_request: ");
        Update_edge_request.ToString(tmp616);
      }
      if(__isset.term)
      {
        if(0 < tmp617++) { tmp616.Append(", "); }
        tmp616.Append("Term: ");
        Term.ToString(tmp616);
      }
      if(__isset.edge_version)
      {
        if(0 < tmp617++) { tmp616.Append(", "); }
        tmp616.Append("Edge_version: ");
        Edge_version.ToString(tmp616);
      }
      if(__isset.space_id)
      {
        if(0 < tmp617++) { tmp616.Append(", "); }
        tmp616.Append("Space_id: ");
        Space_id.ToString(tmp616);
      }
      if((Parts != null))
      {
        if(0 < tmp617) { tmp616.Append(", "); }
        tmp616.Append("Parts: ");
        Parts.ToString(tmp616);
      }
      tmp616.Append(')');
      return tmp616.ToString();
    }
  }

}
