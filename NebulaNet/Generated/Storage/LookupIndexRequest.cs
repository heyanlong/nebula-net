/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class LookupIndexRequest : TBase
  {
    private global::Nebula.Storage.IndexSpec _indices;
    private List<byte[]> _return_columns;
    private global::Nebula.Storage.RequestCommon _common;
    private long _limit;

    public int Space_id { get; set; }

    public List<int> Parts { get; set; }

    public global::Nebula.Storage.IndexSpec Indices
    {
      get
      {
        return _indices;
      }
      set
      {
        __isset.indices = true;
        this._indices = value;
      }
    }

    public List<byte[]> Return_columns
    {
      get
      {
        return _return_columns;
      }
      set
      {
        __isset.return_columns = true;
        this._return_columns = value;
      }
    }

    public global::Nebula.Storage.RequestCommon Common
    {
      get
      {
        return _common;
      }
      set
      {
        __isset.common = true;
        this._common = value;
      }
    }

    public long Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool indices;
      public bool return_columns;
      public bool common;
      public bool limit;
    }

    public LookupIndexRequest()
    {
    }

    public LookupIndexRequest(int space_id, List<int> parts) : this()
    {
      this.Space_id = space_id;
      this.Parts = parts;
    }

    public LookupIndexRequest DeepCopy()
    {
      var tmp347 = new LookupIndexRequest();
      tmp347.Space_id = this.Space_id;
      if((Parts != null))
      {
        tmp347.Parts = this.Parts.DeepCopy();
      }
      if((Indices != null) && __isset.indices)
      {
        tmp347.Indices = (global::Nebula.Storage.IndexSpec)this.Indices.DeepCopy();
      }
      tmp347.__isset.indices = this.__isset.indices;
      if((Return_columns != null) && __isset.return_columns)
      {
        tmp347.Return_columns = this.Return_columns.DeepCopy();
      }
      tmp347.__isset.return_columns = this.__isset.return_columns;
      if((Common != null) && __isset.common)
      {
        tmp347.Common = (global::Nebula.Storage.RequestCommon)this.Common.DeepCopy();
      }
      tmp347.__isset.common = this.__isset.common;
      if(__isset.limit)
      {
        tmp347.Limit = this.Limit;
      }
      tmp347.__isset.limit = this.__isset.limit;
      return tmp347;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_space_id = false;
        bool isset_parts = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
                isset_space_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list348 = await iprot.ReadListBeginAsync(cancellationToken);
                  Parts = new List<int>(_list348.Count);
                  for(int _i349 = 0; _i349 < _list348.Count; ++_i349)
                  {
                    int _elem350;
                    _elem350 = await iprot.ReadI32Async(cancellationToken);
                    Parts.Add(_elem350);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_parts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Indices = new global::Nebula.Storage.IndexSpec();
                await Indices.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list351 = await iprot.ReadListBeginAsync(cancellationToken);
                  Return_columns = new List<byte[]>(_list351.Count);
                  for(int _i352 = 0; _i352 < _list351.Count; ++_i352)
                  {
                    byte[] _elem353;
                    _elem353 = await iprot.ReadBinaryAsync(cancellationToken);
                    Return_columns.Add(_elem353);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Common = new global::Nebula.Storage.RequestCommon();
                await Common.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Limit = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_space_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_parts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp354 = new TStruct("LookupIndexRequest");
        await oprot.WriteStructBeginAsync(tmp354, cancellationToken);
        var tmp355 = new TField();
        tmp355.Name = "space_id";
        tmp355.Type = TType.I32;
        tmp355.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp355, cancellationToken);
        await oprot.WriteI32Async(Space_id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Parts != null))
        {
          tmp355.Name = "parts";
          tmp355.Type = TType.List;
          tmp355.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp355, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, Parts.Count), cancellationToken);
            foreach (int _iter356 in Parts)
            {
              await oprot.WriteI32Async(_iter356, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Indices != null) && __isset.indices)
        {
          tmp355.Name = "indices";
          tmp355.Type = TType.Struct;
          tmp355.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp355, cancellationToken);
          await Indices.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Return_columns != null) && __isset.return_columns)
        {
          tmp355.Name = "return_columns";
          tmp355.Type = TType.List;
          tmp355.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp355, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Return_columns.Count), cancellationToken);
            foreach (byte[] _iter357 in Return_columns)
            {
              await oprot.WriteBinaryAsync(_iter357, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Common != null) && __isset.common)
        {
          tmp355.Name = "common";
          tmp355.Type = TType.Struct;
          tmp355.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp355, cancellationToken);
          await Common.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.limit)
        {
          tmp355.Name = "limit";
          tmp355.Type = TType.I64;
          tmp355.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp355, cancellationToken);
          await oprot.WriteI64Async(Limit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LookupIndexRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Space_id, other.Space_id)
        && TCollections.Equals(Parts, other.Parts)
        && ((__isset.indices == other.__isset.indices) && ((!__isset.indices) || (System.Object.Equals(Indices, other.Indices))))
        && ((__isset.return_columns == other.__isset.return_columns) && ((!__isset.return_columns) || (TCollections.Equals(Return_columns, other.Return_columns))))
        && ((__isset.common == other.__isset.common) && ((!__isset.common) || (System.Object.Equals(Common, other.Common))))
        && ((__isset.limit == other.__isset.limit) && ((!__isset.limit) || (System.Object.Equals(Limit, other.Limit))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Space_id.GetHashCode();
        if((Parts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Parts);
        }
        if((Indices != null) && __isset.indices)
        {
          hashcode = (hashcode * 397) + Indices.GetHashCode();
        }
        if((Return_columns != null) && __isset.return_columns)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Return_columns);
        }
        if((Common != null) && __isset.common)
        {
          hashcode = (hashcode * 397) + Common.GetHashCode();
        }
        if(__isset.limit)
        {
          hashcode = (hashcode * 397) + Limit.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp358 = new StringBuilder("LookupIndexRequest(");
      tmp358.Append(", Space_id: ");
      Space_id.ToString(tmp358);
      if((Parts != null))
      {
        tmp358.Append(", Parts: ");
        Parts.ToString(tmp358);
      }
      if((Indices != null) && __isset.indices)
      {
        tmp358.Append(", Indices: ");
        Indices.ToString(tmp358);
      }
      if((Return_columns != null) && __isset.return_columns)
      {
        tmp358.Append(", Return_columns: ");
        Return_columns.ToString(tmp358);
      }
      if((Common != null) && __isset.common)
      {
        tmp358.Append(", Common: ");
        Common.ToString(tmp358);
      }
      if(__isset.limit)
      {
        tmp358.Append(", Limit: ");
        Limit.ToString(tmp358);
      }
      tmp358.Append(')');
      return tmp358.ToString();
    }
  }

}
