/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class ConfigItem : TBase
  {
    private global::Nebula.Meta.ConfigModule _ConfigModule;
    private byte[] _name;
    private global::Nebula.Meta.ConfigMode _mode;
    private global::Nebula.Common.@Value _value;

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.ConfigModule"/>
    /// </summary>
    public global::Nebula.Meta.ConfigModule ConfigModule
    {
      get
      {
        return _ConfigModule;
      }
      set
      {
        __isset.ConfigModule = true;
        this._ConfigModule = value;
      }
    }

    public byte[] Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.ConfigMode"/>
    /// </summary>
    public global::Nebula.Meta.ConfigMode Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public global::Nebula.Common.@Value Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ConfigModule;
      public bool name;
      public bool mode;
      public bool @value;
    }

    public ConfigItem()
    {
    }

    public ConfigItem DeepCopy()
    {
      var tmp639 = new ConfigItem();
      if(__isset.ConfigModule)
      {
        tmp639.ConfigModule = this.ConfigModule;
      }
      tmp639.__isset.ConfigModule = this.__isset.ConfigModule;
      if((Name != null) && __isset.name)
      {
        tmp639.Name = this.Name.ToArray();
      }
      tmp639.__isset.name = this.__isset.name;
      if(__isset.mode)
      {
        tmp639.Mode = this.Mode;
      }
      tmp639.__isset.mode = this.__isset.mode;
      if((Value != null) && __isset.@value)
      {
        tmp639.Value = (global::Nebula.Common.@Value)this.Value.DeepCopy();
      }
      tmp639.__isset.@value = this.__isset.@value;
      return tmp639;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                ConfigModule = (global::Nebula.Meta.ConfigModule)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Mode = (global::Nebula.Meta.ConfigMode)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Value = new global::Nebula.Common.@Value();
                await Value.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp640 = new TStruct("ConfigItem");
        await oprot.WriteStructBeginAsync(tmp640, cancellationToken);
        var tmp641 = new TField();
        if(__isset.ConfigModule)
        {
          tmp641.Name = "ConfigModule";
          tmp641.Type = TType.I32;
          tmp641.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp641, cancellationToken);
          await oprot.WriteI32Async((int)ConfigModule, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp641.Name = "name";
          tmp641.Type = TType.String;
          tmp641.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp641, cancellationToken);
          await oprot.WriteBinaryAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.mode)
        {
          tmp641.Name = "mode";
          tmp641.Type = TType.I32;
          tmp641.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp641, cancellationToken);
          await oprot.WriteI32Async((int)Mode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Value != null) && __isset.@value)
        {
          tmp641.Name = "value";
          tmp641.Type = TType.Struct;
          tmp641.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp641, cancellationToken);
          await Value.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ConfigItem other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ConfigModule == other.__isset.ConfigModule) && ((!__isset.ConfigModule) || (System.Object.Equals(ConfigModule, other.ConfigModule))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (TCollections.Equals(Name, other.Name))))
        && ((__isset.mode == other.__isset.mode) && ((!__isset.mode) || (System.Object.Equals(Mode, other.Mode))))
        && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (System.Object.Equals(Value, other.Value))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ConfigModule)
        {
          hashcode = (hashcode * 397) + ConfigModule.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if(__isset.mode)
        {
          hashcode = (hashcode * 397) + Mode.GetHashCode();
        }
        if((Value != null) && __isset.@value)
        {
          hashcode = (hashcode * 397) + Value.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp642 = new StringBuilder("ConfigItem(");
      int tmp643 = 0;
      if(__isset.ConfigModule)
      {
        if(0 < tmp643++) { tmp642.Append(", "); }
        tmp642.Append("ConfigModule: ");
        ConfigModule.ToString(tmp642);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp643++) { tmp642.Append(", "); }
        tmp642.Append("Name: ");
        Name.ToString(tmp642);
      }
      if(__isset.mode)
      {
        if(0 < tmp643++) { tmp642.Append(", "); }
        tmp642.Append("Mode: ");
        Mode.ToString(tmp642);
      }
      if((Value != null) && __isset.@value)
      {
        if(0 < tmp643++) { tmp642.Append(", "); }
        tmp642.Append("Value: ");
        Value.ToString(tmp642);
      }
      tmp642.Append(')');
      return tmp642.ToString();
    }
  }

}
