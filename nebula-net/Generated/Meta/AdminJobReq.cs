/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class AdminJobReq : TBase
  {
    private global::Nebula.Meta.AdminJobOp _op;
    private global::Nebula.Meta.AdminCmd _cmd;
    private List<byte[]> _paras;

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.AdminJobOp"/>
    /// </summary>
    public global::Nebula.Meta.AdminJobOp Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public global::Nebula.Meta.AdminCmd Cmd
    {
      get
      {
        return _cmd;
      }
      set
      {
        __isset.cmd = true;
        this._cmd = value;
      }
    }

    public List<byte[]> Paras
    {
      get
      {
        return _paras;
      }
      set
      {
        __isset.paras = true;
        this._paras = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool op;
      public bool cmd;
      public bool paras;
    }

    public AdminJobReq()
    {
    }

    public AdminJobReq DeepCopy()
    {
      var tmp106 = new AdminJobReq();
      if(__isset.op)
      {
        tmp106.Op = this.Op;
      }
      tmp106.__isset.op = this.__isset.op;
      if(__isset.cmd)
      {
        tmp106.Cmd = this.Cmd;
      }
      tmp106.__isset.cmd = this.__isset.cmd;
      if((Paras != null) && __isset.paras)
      {
        tmp106.Paras = this.Paras.DeepCopy();
      }
      tmp106.__isset.paras = this.__isset.paras;
      return tmp106;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Op = (global::Nebula.Meta.AdminJobOp)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Cmd = (global::Nebula.Meta.AdminCmd)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list107 = await iprot.ReadListBeginAsync(cancellationToken);
                  Paras = new List<byte[]>(_list107.Count);
                  for(int _i108 = 0; _i108 < _list107.Count; ++_i108)
                  {
                    byte[] _elem109;
                    _elem109 = await iprot.ReadBinaryAsync(cancellationToken);
                    Paras.Add(_elem109);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp110 = new TStruct("AdminJobReq");
        await oprot.WriteStructBeginAsync(tmp110, cancellationToken);
        var tmp111 = new TField();
        if(__isset.op)
        {
          tmp111.Name = "op";
          tmp111.Type = TType.I32;
          tmp111.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp111, cancellationToken);
          await oprot.WriteI32Async((int)Op, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.cmd)
        {
          tmp111.Name = "cmd";
          tmp111.Type = TType.I32;
          tmp111.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp111, cancellationToken);
          await oprot.WriteI32Async((int)Cmd, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Paras != null) && __isset.paras)
        {
          tmp111.Name = "paras";
          tmp111.Type = TType.List;
          tmp111.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp111, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Paras.Count), cancellationToken);
            foreach (byte[] _iter112 in Paras)
            {
              await oprot.WriteBinaryAsync(_iter112, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is AdminJobReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.op == other.__isset.op) && ((!__isset.op) || (System.Object.Equals(Op, other.Op))))
        && ((__isset.cmd == other.__isset.cmd) && ((!__isset.cmd) || (System.Object.Equals(Cmd, other.Cmd))))
        && ((__isset.paras == other.__isset.paras) && ((!__isset.paras) || (TCollections.Equals(Paras, other.Paras))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.op)
        {
          hashcode = (hashcode * 397) + Op.GetHashCode();
        }
        if(__isset.cmd)
        {
          hashcode = (hashcode * 397) + Cmd.GetHashCode();
        }
        if((Paras != null) && __isset.paras)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Paras);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp113 = new StringBuilder("AdminJobReq(");
      int tmp114 = 0;
      if(__isset.op)
      {
        if(0 < tmp114++) { tmp113.Append(", "); }
        tmp113.Append("Op: ");
        Op.ToString(tmp113);
      }
      if(__isset.cmd)
      {
        if(0 < tmp114++) { tmp113.Append(", "); }
        tmp113.Append("Cmd: ");
        Cmd.ToString(tmp113);
      }
      if((Paras != null) && __isset.paras)
      {
        if(0 < tmp114++) { tmp113.Append(", "); }
        tmp113.Append("Paras: ");
        Paras.ToString(tmp113);
      }
      tmp113.Append(')');
      return tmp113.ToString();
    }
  }

}
