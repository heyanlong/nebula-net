/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class GetGroupReq : TBase
  {
    private byte[] _group_name;

    public byte[] Group_name
    {
      get
      {
        return _group_name;
      }
      set
      {
        __isset.group_name = true;
        this._group_name = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool group_name;
    }

    public GetGroupReq()
    {
    }

    public GetGroupReq DeepCopy()
    {
      var tmp816 = new GetGroupReq();
      if((Group_name != null) && __isset.group_name)
      {
        tmp816.Group_name = this.Group_name.ToArray();
      }
      tmp816.__isset.group_name = this.__isset.group_name;
      return tmp816;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Group_name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp817 = new TStruct("GetGroupReq");
        await oprot.WriteStructBeginAsync(tmp817, cancellationToken);
        var tmp818 = new TField();
        if((Group_name != null) && __isset.group_name)
        {
          tmp818.Name = "group_name";
          tmp818.Type = TType.String;
          tmp818.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp818, cancellationToken);
          await oprot.WriteBinaryAsync(Group_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is GetGroupReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.group_name == other.__isset.group_name) && ((!__isset.group_name) || (TCollections.Equals(Group_name, other.Group_name))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Group_name != null) && __isset.group_name)
        {
          hashcode = (hashcode * 397) + Group_name.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp819 = new StringBuilder("GetGroupReq(");
      int tmp820 = 0;
      if((Group_name != null) && __isset.group_name)
      {
        if(0 < tmp820++) { tmp819.Append(", "); }
        tmp819.Append("Group_name: ");
        Group_name.ToString(tmp819);
      }
      tmp819.Append(')');
      return tmp819.ToString();
    }
  }

}
