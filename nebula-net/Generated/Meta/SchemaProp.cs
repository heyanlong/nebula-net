/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class SchemaProp : TBase
  {
    private long _ttl_duration;
    private byte[] _ttl_col;
    private byte[] _comment;

    public long Ttl_duration
    {
      get
      {
        return _ttl_duration;
      }
      set
      {
        __isset.ttl_duration = true;
        this._ttl_duration = value;
      }
    }

    public byte[] Ttl_col
    {
      get
      {
        return _ttl_col;
      }
      set
      {
        __isset.ttl_col = true;
        this._ttl_col = value;
      }
    }

    public byte[] Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ttl_duration;
      public bool ttl_col;
      public bool comment;
    }

    public SchemaProp()
    {
    }

    public SchemaProp DeepCopy()
    {
      var tmp15 = new SchemaProp();
      if(__isset.ttl_duration)
      {
        tmp15.Ttl_duration = this.Ttl_duration;
      }
      tmp15.__isset.ttl_duration = this.__isset.ttl_duration;
      if((Ttl_col != null) && __isset.ttl_col)
      {
        tmp15.Ttl_col = this.Ttl_col.ToArray();
      }
      tmp15.__isset.ttl_col = this.__isset.ttl_col;
      if((Comment != null) && __isset.comment)
      {
        tmp15.Comment = this.Comment.ToArray();
      }
      tmp15.__isset.comment = this.__isset.comment;
      return tmp15;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Ttl_duration = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Ttl_col = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Comment = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp16 = new TStruct("SchemaProp");
        await oprot.WriteStructBeginAsync(tmp16, cancellationToken);
        var tmp17 = new TField();
        if(__isset.ttl_duration)
        {
          tmp17.Name = "ttl_duration";
          tmp17.Type = TType.I64;
          tmp17.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteI64Async(Ttl_duration, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Ttl_col != null) && __isset.ttl_col)
        {
          tmp17.Name = "ttl_col";
          tmp17.Type = TType.String;
          tmp17.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBinaryAsync(Ttl_col, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Comment != null) && __isset.comment)
        {
          tmp17.Name = "comment";
          tmp17.Type = TType.String;
          tmp17.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await oprot.WriteBinaryAsync(Comment, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SchemaProp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ttl_duration == other.__isset.ttl_duration) && ((!__isset.ttl_duration) || (System.Object.Equals(Ttl_duration, other.Ttl_duration))))
        && ((__isset.ttl_col == other.__isset.ttl_col) && ((!__isset.ttl_col) || (TCollections.Equals(Ttl_col, other.Ttl_col))))
        && ((__isset.comment == other.__isset.comment) && ((!__isset.comment) || (TCollections.Equals(Comment, other.Comment))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ttl_duration)
        {
          hashcode = (hashcode * 397) + Ttl_duration.GetHashCode();
        }
        if((Ttl_col != null) && __isset.ttl_col)
        {
          hashcode = (hashcode * 397) + Ttl_col.GetHashCode();
        }
        if((Comment != null) && __isset.comment)
        {
          hashcode = (hashcode * 397) + Comment.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp18 = new StringBuilder("SchemaProp(");
      int tmp19 = 0;
      if(__isset.ttl_duration)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Ttl_duration: ");
        Ttl_duration.ToString(tmp18);
      }
      if((Ttl_col != null) && __isset.ttl_col)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Ttl_col: ");
        Ttl_col.ToString(tmp18);
      }
      if((Comment != null) && __isset.comment)
      {
        if(0 < tmp19++) { tmp18.Append(", "); }
        tmp18.Append("Comment: ");
        Comment.ToString(tmp18);
      }
      tmp18.Append(')');
      return tmp18.ToString();
    }
  }

}
