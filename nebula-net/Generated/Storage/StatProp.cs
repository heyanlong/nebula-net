/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class StatProp : TBase
  {
    private byte[] _StatAlias;
    private byte[] _prop;
    private global::Nebula.Storage.StatType _stat;

    public byte[] StatAlias
    {
      get
      {
        return _StatAlias;
      }
      set
      {
        __isset.StatAlias = true;
        this._StatAlias = value;
      }
    }

    public byte[] Prop
    {
      get
      {
        return _prop;
      }
      set
      {
        __isset.prop = true;
        this._prop = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Storage.StatType"/>
    /// </summary>
    public global::Nebula.Storage.StatType Stat
    {
      get
      {
        return _stat;
      }
      set
      {
        __isset.stat = true;
        this._stat = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool StatAlias;
      public bool prop;
      public bool stat;
    }

    public StatProp()
    {
    }

    public StatProp DeepCopy()
    {
      var tmp24 = new StatProp();
      if((StatAlias != null) && __isset.StatAlias)
      {
        tmp24.StatAlias = this.StatAlias.ToArray();
      }
      tmp24.__isset.StatAlias = this.__isset.StatAlias;
      if((Prop != null) && __isset.prop)
      {
        tmp24.Prop = this.Prop.ToArray();
      }
      tmp24.__isset.prop = this.__isset.prop;
      if(__isset.stat)
      {
        tmp24.Stat = this.Stat;
      }
      tmp24.__isset.stat = this.__isset.stat;
      return tmp24;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                StatAlias = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Prop = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Stat = (global::Nebula.Storage.StatType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp25 = new TStruct("StatProp");
        await oprot.WriteStructBeginAsync(tmp25, cancellationToken);
        var tmp26 = new TField();
        if((StatAlias != null) && __isset.StatAlias)
        {
          tmp26.Name = "StatAlias";
          tmp26.Type = TType.String;
          tmp26.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteBinaryAsync(StatAlias, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Prop != null) && __isset.prop)
        {
          tmp26.Name = "prop";
          tmp26.Type = TType.String;
          tmp26.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteBinaryAsync(Prop, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.stat)
        {
          tmp26.Name = "stat";
          tmp26.Type = TType.I32;
          tmp26.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI32Async((int)Stat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is StatProp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.StatAlias == other.__isset.StatAlias) && ((!__isset.StatAlias) || (TCollections.Equals(StatAlias, other.StatAlias))))
        && ((__isset.prop == other.__isset.prop) && ((!__isset.prop) || (TCollections.Equals(Prop, other.Prop))))
        && ((__isset.stat == other.__isset.stat) && ((!__isset.stat) || (System.Object.Equals(Stat, other.Stat))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((StatAlias != null) && __isset.StatAlias)
        {
          hashcode = (hashcode * 397) + StatAlias.GetHashCode();
        }
        if((Prop != null) && __isset.prop)
        {
          hashcode = (hashcode * 397) + Prop.GetHashCode();
        }
        if(__isset.stat)
        {
          hashcode = (hashcode * 397) + Stat.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp27 = new StringBuilder("StatProp(");
      int tmp28 = 0;
      if((StatAlias != null) && __isset.StatAlias)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("StatAlias: ");
        StatAlias.ToString(tmp27);
      }
      if((Prop != null) && __isset.prop)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Prop: ");
        Prop.ToString(tmp27);
      }
      if(__isset.stat)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Stat: ");
        Stat.ToString(tmp27);
      }
      tmp27.Append(')');
      return tmp27.ToString();
    }
  }

}
