/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class ScanVertexResponse : TBase
  {
    private global::Nebula.Common.DataSet _vertex_data;
    private bool _has_next;
    private byte[] _next_cursor;

    public global::Nebula.Storage.ResponseCommon Result { get; set; }

    public global::Nebula.Common.DataSet Vertex_data
    {
      get
      {
        return _vertex_data;
      }
      set
      {
        __isset.vertex_data = true;
        this._vertex_data = value;
      }
    }

    public bool Has_next
    {
      get
      {
        return _has_next;
      }
      set
      {
        __isset.has_next = true;
        this._has_next = value;
      }
    }

    public byte[] Next_cursor
    {
      get
      {
        return _next_cursor;
      }
      set
      {
        __isset.next_cursor = true;
        this._next_cursor = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool vertex_data;
      public bool has_next;
      public bool next_cursor;
    }

    public ScanVertexResponse()
    {
    }

    public ScanVertexResponse(global::Nebula.Storage.ResponseCommon result) : this()
    {
      this.Result = result;
    }

    public ScanVertexResponse DeepCopy()
    {
      var tmp374 = new ScanVertexResponse();
      if((Result != null))
      {
        tmp374.Result = (global::Nebula.Storage.ResponseCommon)this.Result.DeepCopy();
      }
      if((Vertex_data != null) && __isset.vertex_data)
      {
        tmp374.Vertex_data = (global::Nebula.Common.DataSet)this.Vertex_data.DeepCopy();
      }
      tmp374.__isset.vertex_data = this.__isset.vertex_data;
      if(__isset.has_next)
      {
        tmp374.Has_next = this.Has_next;
      }
      tmp374.__isset.has_next = this.__isset.has_next;
      if((Next_cursor != null) && __isset.next_cursor)
      {
        tmp374.Next_cursor = this.Next_cursor.ToArray();
      }
      tmp374.__isset.next_cursor = this.__isset.next_cursor;
      return tmp374;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_result = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Result = new global::Nebula.Storage.ResponseCommon();
                await Result.ReadAsync(iprot, cancellationToken);
                isset_result = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Vertex_data = new global::Nebula.Common.DataSet();
                await Vertex_data.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                Has_next = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Next_cursor = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_result)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp375 = new TStruct("ScanVertexResponse");
        await oprot.WriteStructBeginAsync(tmp375, cancellationToken);
        var tmp376 = new TField();
        if((Result != null))
        {
          tmp376.Name = "result";
          tmp376.Type = TType.Struct;
          tmp376.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp376, cancellationToken);
          await Result.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Vertex_data != null) && __isset.vertex_data)
        {
          tmp376.Name = "vertex_data";
          tmp376.Type = TType.Struct;
          tmp376.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp376, cancellationToken);
          await Vertex_data.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.has_next)
        {
          tmp376.Name = "has_next";
          tmp376.Type = TType.Bool;
          tmp376.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp376, cancellationToken);
          await oprot.WriteBoolAsync(Has_next, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Next_cursor != null) && __isset.next_cursor)
        {
          tmp376.Name = "next_cursor";
          tmp376.Type = TType.String;
          tmp376.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp376, cancellationToken);
          await oprot.WriteBinaryAsync(Next_cursor, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ScanVertexResponse other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Result, other.Result)
        && ((__isset.vertex_data == other.__isset.vertex_data) && ((!__isset.vertex_data) || (System.Object.Equals(Vertex_data, other.Vertex_data))))
        && ((__isset.has_next == other.__isset.has_next) && ((!__isset.has_next) || (System.Object.Equals(Has_next, other.Has_next))))
        && ((__isset.next_cursor == other.__isset.next_cursor) && ((!__isset.next_cursor) || (TCollections.Equals(Next_cursor, other.Next_cursor))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Result != null))
        {
          hashcode = (hashcode * 397) + Result.GetHashCode();
        }
        if((Vertex_data != null) && __isset.vertex_data)
        {
          hashcode = (hashcode * 397) + Vertex_data.GetHashCode();
        }
        if(__isset.has_next)
        {
          hashcode = (hashcode * 397) + Has_next.GetHashCode();
        }
        if((Next_cursor != null) && __isset.next_cursor)
        {
          hashcode = (hashcode * 397) + Next_cursor.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp377 = new StringBuilder("ScanVertexResponse(");
      if((Result != null))
      {
        tmp377.Append(", Result: ");
        Result.ToString(tmp377);
      }
      if((Vertex_data != null) && __isset.vertex_data)
      {
        tmp377.Append(", Vertex_data: ");
        Vertex_data.ToString(tmp377);
      }
      if(__isset.has_next)
      {
        tmp377.Append(", Has_next: ");
        Has_next.ToString(tmp377);
      }
      if((Next_cursor != null) && __isset.next_cursor)
      {
        tmp377.Append(", Next_cursor: ");
        Next_cursor.ToString(tmp377);
      }
      tmp377.Append(')');
      return tmp377.ToString();
    }
  }

}
