/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class IndexSpec : TBase
  {
    private global::Nebula.Common.SchemaID _schema_id;

    public List<global::Nebula.Storage.IndexQueryContext> Contexts { get; set; }

    public global::Nebula.Common.SchemaID Schema_id
    {
      get
      {
        return _schema_id;
      }
      set
      {
        __isset.schema_id = true;
        this._schema_id = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool schema_id;
    }

    public IndexSpec()
    {
    }

    public IndexSpec(List<global::Nebula.Storage.IndexQueryContext> contexts) : this()
    {
      this.Contexts = contexts;
    }

    public IndexSpec DeepCopy()
    {
      var tmp338 = new IndexSpec();
      if((Contexts != null))
      {
        tmp338.Contexts = this.Contexts.DeepCopy();
      }
      if((Schema_id != null) && __isset.schema_id)
      {
        tmp338.Schema_id = (global::Nebula.Common.SchemaID)this.Schema_id.DeepCopy();
      }
      tmp338.__isset.schema_id = this.__isset.schema_id;
      return tmp338;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_contexts = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list339 = await iprot.ReadListBeginAsync(cancellationToken);
                  Contexts = new List<global::Nebula.Storage.IndexQueryContext>(_list339.Count);
                  for(int _i340 = 0; _i340 < _list339.Count; ++_i340)
                  {
                    global::Nebula.Storage.IndexQueryContext _elem341;
                    _elem341 = new global::Nebula.Storage.IndexQueryContext();
                    await _elem341.ReadAsync(iprot, cancellationToken);
                    Contexts.Add(_elem341);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_contexts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Schema_id = new global::Nebula.Common.SchemaID();
                await Schema_id.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_contexts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp342 = new TStruct("IndexSpec");
        await oprot.WriteStructBeginAsync(tmp342, cancellationToken);
        var tmp343 = new TField();
        if((Contexts != null))
        {
          tmp343.Name = "contexts";
          tmp343.Type = TType.List;
          tmp343.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp343, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Contexts.Count), cancellationToken);
            foreach (global::Nebula.Storage.IndexQueryContext _iter344 in Contexts)
            {
              await _iter344.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Schema_id != null) && __isset.schema_id)
        {
          tmp343.Name = "schema_id";
          tmp343.Type = TType.Struct;
          tmp343.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp343, cancellationToken);
          await Schema_id.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is IndexSpec other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Contexts, other.Contexts)
        && ((__isset.schema_id == other.__isset.schema_id) && ((!__isset.schema_id) || (System.Object.Equals(Schema_id, other.Schema_id))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Contexts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Contexts);
        }
        if((Schema_id != null) && __isset.schema_id)
        {
          hashcode = (hashcode * 397) + Schema_id.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp345 = new StringBuilder("IndexSpec(");
      if((Contexts != null))
      {
        tmp345.Append(", Contexts: ");
        Contexts.ToString(tmp345);
      }
      if((Schema_id != null) && __isset.schema_id)
      {
        tmp345.Append(", Schema_id: ");
        Schema_id.ToString(tmp345);
      }
      tmp345.Append(')');
      return tmp345.ToString();
    }
  }

}
