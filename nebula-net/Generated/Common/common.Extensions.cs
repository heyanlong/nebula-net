/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{
  public static class commonExtensions
  {
    public static bool Equals(this Dictionary<byte[], global::Nebula.Common.@Value> instance, object that)
    {
      if (!(that is Dictionary<byte[], global::Nebula.Common.@Value> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<byte[], global::Nebula.Common.@Value> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<byte[], global::Nebula.Common.@Value> DeepCopy(this Dictionary<byte[], global::Nebula.Common.@Value> source)
    {
      if (source == null)
        return null;

      var tmp204 = new Dictionary<byte[], global::Nebula.Common.@Value>(source.Count);
      foreach (var pair in source)
        tmp204.Add((pair.Key != null) ? pair.Key.ToArray() : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp204;
    }


    public static bool Equals(this Dictionary<int, global::Nebula.Common.LogInfo> instance, object that)
    {
      if (!(that is Dictionary<int, global::Nebula.Common.LogInfo> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this Dictionary<int, global::Nebula.Common.LogInfo> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static Dictionary<int, global::Nebula.Common.LogInfo> DeepCopy(this Dictionary<int, global::Nebula.Common.LogInfo> source)
    {
      if (source == null)
        return null;

      var tmp205 = new Dictionary<int, global::Nebula.Common.LogInfo>(source.Count);
      foreach (var pair in source)
        tmp205.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
      return tmp205;
    }


    public static bool Equals(this List<List<global::Nebula.Common.Coordinate>> instance, object that)
    {
      if (!(that is List<List<global::Nebula.Common.Coordinate>> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<List<global::Nebula.Common.Coordinate>> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<List<global::Nebula.Common.Coordinate>> DeepCopy(this List<List<global::Nebula.Common.Coordinate>> source)
    {
      if (source == null)
        return null;

      var tmp206 = new List<List<global::Nebula.Common.Coordinate>>(source.Count);
      foreach (var elem in source)
        tmp206.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp206;
    }


    public static bool Equals(this List<byte[]> instance, object that)
    {
      if (!(that is List<byte[]> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<byte[]> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<byte[]> DeepCopy(this List<byte[]> source)
    {
      if (source == null)
        return null;

      var tmp207 = new List<byte[]>(source.Count);
      foreach (var elem in source)
        tmp207.Add((elem != null) ? elem.ToArray() : null);
      return tmp207;
    }


    public static bool Equals(this List<global::Nebula.Common.@Value> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.@Value> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.@Value> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.@Value> DeepCopy(this List<global::Nebula.Common.@Value> source)
    {
      if (source == null)
        return null;

      var tmp208 = new List<global::Nebula.Common.@Value>(source.Count);
      foreach (var elem in source)
        tmp208.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp208;
    }


    public static bool Equals(this List<global::Nebula.Common.Coordinate> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.Coordinate> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.Coordinate> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.Coordinate> DeepCopy(this List<global::Nebula.Common.Coordinate> source)
    {
      if (source == null)
        return null;

      var tmp209 = new List<global::Nebula.Common.Coordinate>(source.Count);
      foreach (var elem in source)
        tmp209.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp209;
    }


    public static bool Equals(this List<global::Nebula.Common.Row> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.Row> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.Row> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.Row> DeepCopy(this List<global::Nebula.Common.Row> source)
    {
      if (source == null)
        return null;

      var tmp210 = new List<global::Nebula.Common.Row>(source.Count);
      foreach (var elem in source)
        tmp210.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp210;
    }


    public static bool Equals(this List<global::Nebula.Common.Step> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.Step> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.Step> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.Step> DeepCopy(this List<global::Nebula.Common.Step> source)
    {
      if (source == null)
        return null;

      var tmp211 = new List<global::Nebula.Common.Step>(source.Count);
      foreach (var elem in source)
        tmp211.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp211;
    }


    public static bool Equals(this List<global::Nebula.Common.Tag> instance, object that)
    {
      if (!(that is List<global::Nebula.Common.Tag> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Nebula.Common.Tag> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Nebula.Common.Tag> DeepCopy(this List<global::Nebula.Common.Tag> source)
    {
      if (source == null)
        return null;

      var tmp212 = new List<global::Nebula.Common.Tag>(source.Count);
      foreach (var elem in source)
        tmp212.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp212;
    }


    public static bool Equals(this THashSet<global::Nebula.Common.@Value> instance, object that)
    {
      if (!(that is THashSet<global::Nebula.Common.@Value> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this THashSet<global::Nebula.Common.@Value> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static THashSet<global::Nebula.Common.@Value> DeepCopy(this THashSet<global::Nebula.Common.@Value> source)
    {
      if (source == null)
        return null;

      var tmp213 = new THashSet<global::Nebula.Common.@Value>(source.Count);
      foreach (var elem in source)
        tmp213.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp213;
    }


  }
}
