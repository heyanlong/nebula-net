/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class NList : TBase
  {
    private List<global::Nebula.Common.@Value> _values;

    public List<global::Nebula.Common.@Value> Values
    {
      get
      {
        return _values;
      }
      set
      {
        __isset.values = true;
        this._values = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool values;
    }

    public NList()
    {
    }

    public NList DeepCopy()
    {
      var tmp25 = new NList();
      if((Values != null) && __isset.values)
      {
        tmp25.Values = this.Values.DeepCopy();
      }
      tmp25.__isset.values = this.__isset.values;
      return tmp25;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list26 = await iprot.ReadListBeginAsync(cancellationToken);
                  Values = new List<global::Nebula.Common.@Value>(_list26.Count);
                  for(int _i27 = 0; _i27 < _list26.Count; ++_i27)
                  {
                    global::Nebula.Common.@Value _elem28;
                    _elem28 = new global::Nebula.Common.@Value();
                    await _elem28.ReadAsync(iprot, cancellationToken);
                    Values.Add(_elem28);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp29 = new TStruct("NList");
        await oprot.WriteStructBeginAsync(tmp29, cancellationToken);
        var tmp30 = new TField();
        if((Values != null) && __isset.values)
        {
          tmp30.Name = "values";
          tmp30.Type = TType.List;
          tmp30.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Values.Count), cancellationToken);
            foreach (global::Nebula.Common.@Value _iter31 in Values)
            {
              await _iter31.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NList other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.values == other.__isset.values) && ((!__isset.values) || (TCollections.Equals(Values, other.Values))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Values != null) && __isset.values)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Values);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp32 = new StringBuilder("NList(");
      int tmp33 = 0;
      if((Values != null) && __isset.values)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("Values: ");
        Values.ToString(tmp32);
      }
      tmp32.Append(')');
      return tmp32.ToString();
    }
  }

}
