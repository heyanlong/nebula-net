/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class BackupInfo : TBase
  {
    private global::Nebula.Common.HostAddr _host;
    private List<global::Nebula.Common.CheckpointInfo> _info;

    public global::Nebula.Common.HostAddr Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    public List<global::Nebula.Common.CheckpointInfo> Info
    {
      get
      {
        return _info;
      }
      set
      {
        __isset.info = true;
        this._info = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool host;
      public bool info;
    }

    public BackupInfo()
    {
    }

    public BackupInfo DeepCopy()
    {
      var tmp895 = new BackupInfo();
      if((Host != null) && __isset.host)
      {
        tmp895.Host = (global::Nebula.Common.HostAddr)this.Host.DeepCopy();
      }
      tmp895.__isset.host = this.__isset.host;
      if((Info != null) && __isset.info)
      {
        tmp895.Info = this.Info.DeepCopy();
      }
      tmp895.__isset.info = this.__isset.info;
      return tmp895;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Host = new global::Nebula.Common.HostAddr();
                await Host.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list896 = await iprot.ReadListBeginAsync(cancellationToken);
                  Info = new List<global::Nebula.Common.CheckpointInfo>(_list896.Count);
                  for(int _i897 = 0; _i897 < _list896.Count; ++_i897)
                  {
                    global::Nebula.Common.CheckpointInfo _elem898;
                    _elem898 = new global::Nebula.Common.CheckpointInfo();
                    await _elem898.ReadAsync(iprot, cancellationToken);
                    Info.Add(_elem898);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp899 = new TStruct("BackupInfo");
        await oprot.WriteStructBeginAsync(tmp899, cancellationToken);
        var tmp900 = new TField();
        if((Host != null) && __isset.host)
        {
          tmp900.Name = "host";
          tmp900.Type = TType.Struct;
          tmp900.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp900, cancellationToken);
          await Host.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Info != null) && __isset.info)
        {
          tmp900.Name = "info";
          tmp900.Type = TType.List;
          tmp900.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp900, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Info.Count), cancellationToken);
            foreach (global::Nebula.Common.CheckpointInfo _iter901 in Info)
            {
              await _iter901.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BackupInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.host == other.__isset.host) && ((!__isset.host) || (System.Object.Equals(Host, other.Host))))
        && ((__isset.info == other.__isset.info) && ((!__isset.info) || (TCollections.Equals(Info, other.Info))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Host != null) && __isset.host)
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        if((Info != null) && __isset.info)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Info);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp902 = new StringBuilder("BackupInfo(");
      int tmp903 = 0;
      if((Host != null) && __isset.host)
      {
        if(0 < tmp903++) { tmp902.Append(", "); }
        tmp902.Append("Host: ");
        Host.ToString(tmp902);
      }
      if((Info != null) && __isset.info)
      {
        if(0 < tmp903++) { tmp902.Append(", "); }
        tmp902.Append("Info: ");
        Info.ToString(tmp902);
      }
      tmp902.Append(')');
      return tmp902.ToString();
    }
  }

}
