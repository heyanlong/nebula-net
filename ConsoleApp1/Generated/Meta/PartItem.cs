/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class PartItem : TBase
  {
    private global::Nebula.Common.HostAddr _leader;

    public int Part_id { get; set; }

    public global::Nebula.Common.HostAddr Leader
    {
      get
      {
        return _leader;
      }
      set
      {
        __isset.leader = true;
        this._leader = value;
      }
    }

    public List<global::Nebula.Common.HostAddr> Peers { get; set; }

    public List<global::Nebula.Common.HostAddr> Losts { get; set; }


    public Isset __isset;
    public struct Isset
    {
      public bool leader;
    }

    public PartItem()
    {
    }

    public PartItem(int part_id, List<global::Nebula.Common.HostAddr> peers, List<global::Nebula.Common.HostAddr> losts) : this()
    {
      this.Part_id = part_id;
      this.Peers = peers;
      this.Losts = losts;
    }

    public PartItem DeepCopy()
    {
      var tmp323 = new PartItem();
      tmp323.Part_id = this.Part_id;
      if((Leader != null) && __isset.leader)
      {
        tmp323.Leader = (global::Nebula.Common.HostAddr)this.Leader.DeepCopy();
      }
      tmp323.__isset.leader = this.__isset.leader;
      if((Peers != null))
      {
        tmp323.Peers = this.Peers.DeepCopy();
      }
      if((Losts != null))
      {
        tmp323.Losts = this.Losts.DeepCopy();
      }
      return tmp323;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_part_id = false;
        bool isset_peers = false;
        bool isset_losts = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Part_id = await iprot.ReadI32Async(cancellationToken);
                isset_part_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Leader = new global::Nebula.Common.HostAddr();
                await Leader.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list324 = await iprot.ReadListBeginAsync(cancellationToken);
                  Peers = new List<global::Nebula.Common.HostAddr>(_list324.Count);
                  for(int _i325 = 0; _i325 < _list324.Count; ++_i325)
                  {
                    global::Nebula.Common.HostAddr _elem326;
                    _elem326 = new global::Nebula.Common.HostAddr();
                    await _elem326.ReadAsync(iprot, cancellationToken);
                    Peers.Add(_elem326);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_peers = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list327 = await iprot.ReadListBeginAsync(cancellationToken);
                  Losts = new List<global::Nebula.Common.HostAddr>(_list327.Count);
                  for(int _i328 = 0; _i328 < _list327.Count; ++_i328)
                  {
                    global::Nebula.Common.HostAddr _elem329;
                    _elem329 = new global::Nebula.Common.HostAddr();
                    await _elem329.ReadAsync(iprot, cancellationToken);
                    Losts.Add(_elem329);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_losts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_part_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_peers)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_losts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp330 = new TStruct("PartItem");
        await oprot.WriteStructBeginAsync(tmp330, cancellationToken);
        var tmp331 = new TField();
        tmp331.Name = "part_id";
        tmp331.Type = TType.I32;
        tmp331.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp331, cancellationToken);
        await oprot.WriteI32Async(Part_id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Leader != null) && __isset.leader)
        {
          tmp331.Name = "leader";
          tmp331.Type = TType.Struct;
          tmp331.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp331, cancellationToken);
          await Leader.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Peers != null))
        {
          tmp331.Name = "peers";
          tmp331.Type = TType.List;
          tmp331.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp331, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Peers.Count), cancellationToken);
            foreach (global::Nebula.Common.HostAddr _iter332 in Peers)
            {
              await _iter332.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Losts != null))
        {
          tmp331.Name = "losts";
          tmp331.Type = TType.List;
          tmp331.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp331, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Losts.Count), cancellationToken);
            foreach (global::Nebula.Common.HostAddr _iter333 in Losts)
            {
              await _iter333.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is PartItem other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Part_id, other.Part_id)
        && ((__isset.leader == other.__isset.leader) && ((!__isset.leader) || (System.Object.Equals(Leader, other.Leader))))
        && TCollections.Equals(Peers, other.Peers)
        && TCollections.Equals(Losts, other.Losts);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Part_id.GetHashCode();
        if((Leader != null) && __isset.leader)
        {
          hashcode = (hashcode * 397) + Leader.GetHashCode();
        }
        if((Peers != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Peers);
        }
        if((Losts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Losts);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp334 = new StringBuilder("PartItem(");
      tmp334.Append(", Part_id: ");
      Part_id.ToString(tmp334);
      if((Leader != null) && __isset.leader)
      {
        tmp334.Append(", Leader: ");
        Leader.ToString(tmp334);
      }
      if((Peers != null))
      {
        tmp334.Append(", Peers: ");
        Peers.ToString(tmp334);
      }
      if((Losts != null))
      {
        tmp334.Append(", Losts: ");
        Losts.ToString(tmp334);
      }
      tmp334.Append(')');
      return tmp334.ToString();
    }
  }

}
