/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class StatsItem : TBase
  {
    private Dictionary<byte[], long> _tag_vertices;
    private Dictionary<byte[], long> _edges;
    private long _space_vertices;
    private long _space_edges;
    private Dictionary<int, List<global::Nebula.Meta.Correlativity>> _positive_part_correlativity;
    private Dictionary<int, List<global::Nebula.Meta.Correlativity>> _negative_part_correlativity;
    private global::Nebula.Meta.JobStatus _status;

    public Dictionary<byte[], long> Tag_vertices
    {
      get
      {
        return _tag_vertices;
      }
      set
      {
        __isset.tag_vertices = true;
        this._tag_vertices = value;
      }
    }

    public Dictionary<byte[], long> Edges
    {
      get
      {
        return _edges;
      }
      set
      {
        __isset.edges = true;
        this._edges = value;
      }
    }

    public long Space_vertices
    {
      get
      {
        return _space_vertices;
      }
      set
      {
        __isset.space_vertices = true;
        this._space_vertices = value;
      }
    }

    public long Space_edges
    {
      get
      {
        return _space_edges;
      }
      set
      {
        __isset.space_edges = true;
        this._space_edges = value;
      }
    }

    public Dictionary<int, List<global::Nebula.Meta.Correlativity>> Positive_part_correlativity
    {
      get
      {
        return _positive_part_correlativity;
      }
      set
      {
        __isset.positive_part_correlativity = true;
        this._positive_part_correlativity = value;
      }
    }

    public Dictionary<int, List<global::Nebula.Meta.Correlativity>> Negative_part_correlativity
    {
      get
      {
        return _negative_part_correlativity;
      }
      set
      {
        __isset.negative_part_correlativity = true;
        this._negative_part_correlativity = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Meta.JobStatus"/>
    /// </summary>
    public global::Nebula.Meta.JobStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tag_vertices;
      public bool edges;
      public bool space_vertices;
      public bool space_edges;
      public bool positive_part_correlativity;
      public bool negative_part_correlativity;
      public bool status;
    }

    public StatsItem()
    {
    }

    public StatsItem DeepCopy()
    {
      var tmp152 = new StatsItem();
      if((Tag_vertices != null) && __isset.tag_vertices)
      {
        tmp152.Tag_vertices = this.Tag_vertices.DeepCopy();
      }
      tmp152.__isset.tag_vertices = this.__isset.tag_vertices;
      if((Edges != null) && __isset.edges)
      {
        tmp152.Edges = this.Edges.DeepCopy();
      }
      tmp152.__isset.edges = this.__isset.edges;
      if(__isset.space_vertices)
      {
        tmp152.Space_vertices = this.Space_vertices;
      }
      tmp152.__isset.space_vertices = this.__isset.space_vertices;
      if(__isset.space_edges)
      {
        tmp152.Space_edges = this.Space_edges;
      }
      tmp152.__isset.space_edges = this.__isset.space_edges;
      if((Positive_part_correlativity != null) && __isset.positive_part_correlativity)
      {
        tmp152.Positive_part_correlativity = this.Positive_part_correlativity.DeepCopy();
      }
      tmp152.__isset.positive_part_correlativity = this.__isset.positive_part_correlativity;
      if((Negative_part_correlativity != null) && __isset.negative_part_correlativity)
      {
        tmp152.Negative_part_correlativity = this.Negative_part_correlativity.DeepCopy();
      }
      tmp152.__isset.negative_part_correlativity = this.__isset.negative_part_correlativity;
      if(__isset.status)
      {
        tmp152.Status = this.Status;
      }
      tmp152.__isset.status = this.__isset.status;
      return tmp152;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map153 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Tag_vertices = new Dictionary<byte[], long>(_map153.Count);
                  for(int _i154 = 0; _i154 < _map153.Count; ++_i154)
                  {
                    byte[] _key155;
                    long _val156;
                    _key155 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val156 = await iprot.ReadI64Async(cancellationToken);
                    Tag_vertices[_key155] = _val156;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map157 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Edges = new Dictionary<byte[], long>(_map157.Count);
                  for(int _i158 = 0; _i158 < _map157.Count; ++_i158)
                  {
                    byte[] _key159;
                    long _val160;
                    _key159 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val160 = await iprot.ReadI64Async(cancellationToken);
                    Edges[_key159] = _val160;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Space_vertices = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Space_edges = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map161 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Positive_part_correlativity = new Dictionary<int, List<global::Nebula.Meta.Correlativity>>(_map161.Count);
                  for(int _i162 = 0; _i162 < _map161.Count; ++_i162)
                  {
                    int _key163;
                    List<global::Nebula.Meta.Correlativity> _val164;
                    _key163 = await iprot.ReadI32Async(cancellationToken);
                    {
                      TList _list165 = await iprot.ReadListBeginAsync(cancellationToken);
                      _val164 = new List<global::Nebula.Meta.Correlativity>(_list165.Count);
                      for(int _i166 = 0; _i166 < _list165.Count; ++_i166)
                      {
                        global::Nebula.Meta.Correlativity _elem167;
                        _elem167 = new global::Nebula.Meta.Correlativity();
                        await _elem167.ReadAsync(iprot, cancellationToken);
                        _val164.Add(_elem167);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Positive_part_correlativity[_key163] = _val164;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map168 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Negative_part_correlativity = new Dictionary<int, List<global::Nebula.Meta.Correlativity>>(_map168.Count);
                  for(int _i169 = 0; _i169 < _map168.Count; ++_i169)
                  {
                    int _key170;
                    List<global::Nebula.Meta.Correlativity> _val171;
                    _key170 = await iprot.ReadI32Async(cancellationToken);
                    {
                      TList _list172 = await iprot.ReadListBeginAsync(cancellationToken);
                      _val171 = new List<global::Nebula.Meta.Correlativity>(_list172.Count);
                      for(int _i173 = 0; _i173 < _list172.Count; ++_i173)
                      {
                        global::Nebula.Meta.Correlativity _elem174;
                        _elem174 = new global::Nebula.Meta.Correlativity();
                        await _elem174.ReadAsync(iprot, cancellationToken);
                        _val171.Add(_elem174);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Negative_part_correlativity[_key170] = _val171;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Status = (global::Nebula.Meta.JobStatus)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp175 = new TStruct("StatsItem");
        await oprot.WriteStructBeginAsync(tmp175, cancellationToken);
        var tmp176 = new TField();
        if((Tag_vertices != null) && __isset.tag_vertices)
        {
          tmp176.Name = "tag_vertices";
          tmp176.Type = TType.Map;
          tmp176.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp176, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I64, Tag_vertices.Count), cancellationToken);
            foreach (byte[] _iter177 in Tag_vertices.Keys)
            {
              await oprot.WriteBinaryAsync(_iter177, cancellationToken);
              await oprot.WriteI64Async(Tag_vertices[_iter177], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Edges != null) && __isset.edges)
        {
          tmp176.Name = "edges";
          tmp176.Type = TType.Map;
          tmp176.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp176, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I64, Edges.Count), cancellationToken);
            foreach (byte[] _iter178 in Edges.Keys)
            {
              await oprot.WriteBinaryAsync(_iter178, cancellationToken);
              await oprot.WriteI64Async(Edges[_iter178], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.space_vertices)
        {
          tmp176.Name = "space_vertices";
          tmp176.Type = TType.I64;
          tmp176.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp176, cancellationToken);
          await oprot.WriteI64Async(Space_vertices, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.space_edges)
        {
          tmp176.Name = "space_edges";
          tmp176.Type = TType.I64;
          tmp176.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp176, cancellationToken);
          await oprot.WriteI64Async(Space_edges, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Positive_part_correlativity != null) && __isset.positive_part_correlativity)
        {
          tmp176.Name = "positive_part_correlativity";
          tmp176.Type = TType.Map;
          tmp176.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp176, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.List, Positive_part_correlativity.Count), cancellationToken);
            foreach (int _iter179 in Positive_part_correlativity.Keys)
            {
              await oprot.WriteI32Async(_iter179, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Positive_part_correlativity[_iter179].Count), cancellationToken);
                foreach (global::Nebula.Meta.Correlativity _iter180 in Positive_part_correlativity[_iter179])
                {
                  await _iter180.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Negative_part_correlativity != null) && __isset.negative_part_correlativity)
        {
          tmp176.Name = "negative_part_correlativity";
          tmp176.Type = TType.Map;
          tmp176.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp176, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.List, Negative_part_correlativity.Count), cancellationToken);
            foreach (int _iter181 in Negative_part_correlativity.Keys)
            {
              await oprot.WriteI32Async(_iter181, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Negative_part_correlativity[_iter181].Count), cancellationToken);
                foreach (global::Nebula.Meta.Correlativity _iter182 in Negative_part_correlativity[_iter181])
                {
                  await _iter182.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.status)
        {
          tmp176.Name = "status";
          tmp176.Type = TType.I32;
          tmp176.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp176, cancellationToken);
          await oprot.WriteI32Async((int)Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is StatsItem other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.tag_vertices == other.__isset.tag_vertices) && ((!__isset.tag_vertices) || (TCollections.Equals(Tag_vertices, other.Tag_vertices))))
        && ((__isset.edges == other.__isset.edges) && ((!__isset.edges) || (TCollections.Equals(Edges, other.Edges))))
        && ((__isset.space_vertices == other.__isset.space_vertices) && ((!__isset.space_vertices) || (System.Object.Equals(Space_vertices, other.Space_vertices))))
        && ((__isset.space_edges == other.__isset.space_edges) && ((!__isset.space_edges) || (System.Object.Equals(Space_edges, other.Space_edges))))
        && ((__isset.positive_part_correlativity == other.__isset.positive_part_correlativity) && ((!__isset.positive_part_correlativity) || (TCollections.Equals(Positive_part_correlativity, other.Positive_part_correlativity))))
        && ((__isset.negative_part_correlativity == other.__isset.negative_part_correlativity) && ((!__isset.negative_part_correlativity) || (TCollections.Equals(Negative_part_correlativity, other.Negative_part_correlativity))))
        && ((__isset.status == other.__isset.status) && ((!__isset.status) || (System.Object.Equals(Status, other.Status))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Tag_vertices != null) && __isset.tag_vertices)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Tag_vertices);
        }
        if((Edges != null) && __isset.edges)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Edges);
        }
        if(__isset.space_vertices)
        {
          hashcode = (hashcode * 397) + Space_vertices.GetHashCode();
        }
        if(__isset.space_edges)
        {
          hashcode = (hashcode * 397) + Space_edges.GetHashCode();
        }
        if((Positive_part_correlativity != null) && __isset.positive_part_correlativity)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Positive_part_correlativity);
        }
        if((Negative_part_correlativity != null) && __isset.negative_part_correlativity)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Negative_part_correlativity);
        }
        if(__isset.status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp183 = new StringBuilder("StatsItem(");
      int tmp184 = 0;
      if((Tag_vertices != null) && __isset.tag_vertices)
      {
        if(0 < tmp184++) { tmp183.Append(", "); }
        tmp183.Append("Tag_vertices: ");
        Tag_vertices.ToString(tmp183);
      }
      if((Edges != null) && __isset.edges)
      {
        if(0 < tmp184++) { tmp183.Append(", "); }
        tmp183.Append("Edges: ");
        Edges.ToString(tmp183);
      }
      if(__isset.space_vertices)
      {
        if(0 < tmp184++) { tmp183.Append(", "); }
        tmp183.Append("Space_vertices: ");
        Space_vertices.ToString(tmp183);
      }
      if(__isset.space_edges)
      {
        if(0 < tmp184++) { tmp183.Append(", "); }
        tmp183.Append("Space_edges: ");
        Space_edges.ToString(tmp183);
      }
      if((Positive_part_correlativity != null) && __isset.positive_part_correlativity)
      {
        if(0 < tmp184++) { tmp183.Append(", "); }
        tmp183.Append("Positive_part_correlativity: ");
        Positive_part_correlativity.ToString(tmp183);
      }
      if((Negative_part_correlativity != null) && __isset.negative_part_correlativity)
      {
        if(0 < tmp184++) { tmp183.Append(", "); }
        tmp183.Append("Negative_part_correlativity: ");
        Negative_part_correlativity.ToString(tmp183);
      }
      if(__isset.status)
      {
        if(0 < tmp184++) { tmp183.Append(", "); }
        tmp183.Append("Status: ");
        Status.ToString(tmp183);
      }
      tmp183.Append(')');
      return tmp183.ToString();
    }
  }

}
