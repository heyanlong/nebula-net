/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Meta
{

  public partial class UpdateSessionsReq : TBase
  {
    private List<global::Nebula.Meta.Session> _sessions;

    public List<global::Nebula.Meta.Session> Sessions
    {
      get
      {
        return _sessions;
      }
      set
      {
        __isset.sessions = true;
        this._sessions = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool sessions;
    }

    public UpdateSessionsReq()
    {
    }

    public UpdateSessionsReq DeepCopy()
    {
      var tmp1053 = new UpdateSessionsReq();
      if((Sessions != null) && __isset.sessions)
      {
        tmp1053.Sessions = this.Sessions.DeepCopy();
      }
      tmp1053.__isset.sessions = this.__isset.sessions;
      return tmp1053;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list1054 = await iprot.ReadListBeginAsync(cancellationToken);
                  Sessions = new List<global::Nebula.Meta.Session>(_list1054.Count);
                  for(int _i1055 = 0; _i1055 < _list1054.Count; ++_i1055)
                  {
                    global::Nebula.Meta.Session _elem1056;
                    _elem1056 = new global::Nebula.Meta.Session();
                    await _elem1056.ReadAsync(iprot, cancellationToken);
                    Sessions.Add(_elem1056);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1057 = new TStruct("UpdateSessionsReq");
        await oprot.WriteStructBeginAsync(tmp1057, cancellationToken);
        var tmp1058 = new TField();
        if((Sessions != null) && __isset.sessions)
        {
          tmp1058.Name = "sessions";
          tmp1058.Type = TType.List;
          tmp1058.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp1058, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Sessions.Count), cancellationToken);
            foreach (global::Nebula.Meta.Session _iter1059 in Sessions)
            {
              await _iter1059.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UpdateSessionsReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.sessions == other.__isset.sessions) && ((!__isset.sessions) || (TCollections.Equals(Sessions, other.Sessions))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Sessions != null) && __isset.sessions)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Sessions);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp1060 = new StringBuilder("UpdateSessionsReq(");
      int tmp1061 = 0;
      if((Sessions != null) && __isset.sessions)
      {
        if(0 < tmp1061++) { tmp1060.Append(", "); }
        tmp1060.Append("Sessions: ");
        Sessions.ToString(tmp1060);
      }
      tmp1060.Append(')');
      return tmp1060.ToString();
    }
  }

}
