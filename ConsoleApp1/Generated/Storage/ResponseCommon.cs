/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{

  public partial class ResponseCommon : TBase
  {
    private Dictionary<string, int> _latency_detail_us;

    public List<global::Nebula.Storage.PartitionResult> Failed_parts { get; set; }

    public int Latency_in_us { get; set; }

    public Dictionary<string, int> Latency_detail_us
    {
      get
      {
        return _latency_detail_us;
      }
      set
      {
        __isset.latency_detail_us = true;
        this._latency_detail_us = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool latency_detail_us;
    }

    public ResponseCommon()
    {
    }

    public ResponseCommon(List<global::Nebula.Storage.PartitionResult> failed_parts, int latency_in_us) : this()
    {
      this.Failed_parts = failed_parts;
      this.Latency_in_us = latency_in_us;
    }

    public ResponseCommon DeepCopy()
    {
      var tmp10 = new ResponseCommon();
      if((Failed_parts != null))
      {
        tmp10.Failed_parts = this.Failed_parts.DeepCopy();
      }
      tmp10.Latency_in_us = this.Latency_in_us;
      if((Latency_detail_us != null) && __isset.latency_detail_us)
      {
        tmp10.Latency_detail_us = this.Latency_detail_us.DeepCopy();
      }
      tmp10.__isset.latency_detail_us = this.__isset.latency_detail_us;
      return tmp10;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_failed_parts = false;
        bool isset_latency_in_us = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list11 = await iprot.ReadListBeginAsync(cancellationToken);
                  Failed_parts = new List<global::Nebula.Storage.PartitionResult>(_list11.Count);
                  for(int _i12 = 0; _i12 < _list11.Count; ++_i12)
                  {
                    global::Nebula.Storage.PartitionResult _elem13;
                    _elem13 = new global::Nebula.Storage.PartitionResult();
                    await _elem13.ReadAsync(iprot, cancellationToken);
                    Failed_parts.Add(_elem13);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_failed_parts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Latency_in_us = await iprot.ReadI32Async(cancellationToken);
                isset_latency_in_us = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map14 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Latency_detail_us = new Dictionary<string, int>(_map14.Count);
                  for(int _i15 = 0; _i15 < _map14.Count; ++_i15)
                  {
                    string _key16;
                    int _val17;
                    _key16 = await iprot.ReadStringAsync(cancellationToken);
                    _val17 = await iprot.ReadI32Async(cancellationToken);
                    Latency_detail_us[_key16] = _val17;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_failed_parts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_latency_in_us)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp18 = new TStruct("ResponseCommon");
        await oprot.WriteStructBeginAsync(tmp18, cancellationToken);
        var tmp19 = new TField();
        if((Failed_parts != null))
        {
          tmp19.Name = "failed_parts";
          tmp19.Type = TType.List;
          tmp19.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Failed_parts.Count), cancellationToken);
            foreach (global::Nebula.Storage.PartitionResult _iter20 in Failed_parts)
            {
              await _iter20.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp19.Name = "latency_in_us";
        tmp19.Type = TType.I32;
        tmp19.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
        await oprot.WriteI32Async(Latency_in_us, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Latency_detail_us != null) && __isset.latency_detail_us)
        {
          tmp19.Name = "latency_detail_us";
          tmp19.Type = TType.Map;
          tmp19.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, Latency_detail_us.Count), cancellationToken);
            foreach (string _iter21 in Latency_detail_us.Keys)
            {
              await oprot.WriteStringAsync(_iter21, cancellationToken);
              await oprot.WriteI32Async(Latency_detail_us[_iter21], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ResponseCommon other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Failed_parts, other.Failed_parts)
        && System.Object.Equals(Latency_in_us, other.Latency_in_us)
        && ((__isset.latency_detail_us == other.__isset.latency_detail_us) && ((!__isset.latency_detail_us) || (TCollections.Equals(Latency_detail_us, other.Latency_detail_us))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Failed_parts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Failed_parts);
        }
        hashcode = (hashcode * 397) + Latency_in_us.GetHashCode();
        if((Latency_detail_us != null) && __isset.latency_detail_us)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Latency_detail_us);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp22 = new StringBuilder("ResponseCommon(");
      if((Failed_parts != null))
      {
        tmp22.Append(", Failed_parts: ");
        Failed_parts.ToString(tmp22);
      }
      tmp22.Append(", Latency_in_us: ");
      Latency_in_us.ToString(tmp22);
      if((Latency_detail_us != null) && __isset.latency_detail_us)
      {
        tmp22.Append(", Latency_detail_us: ");
        Latency_detail_us.ToString(tmp22);
      }
      tmp22.Append(')');
      return tmp22.ToString();
    }
  }

}
