/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Storage
{
  public partial class StorageAdminService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> transLeader(global::Nebula.Storage.TransLeaderReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> addPart(global::Nebula.Storage.AddPartReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> addLearner(global::Nebula.Storage.AddLearnerReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> removePart(global::Nebula.Storage.RemovePartReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> memberChange(global::Nebula.Storage.MemberChangeReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> waitingForCatchUpData(global::Nebula.Storage.CatchUpDataReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.CreateCPResp> createCheckpoint(global::Nebula.Storage.CreateCPRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> dropCheckpoint(global::Nebula.Storage.DropCPRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> blockingWrites(global::Nebula.Storage.BlockingSignRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> rebuildTagIndex(global::Nebula.Storage.RebuildIndexRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> rebuildEdgeIndex(global::Nebula.Storage.RebuildIndexRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.GetLeaderPartsResp> getLeaderParts(global::Nebula.Storage.GetLeaderReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> checkPeers(global::Nebula.Storage.CheckPeersReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> addAdminTask(global::Nebula.Storage.AddAdminTaskRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> stopAdminTask(global::Nebula.Storage.StopAdminTaskRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Storage.ListClusterInfoResp> listClusterInfo(global::Nebula.Storage.ListClusterInfoReq req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> transLeader(global::Nebula.Storage.TransLeaderReq req, CancellationToken cancellationToken = default)
      {
        await send_transLeader(req, cancellationToken);
        return await recv_transLeader(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_transLeader(global::Nebula.Storage.TransLeaderReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("transLeader", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp922 = new InternalStructs.transLeader_args() {
          Req = req,
        };
        
        await tmp922.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_transLeader(CancellationToken cancellationToken = default)
      {
        
        var tmp923 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp923.Type == TMessageType.Exception)
        {
          var tmp924 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp924;
        }

        var tmp925 = new InternalStructs.transLeader_result();
        await tmp925.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp925.__isset.success)
        {
          return tmp925.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "transLeader failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> addPart(global::Nebula.Storage.AddPartReq req, CancellationToken cancellationToken = default)
      {
        await send_addPart(req, cancellationToken);
        return await recv_addPart(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addPart(global::Nebula.Storage.AddPartReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addPart", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp926 = new InternalStructs.addPart_args() {
          Req = req,
        };
        
        await tmp926.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_addPart(CancellationToken cancellationToken = default)
      {
        
        var tmp927 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp927.Type == TMessageType.Exception)
        {
          var tmp928 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp928;
        }

        var tmp929 = new InternalStructs.addPart_result();
        await tmp929.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp929.__isset.success)
        {
          return tmp929.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addPart failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> addLearner(global::Nebula.Storage.AddLearnerReq req, CancellationToken cancellationToken = default)
      {
        await send_addLearner(req, cancellationToken);
        return await recv_addLearner(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addLearner(global::Nebula.Storage.AddLearnerReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addLearner", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp930 = new InternalStructs.addLearner_args() {
          Req = req,
        };
        
        await tmp930.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_addLearner(CancellationToken cancellationToken = default)
      {
        
        var tmp931 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp931.Type == TMessageType.Exception)
        {
          var tmp932 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp932;
        }

        var tmp933 = new InternalStructs.addLearner_result();
        await tmp933.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp933.__isset.success)
        {
          return tmp933.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addLearner failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> removePart(global::Nebula.Storage.RemovePartReq req, CancellationToken cancellationToken = default)
      {
        await send_removePart(req, cancellationToken);
        return await recv_removePart(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_removePart(global::Nebula.Storage.RemovePartReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removePart", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp934 = new InternalStructs.removePart_args() {
          Req = req,
        };
        
        await tmp934.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_removePart(CancellationToken cancellationToken = default)
      {
        
        var tmp935 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp935.Type == TMessageType.Exception)
        {
          var tmp936 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp936;
        }

        var tmp937 = new InternalStructs.removePart_result();
        await tmp937.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp937.__isset.success)
        {
          return tmp937.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removePart failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> memberChange(global::Nebula.Storage.MemberChangeReq req, CancellationToken cancellationToken = default)
      {
        await send_memberChange(req, cancellationToken);
        return await recv_memberChange(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_memberChange(global::Nebula.Storage.MemberChangeReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("memberChange", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp938 = new InternalStructs.memberChange_args() {
          Req = req,
        };
        
        await tmp938.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_memberChange(CancellationToken cancellationToken = default)
      {
        
        var tmp939 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp939.Type == TMessageType.Exception)
        {
          var tmp940 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp940;
        }

        var tmp941 = new InternalStructs.memberChange_result();
        await tmp941.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp941.__isset.success)
        {
          return tmp941.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "memberChange failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> waitingForCatchUpData(global::Nebula.Storage.CatchUpDataReq req, CancellationToken cancellationToken = default)
      {
        await send_waitingForCatchUpData(req, cancellationToken);
        return await recv_waitingForCatchUpData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_waitingForCatchUpData(global::Nebula.Storage.CatchUpDataReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("waitingForCatchUpData", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp942 = new InternalStructs.waitingForCatchUpData_args() {
          Req = req,
        };
        
        await tmp942.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_waitingForCatchUpData(CancellationToken cancellationToken = default)
      {
        
        var tmp943 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp943.Type == TMessageType.Exception)
        {
          var tmp944 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp944;
        }

        var tmp945 = new InternalStructs.waitingForCatchUpData_result();
        await tmp945.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp945.__isset.success)
        {
          return tmp945.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "waitingForCatchUpData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.CreateCPResp> createCheckpoint(global::Nebula.Storage.CreateCPRequest req, CancellationToken cancellationToken = default)
      {
        await send_createCheckpoint(req, cancellationToken);
        return await recv_createCheckpoint(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createCheckpoint(global::Nebula.Storage.CreateCPRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createCheckpoint", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp946 = new InternalStructs.createCheckpoint_args() {
          Req = req,
        };
        
        await tmp946.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.CreateCPResp> recv_createCheckpoint(CancellationToken cancellationToken = default)
      {
        
        var tmp947 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp947.Type == TMessageType.Exception)
        {
          var tmp948 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp948;
        }

        var tmp949 = new InternalStructs.createCheckpoint_result();
        await tmp949.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp949.__isset.success)
        {
          return tmp949.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createCheckpoint failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> dropCheckpoint(global::Nebula.Storage.DropCPRequest req, CancellationToken cancellationToken = default)
      {
        await send_dropCheckpoint(req, cancellationToken);
        return await recv_dropCheckpoint(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_dropCheckpoint(global::Nebula.Storage.DropCPRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("dropCheckpoint", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp950 = new InternalStructs.dropCheckpoint_args() {
          Req = req,
        };
        
        await tmp950.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_dropCheckpoint(CancellationToken cancellationToken = default)
      {
        
        var tmp951 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp951.Type == TMessageType.Exception)
        {
          var tmp952 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp952;
        }

        var tmp953 = new InternalStructs.dropCheckpoint_result();
        await tmp953.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp953.__isset.success)
        {
          return tmp953.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dropCheckpoint failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> blockingWrites(global::Nebula.Storage.BlockingSignRequest req, CancellationToken cancellationToken = default)
      {
        await send_blockingWrites(req, cancellationToken);
        return await recv_blockingWrites(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_blockingWrites(global::Nebula.Storage.BlockingSignRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("blockingWrites", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp954 = new InternalStructs.blockingWrites_args() {
          Req = req,
        };
        
        await tmp954.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_blockingWrites(CancellationToken cancellationToken = default)
      {
        
        var tmp955 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp955.Type == TMessageType.Exception)
        {
          var tmp956 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp956;
        }

        var tmp957 = new InternalStructs.blockingWrites_result();
        await tmp957.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp957.__isset.success)
        {
          return tmp957.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "blockingWrites failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> rebuildTagIndex(global::Nebula.Storage.RebuildIndexRequest req, CancellationToken cancellationToken = default)
      {
        await send_rebuildTagIndex(req, cancellationToken);
        return await recv_rebuildTagIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_rebuildTagIndex(global::Nebula.Storage.RebuildIndexRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("rebuildTagIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp958 = new InternalStructs.rebuildTagIndex_args() {
          Req = req,
        };
        
        await tmp958.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_rebuildTagIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp959 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp959.Type == TMessageType.Exception)
        {
          var tmp960 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp960;
        }

        var tmp961 = new InternalStructs.rebuildTagIndex_result();
        await tmp961.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp961.__isset.success)
        {
          return tmp961.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rebuildTagIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> rebuildEdgeIndex(global::Nebula.Storage.RebuildIndexRequest req, CancellationToken cancellationToken = default)
      {
        await send_rebuildEdgeIndex(req, cancellationToken);
        return await recv_rebuildEdgeIndex(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_rebuildEdgeIndex(global::Nebula.Storage.RebuildIndexRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("rebuildEdgeIndex", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp962 = new InternalStructs.rebuildEdgeIndex_args() {
          Req = req,
        };
        
        await tmp962.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_rebuildEdgeIndex(CancellationToken cancellationToken = default)
      {
        
        var tmp963 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp963.Type == TMessageType.Exception)
        {
          var tmp964 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp964;
        }

        var tmp965 = new InternalStructs.rebuildEdgeIndex_result();
        await tmp965.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp965.__isset.success)
        {
          return tmp965.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rebuildEdgeIndex failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetLeaderPartsResp> getLeaderParts(global::Nebula.Storage.GetLeaderReq req, CancellationToken cancellationToken = default)
      {
        await send_getLeaderParts(req, cancellationToken);
        return await recv_getLeaderParts(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getLeaderParts(global::Nebula.Storage.GetLeaderReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getLeaderParts", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp966 = new InternalStructs.getLeaderParts_args() {
          Req = req,
        };
        
        await tmp966.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.GetLeaderPartsResp> recv_getLeaderParts(CancellationToken cancellationToken = default)
      {
        
        var tmp967 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp967.Type == TMessageType.Exception)
        {
          var tmp968 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp968;
        }

        var tmp969 = new InternalStructs.getLeaderParts_result();
        await tmp969.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp969.__isset.success)
        {
          return tmp969.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLeaderParts failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> checkPeers(global::Nebula.Storage.CheckPeersReq req, CancellationToken cancellationToken = default)
      {
        await send_checkPeers(req, cancellationToken);
        return await recv_checkPeers(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_checkPeers(global::Nebula.Storage.CheckPeersReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("checkPeers", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp970 = new InternalStructs.checkPeers_args() {
          Req = req,
        };
        
        await tmp970.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_checkPeers(CancellationToken cancellationToken = default)
      {
        
        var tmp971 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp971.Type == TMessageType.Exception)
        {
          var tmp972 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp972;
        }

        var tmp973 = new InternalStructs.checkPeers_result();
        await tmp973.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp973.__isset.success)
        {
          return tmp973.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkPeers failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> addAdminTask(global::Nebula.Storage.AddAdminTaskRequest req, CancellationToken cancellationToken = default)
      {
        await send_addAdminTask(req, cancellationToken);
        return await recv_addAdminTask(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_addAdminTask(global::Nebula.Storage.AddAdminTaskRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("addAdminTask", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp974 = new InternalStructs.addAdminTask_args() {
          Req = req,
        };
        
        await tmp974.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_addAdminTask(CancellationToken cancellationToken = default)
      {
        
        var tmp975 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp975.Type == TMessageType.Exception)
        {
          var tmp976 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp976;
        }

        var tmp977 = new InternalStructs.addAdminTask_result();
        await tmp977.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp977.__isset.success)
        {
          return tmp977.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addAdminTask failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> stopAdminTask(global::Nebula.Storage.StopAdminTaskRequest req, CancellationToken cancellationToken = default)
      {
        await send_stopAdminTask(req, cancellationToken);
        return await recv_stopAdminTask(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stopAdminTask(global::Nebula.Storage.StopAdminTaskRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stopAdminTask", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp978 = new InternalStructs.stopAdminTask_args() {
          Req = req,
        };
        
        await tmp978.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.AdminExecResp> recv_stopAdminTask(CancellationToken cancellationToken = default)
      {
        
        var tmp979 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp979.Type == TMessageType.Exception)
        {
          var tmp980 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp980;
        }

        var tmp981 = new InternalStructs.stopAdminTask_result();
        await tmp981.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp981.__isset.success)
        {
          return tmp981.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "stopAdminTask failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ListClusterInfoResp> listClusterInfo(global::Nebula.Storage.ListClusterInfoReq req, CancellationToken cancellationToken = default)
      {
        await send_listClusterInfo(req, cancellationToken);
        return await recv_listClusterInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listClusterInfo(global::Nebula.Storage.ListClusterInfoReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listClusterInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp982 = new InternalStructs.listClusterInfo_args() {
          Req = req,
        };
        
        await tmp982.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Storage.ListClusterInfoResp> recv_listClusterInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp983 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp983.Type == TMessageType.Exception)
        {
          var tmp984 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp984;
        }

        var tmp985 = new InternalStructs.listClusterInfo_result();
        await tmp985.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp985.__isset.success)
        {
          return tmp985.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listClusterInfo failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["transLeader"] = transLeader_ProcessAsync;
        processMap_["addPart"] = addPart_ProcessAsync;
        processMap_["addLearner"] = addLearner_ProcessAsync;
        processMap_["removePart"] = removePart_ProcessAsync;
        processMap_["memberChange"] = memberChange_ProcessAsync;
        processMap_["waitingForCatchUpData"] = waitingForCatchUpData_ProcessAsync;
        processMap_["createCheckpoint"] = createCheckpoint_ProcessAsync;
        processMap_["dropCheckpoint"] = dropCheckpoint_ProcessAsync;
        processMap_["blockingWrites"] = blockingWrites_ProcessAsync;
        processMap_["rebuildTagIndex"] = rebuildTagIndex_ProcessAsync;
        processMap_["rebuildEdgeIndex"] = rebuildEdgeIndex_ProcessAsync;
        processMap_["getLeaderParts"] = getLeaderParts_ProcessAsync;
        processMap_["checkPeers"] = checkPeers_ProcessAsync;
        processMap_["addAdminTask"] = addAdminTask_ProcessAsync;
        processMap_["stopAdminTask"] = stopAdminTask_ProcessAsync;
        processMap_["listClusterInfo"] = listClusterInfo_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task transLeader_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp986 = new InternalStructs.transLeader_args();
        await tmp986.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp987 = new InternalStructs.transLeader_result();
        try
        {
          tmp987.Success = await _iAsync.transLeader(tmp986.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("transLeader", TMessageType.Reply, seqid), cancellationToken); 
          await tmp987.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp988)
        {
          var tmp989 = $"Error occurred in {GetType().FullName}: {tmp988.Message}";
          if(_logger != null)
            _logger.LogError(tmp988, tmp989);
          else
            Console.Error.WriteLine(tmp989);
          var tmp990 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("transLeader", TMessageType.Exception, seqid), cancellationToken);
          await tmp990.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addPart_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp991 = new InternalStructs.addPart_args();
        await tmp991.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp992 = new InternalStructs.addPart_result();
        try
        {
          tmp992.Success = await _iAsync.addPart(tmp991.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addPart", TMessageType.Reply, seqid), cancellationToken); 
          await tmp992.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp993)
        {
          var tmp994 = $"Error occurred in {GetType().FullName}: {tmp993.Message}";
          if(_logger != null)
            _logger.LogError(tmp993, tmp994);
          else
            Console.Error.WriteLine(tmp994);
          var tmp995 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addPart", TMessageType.Exception, seqid), cancellationToken);
          await tmp995.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addLearner_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp996 = new InternalStructs.addLearner_args();
        await tmp996.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp997 = new InternalStructs.addLearner_result();
        try
        {
          tmp997.Success = await _iAsync.addLearner(tmp996.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addLearner", TMessageType.Reply, seqid), cancellationToken); 
          await tmp997.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp998)
        {
          var tmp999 = $"Error occurred in {GetType().FullName}: {tmp998.Message}";
          if(_logger != null)
            _logger.LogError(tmp998, tmp999);
          else
            Console.Error.WriteLine(tmp999);
          var tmp1000 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addLearner", TMessageType.Exception, seqid), cancellationToken);
          await tmp1000.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task removePart_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1001 = new InternalStructs.removePart_args();
        await tmp1001.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1002 = new InternalStructs.removePart_result();
        try
        {
          tmp1002.Success = await _iAsync.removePart(tmp1001.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("removePart", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1002.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1003)
        {
          var tmp1004 = $"Error occurred in {GetType().FullName}: {tmp1003.Message}";
          if(_logger != null)
            _logger.LogError(tmp1003, tmp1004);
          else
            Console.Error.WriteLine(tmp1004);
          var tmp1005 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removePart", TMessageType.Exception, seqid), cancellationToken);
          await tmp1005.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task memberChange_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1006 = new InternalStructs.memberChange_args();
        await tmp1006.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1007 = new InternalStructs.memberChange_result();
        try
        {
          tmp1007.Success = await _iAsync.memberChange(tmp1006.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("memberChange", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1007.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1008)
        {
          var tmp1009 = $"Error occurred in {GetType().FullName}: {tmp1008.Message}";
          if(_logger != null)
            _logger.LogError(tmp1008, tmp1009);
          else
            Console.Error.WriteLine(tmp1009);
          var tmp1010 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("memberChange", TMessageType.Exception, seqid), cancellationToken);
          await tmp1010.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task waitingForCatchUpData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1011 = new InternalStructs.waitingForCatchUpData_args();
        await tmp1011.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1012 = new InternalStructs.waitingForCatchUpData_result();
        try
        {
          tmp1012.Success = await _iAsync.waitingForCatchUpData(tmp1011.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("waitingForCatchUpData", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1012.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1013)
        {
          var tmp1014 = $"Error occurred in {GetType().FullName}: {tmp1013.Message}";
          if(_logger != null)
            _logger.LogError(tmp1013, tmp1014);
          else
            Console.Error.WriteLine(tmp1014);
          var tmp1015 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("waitingForCatchUpData", TMessageType.Exception, seqid), cancellationToken);
          await tmp1015.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createCheckpoint_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1016 = new InternalStructs.createCheckpoint_args();
        await tmp1016.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1017 = new InternalStructs.createCheckpoint_result();
        try
        {
          tmp1017.Success = await _iAsync.createCheckpoint(tmp1016.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createCheckpoint", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1017.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1018)
        {
          var tmp1019 = $"Error occurred in {GetType().FullName}: {tmp1018.Message}";
          if(_logger != null)
            _logger.LogError(tmp1018, tmp1019);
          else
            Console.Error.WriteLine(tmp1019);
          var tmp1020 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createCheckpoint", TMessageType.Exception, seqid), cancellationToken);
          await tmp1020.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task dropCheckpoint_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1021 = new InternalStructs.dropCheckpoint_args();
        await tmp1021.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1022 = new InternalStructs.dropCheckpoint_result();
        try
        {
          tmp1022.Success = await _iAsync.dropCheckpoint(tmp1021.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("dropCheckpoint", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1022.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1023)
        {
          var tmp1024 = $"Error occurred in {GetType().FullName}: {tmp1023.Message}";
          if(_logger != null)
            _logger.LogError(tmp1023, tmp1024);
          else
            Console.Error.WriteLine(tmp1024);
          var tmp1025 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("dropCheckpoint", TMessageType.Exception, seqid), cancellationToken);
          await tmp1025.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task blockingWrites_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1026 = new InternalStructs.blockingWrites_args();
        await tmp1026.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1027 = new InternalStructs.blockingWrites_result();
        try
        {
          tmp1027.Success = await _iAsync.blockingWrites(tmp1026.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("blockingWrites", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1027.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1028)
        {
          var tmp1029 = $"Error occurred in {GetType().FullName}: {tmp1028.Message}";
          if(_logger != null)
            _logger.LogError(tmp1028, tmp1029);
          else
            Console.Error.WriteLine(tmp1029);
          var tmp1030 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("blockingWrites", TMessageType.Exception, seqid), cancellationToken);
          await tmp1030.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task rebuildTagIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1031 = new InternalStructs.rebuildTagIndex_args();
        await tmp1031.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1032 = new InternalStructs.rebuildTagIndex_result();
        try
        {
          tmp1032.Success = await _iAsync.rebuildTagIndex(tmp1031.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("rebuildTagIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1032.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1033)
        {
          var tmp1034 = $"Error occurred in {GetType().FullName}: {tmp1033.Message}";
          if(_logger != null)
            _logger.LogError(tmp1033, tmp1034);
          else
            Console.Error.WriteLine(tmp1034);
          var tmp1035 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("rebuildTagIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1035.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task rebuildEdgeIndex_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1036 = new InternalStructs.rebuildEdgeIndex_args();
        await tmp1036.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1037 = new InternalStructs.rebuildEdgeIndex_result();
        try
        {
          tmp1037.Success = await _iAsync.rebuildEdgeIndex(tmp1036.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("rebuildEdgeIndex", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1037.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1038)
        {
          var tmp1039 = $"Error occurred in {GetType().FullName}: {tmp1038.Message}";
          if(_logger != null)
            _logger.LogError(tmp1038, tmp1039);
          else
            Console.Error.WriteLine(tmp1039);
          var tmp1040 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("rebuildEdgeIndex", TMessageType.Exception, seqid), cancellationToken);
          await tmp1040.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getLeaderParts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1041 = new InternalStructs.getLeaderParts_args();
        await tmp1041.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1042 = new InternalStructs.getLeaderParts_result();
        try
        {
          tmp1042.Success = await _iAsync.getLeaderParts(tmp1041.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getLeaderParts", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1042.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1043)
        {
          var tmp1044 = $"Error occurred in {GetType().FullName}: {tmp1043.Message}";
          if(_logger != null)
            _logger.LogError(tmp1043, tmp1044);
          else
            Console.Error.WriteLine(tmp1044);
          var tmp1045 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getLeaderParts", TMessageType.Exception, seqid), cancellationToken);
          await tmp1045.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task checkPeers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1046 = new InternalStructs.checkPeers_args();
        await tmp1046.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1047 = new InternalStructs.checkPeers_result();
        try
        {
          tmp1047.Success = await _iAsync.checkPeers(tmp1046.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("checkPeers", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1047.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1048)
        {
          var tmp1049 = $"Error occurred in {GetType().FullName}: {tmp1048.Message}";
          if(_logger != null)
            _logger.LogError(tmp1048, tmp1049);
          else
            Console.Error.WriteLine(tmp1049);
          var tmp1050 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("checkPeers", TMessageType.Exception, seqid), cancellationToken);
          await tmp1050.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task addAdminTask_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1051 = new InternalStructs.addAdminTask_args();
        await tmp1051.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1052 = new InternalStructs.addAdminTask_result();
        try
        {
          tmp1052.Success = await _iAsync.addAdminTask(tmp1051.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("addAdminTask", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1052.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1053)
        {
          var tmp1054 = $"Error occurred in {GetType().FullName}: {tmp1053.Message}";
          if(_logger != null)
            _logger.LogError(tmp1053, tmp1054);
          else
            Console.Error.WriteLine(tmp1054);
          var tmp1055 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("addAdminTask", TMessageType.Exception, seqid), cancellationToken);
          await tmp1055.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stopAdminTask_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1056 = new InternalStructs.stopAdminTask_args();
        await tmp1056.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1057 = new InternalStructs.stopAdminTask_result();
        try
        {
          tmp1057.Success = await _iAsync.stopAdminTask(tmp1056.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("stopAdminTask", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1057.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1058)
        {
          var tmp1059 = $"Error occurred in {GetType().FullName}: {tmp1058.Message}";
          if(_logger != null)
            _logger.LogError(tmp1058, tmp1059);
          else
            Console.Error.WriteLine(tmp1059);
          var tmp1060 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stopAdminTask", TMessageType.Exception, seqid), cancellationToken);
          await tmp1060.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listClusterInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1061 = new InternalStructs.listClusterInfo_args();
        await tmp1061.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1062 = new InternalStructs.listClusterInfo_result();
        try
        {
          tmp1062.Success = await _iAsync.listClusterInfo(tmp1061.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listClusterInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1062.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1063)
        {
          var tmp1064 = $"Error occurred in {GetType().FullName}: {tmp1063.Message}";
          if(_logger != null)
            _logger.LogError(tmp1063, tmp1064);
          else
            Console.Error.WriteLine(tmp1064);
          var tmp1065 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listClusterInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp1065.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class transLeader_args : TBase
      {
        private global::Nebula.Storage.TransLeaderReq _req;

        public global::Nebula.Storage.TransLeaderReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public transLeader_args()
        {
        }

        public transLeader_args DeepCopy()
        {
          var tmp1066 = new transLeader_args();
          if((Req != null) && __isset.req)
          {
            tmp1066.Req = (global::Nebula.Storage.TransLeaderReq)this.Req.DeepCopy();
          }
          tmp1066.__isset.req = this.__isset.req;
          return tmp1066;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.TransLeaderReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1067 = new TStruct("transLeader_args");
            await oprot.WriteStructBeginAsync(tmp1067, cancellationToken);
            var tmp1068 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1068.Name = "req";
              tmp1068.Type = TType.Struct;
              tmp1068.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1068, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is transLeader_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1069 = new StringBuilder("transLeader_args(");
          int tmp1070 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1070++) { tmp1069.Append(", "); }
            tmp1069.Append("Req: ");
            Req.ToString(tmp1069);
          }
          tmp1069.Append(')');
          return tmp1069.ToString();
        }
      }


      public partial class transLeader_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public transLeader_result()
        {
        }

        public transLeader_result DeepCopy()
        {
          var tmp1071 = new transLeader_result();
          if((Success != null) && __isset.success)
          {
            tmp1071.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1071.__isset.success = this.__isset.success;
          return tmp1071;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1072 = new TStruct("transLeader_result");
            await oprot.WriteStructBeginAsync(tmp1072, cancellationToken);
            var tmp1073 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1073.Name = "Success";
                tmp1073.Type = TType.Struct;
                tmp1073.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1073, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is transLeader_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1074 = new StringBuilder("transLeader_result(");
          int tmp1075 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1075++) { tmp1074.Append(", "); }
            tmp1074.Append("Success: ");
            Success.ToString(tmp1074);
          }
          tmp1074.Append(')');
          return tmp1074.ToString();
        }
      }


      public partial class addPart_args : TBase
      {
        private global::Nebula.Storage.AddPartReq _req;

        public global::Nebula.Storage.AddPartReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addPart_args()
        {
        }

        public addPart_args DeepCopy()
        {
          var tmp1076 = new addPart_args();
          if((Req != null) && __isset.req)
          {
            tmp1076.Req = (global::Nebula.Storage.AddPartReq)this.Req.DeepCopy();
          }
          tmp1076.__isset.req = this.__isset.req;
          return tmp1076;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.AddPartReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1077 = new TStruct("addPart_args");
            await oprot.WriteStructBeginAsync(tmp1077, cancellationToken);
            var tmp1078 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1078.Name = "req";
              tmp1078.Type = TType.Struct;
              tmp1078.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1078, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addPart_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1079 = new StringBuilder("addPart_args(");
          int tmp1080 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1080++) { tmp1079.Append(", "); }
            tmp1079.Append("Req: ");
            Req.ToString(tmp1079);
          }
          tmp1079.Append(')');
          return tmp1079.ToString();
        }
      }


      public partial class addPart_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addPart_result()
        {
        }

        public addPart_result DeepCopy()
        {
          var tmp1081 = new addPart_result();
          if((Success != null) && __isset.success)
          {
            tmp1081.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1081.__isset.success = this.__isset.success;
          return tmp1081;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1082 = new TStruct("addPart_result");
            await oprot.WriteStructBeginAsync(tmp1082, cancellationToken);
            var tmp1083 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1083.Name = "Success";
                tmp1083.Type = TType.Struct;
                tmp1083.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1083, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addPart_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1084 = new StringBuilder("addPart_result(");
          int tmp1085 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1085++) { tmp1084.Append(", "); }
            tmp1084.Append("Success: ");
            Success.ToString(tmp1084);
          }
          tmp1084.Append(')');
          return tmp1084.ToString();
        }
      }


      public partial class addLearner_args : TBase
      {
        private global::Nebula.Storage.AddLearnerReq _req;

        public global::Nebula.Storage.AddLearnerReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addLearner_args()
        {
        }

        public addLearner_args DeepCopy()
        {
          var tmp1086 = new addLearner_args();
          if((Req != null) && __isset.req)
          {
            tmp1086.Req = (global::Nebula.Storage.AddLearnerReq)this.Req.DeepCopy();
          }
          tmp1086.__isset.req = this.__isset.req;
          return tmp1086;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.AddLearnerReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1087 = new TStruct("addLearner_args");
            await oprot.WriteStructBeginAsync(tmp1087, cancellationToken);
            var tmp1088 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1088.Name = "req";
              tmp1088.Type = TType.Struct;
              tmp1088.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1088, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addLearner_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1089 = new StringBuilder("addLearner_args(");
          int tmp1090 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1090++) { tmp1089.Append(", "); }
            tmp1089.Append("Req: ");
            Req.ToString(tmp1089);
          }
          tmp1089.Append(')');
          return tmp1089.ToString();
        }
      }


      public partial class addLearner_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addLearner_result()
        {
        }

        public addLearner_result DeepCopy()
        {
          var tmp1091 = new addLearner_result();
          if((Success != null) && __isset.success)
          {
            tmp1091.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1091.__isset.success = this.__isset.success;
          return tmp1091;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1092 = new TStruct("addLearner_result");
            await oprot.WriteStructBeginAsync(tmp1092, cancellationToken);
            var tmp1093 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1093.Name = "Success";
                tmp1093.Type = TType.Struct;
                tmp1093.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1093, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addLearner_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1094 = new StringBuilder("addLearner_result(");
          int tmp1095 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1095++) { tmp1094.Append(", "); }
            tmp1094.Append("Success: ");
            Success.ToString(tmp1094);
          }
          tmp1094.Append(')');
          return tmp1094.ToString();
        }
      }


      public partial class removePart_args : TBase
      {
        private global::Nebula.Storage.RemovePartReq _req;

        public global::Nebula.Storage.RemovePartReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public removePart_args()
        {
        }

        public removePart_args DeepCopy()
        {
          var tmp1096 = new removePart_args();
          if((Req != null) && __isset.req)
          {
            tmp1096.Req = (global::Nebula.Storage.RemovePartReq)this.Req.DeepCopy();
          }
          tmp1096.__isset.req = this.__isset.req;
          return tmp1096;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.RemovePartReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1097 = new TStruct("removePart_args");
            await oprot.WriteStructBeginAsync(tmp1097, cancellationToken);
            var tmp1098 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1098.Name = "req";
              tmp1098.Type = TType.Struct;
              tmp1098.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1098, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removePart_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1099 = new StringBuilder("removePart_args(");
          int tmp1100 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1100++) { tmp1099.Append(", "); }
            tmp1099.Append("Req: ");
            Req.ToString(tmp1099);
          }
          tmp1099.Append(')');
          return tmp1099.ToString();
        }
      }


      public partial class removePart_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public removePart_result()
        {
        }

        public removePart_result DeepCopy()
        {
          var tmp1101 = new removePart_result();
          if((Success != null) && __isset.success)
          {
            tmp1101.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1101.__isset.success = this.__isset.success;
          return tmp1101;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1102 = new TStruct("removePart_result");
            await oprot.WriteStructBeginAsync(tmp1102, cancellationToken);
            var tmp1103 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1103.Name = "Success";
                tmp1103.Type = TType.Struct;
                tmp1103.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1103, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is removePart_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1104 = new StringBuilder("removePart_result(");
          int tmp1105 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1105++) { tmp1104.Append(", "); }
            tmp1104.Append("Success: ");
            Success.ToString(tmp1104);
          }
          tmp1104.Append(')');
          return tmp1104.ToString();
        }
      }


      public partial class memberChange_args : TBase
      {
        private global::Nebula.Storage.MemberChangeReq _req;

        public global::Nebula.Storage.MemberChangeReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public memberChange_args()
        {
        }

        public memberChange_args DeepCopy()
        {
          var tmp1106 = new memberChange_args();
          if((Req != null) && __isset.req)
          {
            tmp1106.Req = (global::Nebula.Storage.MemberChangeReq)this.Req.DeepCopy();
          }
          tmp1106.__isset.req = this.__isset.req;
          return tmp1106;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.MemberChangeReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1107 = new TStruct("memberChange_args");
            await oprot.WriteStructBeginAsync(tmp1107, cancellationToken);
            var tmp1108 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1108.Name = "req";
              tmp1108.Type = TType.Struct;
              tmp1108.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1108, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is memberChange_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1109 = new StringBuilder("memberChange_args(");
          int tmp1110 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1110++) { tmp1109.Append(", "); }
            tmp1109.Append("Req: ");
            Req.ToString(tmp1109);
          }
          tmp1109.Append(')');
          return tmp1109.ToString();
        }
      }


      public partial class memberChange_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public memberChange_result()
        {
        }

        public memberChange_result DeepCopy()
        {
          var tmp1111 = new memberChange_result();
          if((Success != null) && __isset.success)
          {
            tmp1111.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1111.__isset.success = this.__isset.success;
          return tmp1111;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1112 = new TStruct("memberChange_result");
            await oprot.WriteStructBeginAsync(tmp1112, cancellationToken);
            var tmp1113 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1113.Name = "Success";
                tmp1113.Type = TType.Struct;
                tmp1113.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1113, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is memberChange_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1114 = new StringBuilder("memberChange_result(");
          int tmp1115 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1115++) { tmp1114.Append(", "); }
            tmp1114.Append("Success: ");
            Success.ToString(tmp1114);
          }
          tmp1114.Append(')');
          return tmp1114.ToString();
        }
      }


      public partial class waitingForCatchUpData_args : TBase
      {
        private global::Nebula.Storage.CatchUpDataReq _req;

        public global::Nebula.Storage.CatchUpDataReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public waitingForCatchUpData_args()
        {
        }

        public waitingForCatchUpData_args DeepCopy()
        {
          var tmp1116 = new waitingForCatchUpData_args();
          if((Req != null) && __isset.req)
          {
            tmp1116.Req = (global::Nebula.Storage.CatchUpDataReq)this.Req.DeepCopy();
          }
          tmp1116.__isset.req = this.__isset.req;
          return tmp1116;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.CatchUpDataReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1117 = new TStruct("waitingForCatchUpData_args");
            await oprot.WriteStructBeginAsync(tmp1117, cancellationToken);
            var tmp1118 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1118.Name = "req";
              tmp1118.Type = TType.Struct;
              tmp1118.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1118, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is waitingForCatchUpData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1119 = new StringBuilder("waitingForCatchUpData_args(");
          int tmp1120 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1120++) { tmp1119.Append(", "); }
            tmp1119.Append("Req: ");
            Req.ToString(tmp1119);
          }
          tmp1119.Append(')');
          return tmp1119.ToString();
        }
      }


      public partial class waitingForCatchUpData_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public waitingForCatchUpData_result()
        {
        }

        public waitingForCatchUpData_result DeepCopy()
        {
          var tmp1121 = new waitingForCatchUpData_result();
          if((Success != null) && __isset.success)
          {
            tmp1121.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1121.__isset.success = this.__isset.success;
          return tmp1121;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1122 = new TStruct("waitingForCatchUpData_result");
            await oprot.WriteStructBeginAsync(tmp1122, cancellationToken);
            var tmp1123 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1123.Name = "Success";
                tmp1123.Type = TType.Struct;
                tmp1123.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1123, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is waitingForCatchUpData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1124 = new StringBuilder("waitingForCatchUpData_result(");
          int tmp1125 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1125++) { tmp1124.Append(", "); }
            tmp1124.Append("Success: ");
            Success.ToString(tmp1124);
          }
          tmp1124.Append(')');
          return tmp1124.ToString();
        }
      }


      public partial class createCheckpoint_args : TBase
      {
        private global::Nebula.Storage.CreateCPRequest _req;

        public global::Nebula.Storage.CreateCPRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public createCheckpoint_args()
        {
        }

        public createCheckpoint_args DeepCopy()
        {
          var tmp1126 = new createCheckpoint_args();
          if((Req != null) && __isset.req)
          {
            tmp1126.Req = (global::Nebula.Storage.CreateCPRequest)this.Req.DeepCopy();
          }
          tmp1126.__isset.req = this.__isset.req;
          return tmp1126;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.CreateCPRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1127 = new TStruct("createCheckpoint_args");
            await oprot.WriteStructBeginAsync(tmp1127, cancellationToken);
            var tmp1128 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1128.Name = "req";
              tmp1128.Type = TType.Struct;
              tmp1128.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1128, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCheckpoint_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1129 = new StringBuilder("createCheckpoint_args(");
          int tmp1130 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1130++) { tmp1129.Append(", "); }
            tmp1129.Append("Req: ");
            Req.ToString(tmp1129);
          }
          tmp1129.Append(')');
          return tmp1129.ToString();
        }
      }


      public partial class createCheckpoint_result : TBase
      {
        private global::Nebula.Storage.CreateCPResp _success;

        public global::Nebula.Storage.CreateCPResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createCheckpoint_result()
        {
        }

        public createCheckpoint_result DeepCopy()
        {
          var tmp1131 = new createCheckpoint_result();
          if((Success != null) && __isset.success)
          {
            tmp1131.Success = (global::Nebula.Storage.CreateCPResp)this.Success.DeepCopy();
          }
          tmp1131.__isset.success = this.__isset.success;
          return tmp1131;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.CreateCPResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1132 = new TStruct("createCheckpoint_result");
            await oprot.WriteStructBeginAsync(tmp1132, cancellationToken);
            var tmp1133 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1133.Name = "Success";
                tmp1133.Type = TType.Struct;
                tmp1133.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1133, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCheckpoint_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1134 = new StringBuilder("createCheckpoint_result(");
          int tmp1135 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1135++) { tmp1134.Append(", "); }
            tmp1134.Append("Success: ");
            Success.ToString(tmp1134);
          }
          tmp1134.Append(')');
          return tmp1134.ToString();
        }
      }


      public partial class dropCheckpoint_args : TBase
      {
        private global::Nebula.Storage.DropCPRequest _req;

        public global::Nebula.Storage.DropCPRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public dropCheckpoint_args()
        {
        }

        public dropCheckpoint_args DeepCopy()
        {
          var tmp1136 = new dropCheckpoint_args();
          if((Req != null) && __isset.req)
          {
            tmp1136.Req = (global::Nebula.Storage.DropCPRequest)this.Req.DeepCopy();
          }
          tmp1136.__isset.req = this.__isset.req;
          return tmp1136;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.DropCPRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1137 = new TStruct("dropCheckpoint_args");
            await oprot.WriteStructBeginAsync(tmp1137, cancellationToken);
            var tmp1138 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1138.Name = "req";
              tmp1138.Type = TType.Struct;
              tmp1138.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1138, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropCheckpoint_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1139 = new StringBuilder("dropCheckpoint_args(");
          int tmp1140 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1140++) { tmp1139.Append(", "); }
            tmp1139.Append("Req: ");
            Req.ToString(tmp1139);
          }
          tmp1139.Append(')');
          return tmp1139.ToString();
        }
      }


      public partial class dropCheckpoint_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public dropCheckpoint_result()
        {
        }

        public dropCheckpoint_result DeepCopy()
        {
          var tmp1141 = new dropCheckpoint_result();
          if((Success != null) && __isset.success)
          {
            tmp1141.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1141.__isset.success = this.__isset.success;
          return tmp1141;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1142 = new TStruct("dropCheckpoint_result");
            await oprot.WriteStructBeginAsync(tmp1142, cancellationToken);
            var tmp1143 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1143.Name = "Success";
                tmp1143.Type = TType.Struct;
                tmp1143.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1143, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is dropCheckpoint_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1144 = new StringBuilder("dropCheckpoint_result(");
          int tmp1145 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1145++) { tmp1144.Append(", "); }
            tmp1144.Append("Success: ");
            Success.ToString(tmp1144);
          }
          tmp1144.Append(')');
          return tmp1144.ToString();
        }
      }


      public partial class blockingWrites_args : TBase
      {
        private global::Nebula.Storage.BlockingSignRequest _req;

        public global::Nebula.Storage.BlockingSignRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public blockingWrites_args()
        {
        }

        public blockingWrites_args DeepCopy()
        {
          var tmp1146 = new blockingWrites_args();
          if((Req != null) && __isset.req)
          {
            tmp1146.Req = (global::Nebula.Storage.BlockingSignRequest)this.Req.DeepCopy();
          }
          tmp1146.__isset.req = this.__isset.req;
          return tmp1146;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.BlockingSignRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1147 = new TStruct("blockingWrites_args");
            await oprot.WriteStructBeginAsync(tmp1147, cancellationToken);
            var tmp1148 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1148.Name = "req";
              tmp1148.Type = TType.Struct;
              tmp1148.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1148, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is blockingWrites_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1149 = new StringBuilder("blockingWrites_args(");
          int tmp1150 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1150++) { tmp1149.Append(", "); }
            tmp1149.Append("Req: ");
            Req.ToString(tmp1149);
          }
          tmp1149.Append(')');
          return tmp1149.ToString();
        }
      }


      public partial class blockingWrites_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public blockingWrites_result()
        {
        }

        public blockingWrites_result DeepCopy()
        {
          var tmp1151 = new blockingWrites_result();
          if((Success != null) && __isset.success)
          {
            tmp1151.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1151.__isset.success = this.__isset.success;
          return tmp1151;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1152 = new TStruct("blockingWrites_result");
            await oprot.WriteStructBeginAsync(tmp1152, cancellationToken);
            var tmp1153 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1153.Name = "Success";
                tmp1153.Type = TType.Struct;
                tmp1153.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1153, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is blockingWrites_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1154 = new StringBuilder("blockingWrites_result(");
          int tmp1155 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1155++) { tmp1154.Append(", "); }
            tmp1154.Append("Success: ");
            Success.ToString(tmp1154);
          }
          tmp1154.Append(')');
          return tmp1154.ToString();
        }
      }


      public partial class rebuildTagIndex_args : TBase
      {
        private global::Nebula.Storage.RebuildIndexRequest _req;

        public global::Nebula.Storage.RebuildIndexRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public rebuildTagIndex_args()
        {
        }

        public rebuildTagIndex_args DeepCopy()
        {
          var tmp1156 = new rebuildTagIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp1156.Req = (global::Nebula.Storage.RebuildIndexRequest)this.Req.DeepCopy();
          }
          tmp1156.__isset.req = this.__isset.req;
          return tmp1156;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.RebuildIndexRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1157 = new TStruct("rebuildTagIndex_args");
            await oprot.WriteStructBeginAsync(tmp1157, cancellationToken);
            var tmp1158 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1158.Name = "req";
              tmp1158.Type = TType.Struct;
              tmp1158.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1158, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebuildTagIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1159 = new StringBuilder("rebuildTagIndex_args(");
          int tmp1160 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1160++) { tmp1159.Append(", "); }
            tmp1159.Append("Req: ");
            Req.ToString(tmp1159);
          }
          tmp1159.Append(')');
          return tmp1159.ToString();
        }
      }


      public partial class rebuildTagIndex_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public rebuildTagIndex_result()
        {
        }

        public rebuildTagIndex_result DeepCopy()
        {
          var tmp1161 = new rebuildTagIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp1161.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1161.__isset.success = this.__isset.success;
          return tmp1161;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1162 = new TStruct("rebuildTagIndex_result");
            await oprot.WriteStructBeginAsync(tmp1162, cancellationToken);
            var tmp1163 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1163.Name = "Success";
                tmp1163.Type = TType.Struct;
                tmp1163.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1163, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebuildTagIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1164 = new StringBuilder("rebuildTagIndex_result(");
          int tmp1165 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1165++) { tmp1164.Append(", "); }
            tmp1164.Append("Success: ");
            Success.ToString(tmp1164);
          }
          tmp1164.Append(')');
          return tmp1164.ToString();
        }
      }


      public partial class rebuildEdgeIndex_args : TBase
      {
        private global::Nebula.Storage.RebuildIndexRequest _req;

        public global::Nebula.Storage.RebuildIndexRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public rebuildEdgeIndex_args()
        {
        }

        public rebuildEdgeIndex_args DeepCopy()
        {
          var tmp1166 = new rebuildEdgeIndex_args();
          if((Req != null) && __isset.req)
          {
            tmp1166.Req = (global::Nebula.Storage.RebuildIndexRequest)this.Req.DeepCopy();
          }
          tmp1166.__isset.req = this.__isset.req;
          return tmp1166;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.RebuildIndexRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1167 = new TStruct("rebuildEdgeIndex_args");
            await oprot.WriteStructBeginAsync(tmp1167, cancellationToken);
            var tmp1168 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1168.Name = "req";
              tmp1168.Type = TType.Struct;
              tmp1168.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1168, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebuildEdgeIndex_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1169 = new StringBuilder("rebuildEdgeIndex_args(");
          int tmp1170 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1170++) { tmp1169.Append(", "); }
            tmp1169.Append("Req: ");
            Req.ToString(tmp1169);
          }
          tmp1169.Append(')');
          return tmp1169.ToString();
        }
      }


      public partial class rebuildEdgeIndex_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public rebuildEdgeIndex_result()
        {
        }

        public rebuildEdgeIndex_result DeepCopy()
        {
          var tmp1171 = new rebuildEdgeIndex_result();
          if((Success != null) && __isset.success)
          {
            tmp1171.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1171.__isset.success = this.__isset.success;
          return tmp1171;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1172 = new TStruct("rebuildEdgeIndex_result");
            await oprot.WriteStructBeginAsync(tmp1172, cancellationToken);
            var tmp1173 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1173.Name = "Success";
                tmp1173.Type = TType.Struct;
                tmp1173.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1173, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebuildEdgeIndex_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1174 = new StringBuilder("rebuildEdgeIndex_result(");
          int tmp1175 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1175++) { tmp1174.Append(", "); }
            tmp1174.Append("Success: ");
            Success.ToString(tmp1174);
          }
          tmp1174.Append(')');
          return tmp1174.ToString();
        }
      }


      public partial class getLeaderParts_args : TBase
      {
        private global::Nebula.Storage.GetLeaderReq _req;

        public global::Nebula.Storage.GetLeaderReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getLeaderParts_args()
        {
        }

        public getLeaderParts_args DeepCopy()
        {
          var tmp1176 = new getLeaderParts_args();
          if((Req != null) && __isset.req)
          {
            tmp1176.Req = (global::Nebula.Storage.GetLeaderReq)this.Req.DeepCopy();
          }
          tmp1176.__isset.req = this.__isset.req;
          return tmp1176;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.GetLeaderReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1177 = new TStruct("getLeaderParts_args");
            await oprot.WriteStructBeginAsync(tmp1177, cancellationToken);
            var tmp1178 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1178.Name = "req";
              tmp1178.Type = TType.Struct;
              tmp1178.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1178, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getLeaderParts_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1179 = new StringBuilder("getLeaderParts_args(");
          int tmp1180 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1180++) { tmp1179.Append(", "); }
            tmp1179.Append("Req: ");
            Req.ToString(tmp1179);
          }
          tmp1179.Append(')');
          return tmp1179.ToString();
        }
      }


      public partial class getLeaderParts_result : TBase
      {
        private global::Nebula.Storage.GetLeaderPartsResp _success;

        public global::Nebula.Storage.GetLeaderPartsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getLeaderParts_result()
        {
        }

        public getLeaderParts_result DeepCopy()
        {
          var tmp1181 = new getLeaderParts_result();
          if((Success != null) && __isset.success)
          {
            tmp1181.Success = (global::Nebula.Storage.GetLeaderPartsResp)this.Success.DeepCopy();
          }
          tmp1181.__isset.success = this.__isset.success;
          return tmp1181;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.GetLeaderPartsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1182 = new TStruct("getLeaderParts_result");
            await oprot.WriteStructBeginAsync(tmp1182, cancellationToken);
            var tmp1183 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1183.Name = "Success";
                tmp1183.Type = TType.Struct;
                tmp1183.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1183, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getLeaderParts_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1184 = new StringBuilder("getLeaderParts_result(");
          int tmp1185 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1185++) { tmp1184.Append(", "); }
            tmp1184.Append("Success: ");
            Success.ToString(tmp1184);
          }
          tmp1184.Append(')');
          return tmp1184.ToString();
        }
      }


      public partial class checkPeers_args : TBase
      {
        private global::Nebula.Storage.CheckPeersReq _req;

        public global::Nebula.Storage.CheckPeersReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public checkPeers_args()
        {
        }

        public checkPeers_args DeepCopy()
        {
          var tmp1186 = new checkPeers_args();
          if((Req != null) && __isset.req)
          {
            tmp1186.Req = (global::Nebula.Storage.CheckPeersReq)this.Req.DeepCopy();
          }
          tmp1186.__isset.req = this.__isset.req;
          return tmp1186;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.CheckPeersReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1187 = new TStruct("checkPeers_args");
            await oprot.WriteStructBeginAsync(tmp1187, cancellationToken);
            var tmp1188 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1188.Name = "req";
              tmp1188.Type = TType.Struct;
              tmp1188.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1188, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is checkPeers_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1189 = new StringBuilder("checkPeers_args(");
          int tmp1190 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1190++) { tmp1189.Append(", "); }
            tmp1189.Append("Req: ");
            Req.ToString(tmp1189);
          }
          tmp1189.Append(')');
          return tmp1189.ToString();
        }
      }


      public partial class checkPeers_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public checkPeers_result()
        {
        }

        public checkPeers_result DeepCopy()
        {
          var tmp1191 = new checkPeers_result();
          if((Success != null) && __isset.success)
          {
            tmp1191.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1191.__isset.success = this.__isset.success;
          return tmp1191;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1192 = new TStruct("checkPeers_result");
            await oprot.WriteStructBeginAsync(tmp1192, cancellationToken);
            var tmp1193 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1193.Name = "Success";
                tmp1193.Type = TType.Struct;
                tmp1193.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1193, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is checkPeers_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1194 = new StringBuilder("checkPeers_result(");
          int tmp1195 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1195++) { tmp1194.Append(", "); }
            tmp1194.Append("Success: ");
            Success.ToString(tmp1194);
          }
          tmp1194.Append(')');
          return tmp1194.ToString();
        }
      }


      public partial class addAdminTask_args : TBase
      {
        private global::Nebula.Storage.AddAdminTaskRequest _req;

        public global::Nebula.Storage.AddAdminTaskRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public addAdminTask_args()
        {
        }

        public addAdminTask_args DeepCopy()
        {
          var tmp1196 = new addAdminTask_args();
          if((Req != null) && __isset.req)
          {
            tmp1196.Req = (global::Nebula.Storage.AddAdminTaskRequest)this.Req.DeepCopy();
          }
          tmp1196.__isset.req = this.__isset.req;
          return tmp1196;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.AddAdminTaskRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1197 = new TStruct("addAdminTask_args");
            await oprot.WriteStructBeginAsync(tmp1197, cancellationToken);
            var tmp1198 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1198.Name = "req";
              tmp1198.Type = TType.Struct;
              tmp1198.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1198, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addAdminTask_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1199 = new StringBuilder("addAdminTask_args(");
          int tmp1200 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1200++) { tmp1199.Append(", "); }
            tmp1199.Append("Req: ");
            Req.ToString(tmp1199);
          }
          tmp1199.Append(')');
          return tmp1199.ToString();
        }
      }


      public partial class addAdminTask_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public addAdminTask_result()
        {
        }

        public addAdminTask_result DeepCopy()
        {
          var tmp1201 = new addAdminTask_result();
          if((Success != null) && __isset.success)
          {
            tmp1201.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1201.__isset.success = this.__isset.success;
          return tmp1201;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1202 = new TStruct("addAdminTask_result");
            await oprot.WriteStructBeginAsync(tmp1202, cancellationToken);
            var tmp1203 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1203.Name = "Success";
                tmp1203.Type = TType.Struct;
                tmp1203.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1203, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is addAdminTask_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1204 = new StringBuilder("addAdminTask_result(");
          int tmp1205 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1205++) { tmp1204.Append(", "); }
            tmp1204.Append("Success: ");
            Success.ToString(tmp1204);
          }
          tmp1204.Append(')');
          return tmp1204.ToString();
        }
      }


      public partial class stopAdminTask_args : TBase
      {
        private global::Nebula.Storage.StopAdminTaskRequest _req;

        public global::Nebula.Storage.StopAdminTaskRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public stopAdminTask_args()
        {
        }

        public stopAdminTask_args DeepCopy()
        {
          var tmp1206 = new stopAdminTask_args();
          if((Req != null) && __isset.req)
          {
            tmp1206.Req = (global::Nebula.Storage.StopAdminTaskRequest)this.Req.DeepCopy();
          }
          tmp1206.__isset.req = this.__isset.req;
          return tmp1206;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.StopAdminTaskRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1207 = new TStruct("stopAdminTask_args");
            await oprot.WriteStructBeginAsync(tmp1207, cancellationToken);
            var tmp1208 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1208.Name = "req";
              tmp1208.Type = TType.Struct;
              tmp1208.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopAdminTask_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1209 = new StringBuilder("stopAdminTask_args(");
          int tmp1210 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1210++) { tmp1209.Append(", "); }
            tmp1209.Append("Req: ");
            Req.ToString(tmp1209);
          }
          tmp1209.Append(')');
          return tmp1209.ToString();
        }
      }


      public partial class stopAdminTask_result : TBase
      {
        private global::Nebula.Storage.AdminExecResp _success;

        public global::Nebula.Storage.AdminExecResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public stopAdminTask_result()
        {
        }

        public stopAdminTask_result DeepCopy()
        {
          var tmp1211 = new stopAdminTask_result();
          if((Success != null) && __isset.success)
          {
            tmp1211.Success = (global::Nebula.Storage.AdminExecResp)this.Success.DeepCopy();
          }
          tmp1211.__isset.success = this.__isset.success;
          return tmp1211;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.AdminExecResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1212 = new TStruct("stopAdminTask_result");
            await oprot.WriteStructBeginAsync(tmp1212, cancellationToken);
            var tmp1213 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1213.Name = "Success";
                tmp1213.Type = TType.Struct;
                tmp1213.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1213, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopAdminTask_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1214 = new StringBuilder("stopAdminTask_result(");
          int tmp1215 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1215++) { tmp1214.Append(", "); }
            tmp1214.Append("Success: ");
            Success.ToString(tmp1214);
          }
          tmp1214.Append(')');
          return tmp1214.ToString();
        }
      }


      public partial class listClusterInfo_args : TBase
      {
        private global::Nebula.Storage.ListClusterInfoReq _req;

        public global::Nebula.Storage.ListClusterInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public listClusterInfo_args()
        {
        }

        public listClusterInfo_args DeepCopy()
        {
          var tmp1216 = new listClusterInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp1216.Req = (global::Nebula.Storage.ListClusterInfoReq)this.Req.DeepCopy();
          }
          tmp1216.__isset.req = this.__isset.req;
          return tmp1216;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Storage.ListClusterInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1217 = new TStruct("listClusterInfo_args");
            await oprot.WriteStructBeginAsync(tmp1217, cancellationToken);
            var tmp1218 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp1218.Name = "req";
              tmp1218.Type = TType.Struct;
              tmp1218.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1218, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listClusterInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1219 = new StringBuilder("listClusterInfo_args(");
          int tmp1220 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp1220++) { tmp1219.Append(", "); }
            tmp1219.Append("Req: ");
            Req.ToString(tmp1219);
          }
          tmp1219.Append(')');
          return tmp1219.ToString();
        }
      }


      public partial class listClusterInfo_result : TBase
      {
        private global::Nebula.Storage.ListClusterInfoResp _success;

        public global::Nebula.Storage.ListClusterInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listClusterInfo_result()
        {
        }

        public listClusterInfo_result DeepCopy()
        {
          var tmp1221 = new listClusterInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp1221.Success = (global::Nebula.Storage.ListClusterInfoResp)this.Success.DeepCopy();
          }
          tmp1221.__isset.success = this.__isset.success;
          return tmp1221;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Storage.ListClusterInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1222 = new TStruct("listClusterInfo_result");
            await oprot.WriteStructBeginAsync(tmp1222, cancellationToken);
            var tmp1223 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1223.Name = "Success";
                tmp1223.Type = TType.Struct;
                tmp1223.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1223, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listClusterInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1224 = new StringBuilder("listClusterInfo_result(");
          int tmp1225 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1225++) { tmp1224.Append(", "); }
            tmp1224.Append("Success: ");
            Success.ToString(tmp1224);
          }
          tmp1224.Append(')');
          return tmp1224.ToString();
        }
      }

    }

  }
}
