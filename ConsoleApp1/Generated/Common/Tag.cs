/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class Tag : TBase
  {
    private byte[] _name;
    private Dictionary<byte[], global::Nebula.Common.@Value> _props;

    public byte[] Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public Dictionary<byte[], global::Nebula.Common.@Value> Props
    {
      get
      {
        return _props;
      }
      set
      {
        __isset.props = true;
        this._props = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool name;
      public bool props;
    }

    public Tag()
    {
    }

    public Tag DeepCopy()
    {
      var tmp112 = new Tag();
      if((Name != null) && __isset.name)
      {
        tmp112.Name = this.Name.ToArray();
      }
      tmp112.__isset.name = this.__isset.name;
      if((Props != null) && __isset.props)
      {
        tmp112.Props = this.Props.DeepCopy();
      }
      tmp112.__isset.props = this.__isset.props;
      return tmp112;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map113 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Props = new Dictionary<byte[], global::Nebula.Common.@Value>(_map113.Count);
                  for(int _i114 = 0; _i114 < _map113.Count; ++_i114)
                  {
                    byte[] _key115;
                    global::Nebula.Common.@Value _val116;
                    _key115 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val116 = new global::Nebula.Common.@Value();
                    await _val116.ReadAsync(iprot, cancellationToken);
                    Props[_key115] = _val116;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp117 = new TStruct("Tag");
        await oprot.WriteStructBeginAsync(tmp117, cancellationToken);
        var tmp118 = new TField();
        if((Name != null) && __isset.name)
        {
          tmp118.Name = "name";
          tmp118.Type = TType.String;
          tmp118.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          await oprot.WriteBinaryAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Props != null) && __isset.props)
        {
          tmp118.Name = "props";
          tmp118.Type = TType.Map;
          tmp118.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp118, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Props.Count), cancellationToken);
            foreach (byte[] _iter119 in Props.Keys)
            {
              await oprot.WriteBinaryAsync(_iter119, cancellationToken);
              await Props[_iter119].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Tag other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.name == other.__isset.name) && ((!__isset.name) || (TCollections.Equals(Name, other.Name))))
        && ((__isset.props == other.__isset.props) && ((!__isset.props) || (TCollections.Equals(Props, other.Props))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Props != null) && __isset.props)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Props);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp120 = new StringBuilder("Tag(");
      int tmp121 = 0;
      if((Name != null) && __isset.name)
      {
        if(0 < tmp121++) { tmp120.Append(", "); }
        tmp120.Append("Name: ");
        Name.ToString(tmp120);
      }
      if((Props != null) && __isset.props)
      {
        if(0 < tmp121++) { tmp120.Append(", "); }
        tmp120.Append("Props: ");
        Props.ToString(tmp120);
      }
      tmp120.Append(')');
      return tmp120.ToString();
    }
  }

}
